{
  "content_id": "7c589e42742e",
  "content_type": "pdf",
  "title": "Creatio Developer 3",
  "source_file": "/mnt/c/Users/amago/Desktop/InterWeave Documents/Creatio/Developer Course/transcripts/Creatio-Developer-3.pdf",
  "processed_content": {
    "text_content": "--- Page 1 ---\n\n \n  \n  \nSpeaker 1\n \n So today session number three of our development on creation platform guided learning. So we started \ndevelopment questions. We already set up our environment. We did some simple changes there. We practiced with \nobjects and with data items. I just forgot to note that you need some additional permissions and when you place \nyour environment, your app into some protected folders like Cub or C program files or somewhere in users. So it \nmeans that such folders are protected. In this case you may need some special permissions. I already did it \nsomewhere here, so let me show you what special permissions you may need. No, not here. Let me find probably \nthis one. Yes. So this is important.  \n  \n  \nSpeaker 1\n \n If you experience some problems with your app and if you start to get error messages about some files are not \ncannot be written or you have some file system access issues, especially you can face it during calculation, you can \ncreate separate setting and you can find your app folder Terrasoft web folder and add special role IIs underscore I \nusers and you should provide modified permission for this role for all of your application folder Javasoft web folder \nthis will grant unlimited file system access to create your application. So you will not have troubles with saving files. \nYou will not have troubles with application errors about some file system issues. In case if you will find errors like we \nhad with Bazel, that system tries to save some data somewhere and fails. You can also make sure that such \npermission is granted.  \n  \n  \nSpeaker 1\n \n So iis I users it's a local role which includes set of automatically created users made by creature. Sorry, made by IIS. \nWhen you create your application pool system makes automatic creation of application pool identity and such \nidentity. Actually it's medically generated user. I can show you something in my c users. You see I have a lot of site \nautomatically generated users created previously, so I probably should remove most of them. But this is something \nthat you need to know. That system runs under such privilege. If you have local administrator privilege, you can also \nlook at your task manager and you can see who exactly runs w three WP process. In my case this is some user \nwhich I can't see unless I will start something with my local administrative privilege.  \n  \n  \nSpeaker 1\n \n But currently my regular user has no such privilege because of corporate restrictions which I have with my \nenvironment. So let's move on. So this is something that may help you with troubleshooting of your access issues of \nyour application. Now let's move on with next topic. So I just wanted to show you some interesting thing with virtual \nobjects and with connecting objects to a database view because previously we worked only with regular normal \nobjects when you created it makes the same database table in your real database. So we added some data. Now \nyou see the same data records physically, but you can create very interesting situation when object can be \nconnected with something in database not created by creation application.  \n  \n  \nSpeaker 1\n \n For example we can make our own view in database, so we can use some SQL scripting and then we can make an \nobject named the same as this view and we will have the same columns in our object the same as available in view. \nAnd finally it will show you some interesting trick, how you can use creation objects to read data from sources not \ncreated by creation system. For example, such sources may be created by developer or can be used for integration \npurpose to connect with other systems. So let me show you some simple example which implements this idea. And \nfirst of all I need to tell you something about business. So here we have a contacts section. Contacts were installed \nhere because we recently, yesterday we installed customer 360 app and we used application hub for this.  \n   \n\n--- Page 2 ---\n\n Speaker 1\n \n Here we used application hub and we installed it from marketplace. So this customer 360 was installed from \ncreation marketplace. Customer 360 encodes contacts and accounts. So now we have contacts section and what I \nwant to show you is that contact by default already has birth date column and also contact entity has integer age \ncolumn representing current age which is recalculated every day automatically according to birth date and current \ndate. Let's make a bit more examples with age calculation so we can click on supervisor. We can provide some birth \ndate somewhere in like this where it be save close. So now you can see we have provided some birth date and we \nhave automatically recalculated age. So this is age in years and everything looks good. But let's imagine we have \nsome unusual task to calculate age of a contact but not in years.  \n  \n  \nSpeaker 1\n \n We want to calculate it in days. So just to see how many days certain person lived and what is its current age in \ndays. We can do it easily at the database level. So let me show you, I already have some examples how we can do \nthis. So I will do it quick and I will provide you necessary scripts for this SQL view. So let me show you how we can \ndo this example. So first of all I will show you an example which makes corresponding calculation like this. And this \nis Microsoft SQL server query which selects id name, birth date. And we use some SQL functions like date default \nfunction to make some kind of calculation here. Now we do a calculation of a difference between birth date and get \ndate.  \n  \n  \nSpeaker 1\n \n So actually it's better to say difference between get date which represents current date and birth date. And it makes \na difference in days and shows us some integer value. So if we run such query we will see list of our contacts and \nwe will see age in days. This is a very simple example. It is made specialist, so simple so you easily understand it in \nreal life. Such approach like making your own selections from the database can be much more complicated. Using \nsome aggregations, using joins, using subqueries, using having operators, using group by and a lot of other things. \nSo you can do it unlimited complex if necessary. My example shows you that you can do some queries, you can use \nsome functions from SQL, you can do the same in postgres.  \n  \n  \nSpeaker 1\n \n And this is example of how we can do some special selection from the database which is not normally available if \nyou want to use just only creation tools. So creation supports three types of databases. It doesn't support some \nspecific database dependent features like date, d function. And also we have not so much of flexibility building \nqueries in our creation. So as we have flexibility to build queries directly from SQL. So now you can see we have an \nexample of such query. So what else we do? Now I will show you how we can make a database view based on this \nquery. We can use SQL script and of course I could run this SQL script directly at my SQL Server management \nstudio. But my plan is to make it transportable to other solutions, to other environments.  \n  \n  \nSpeaker 1\n \n So I will share example of a script for creating Vue for SQL version and some of you are running postgres. For \nexample you may run postgres at cloud instances like demo websites or maybe trial websites. They are usually \nbased on cloud, on postgres. So this is example of postgres for the same stuff. Okay, so these such scripts of \ncourse obviously are database dependent. Now I plan to use my SQL version but I will not run it directly in this editor. \nI know it will work for me, but I can show you how we can make a SQL script in our package. So let's go to \nconfiguration our system, then settings, then advanced settings. That's how we go to advanced settings part. Or we \ncan also go here by typing the URL of our website zero dev.  \n   \nSpeaker 1\n\n--- Page 3 ---\n\n  \n That's how we go to configuration section, find our package that we decided to use. Add SQL script I can name my \nSQL script whatever I want. For example USR, create contact age, days view, something like this. It could be \nanything. When we create this script, when we start the script in a process of package load, it could before package \nbecause at the very beginning of the package load procedure, no backward compatibility just apply and I have my \nscript here in the clipboard. So this script creates or modifies database view with a certain name. This name should \nstart with USR. Then you can do whatever you want and you can name it. But there are some conventions agreed \nwith developers and if you make a view it makes sense to name it vw.  \n  \n  \nSpeaker 1\n \n Just to make clear that your object is not a simple table, you plan to make a view. So this view name should be the \nsame as our future object that we will create. That's why this view has such a strange name. This view will work as \nselect statement, selecting set of columns and as you can see I have to use aliases for columns with USR prefix \nbecause of requirements. When we design our object in creation configuration it asks us, not forces us to use USR \nfor column prefixes. Yes here so you can see we select id name, birth date which includes day, month and year and \ndate diff as an integer value which will represent age in days. So this simple view will return four columns for us and \nwe can register so we can set it up as a SQL script.  \n  \n  \nSpeaker 1\n \n You can save this SQL script. Obviously if you work with postgres database you should use postgres version for this. \nWhen you create SQL script you can decide what type of database you are focusing. So close it and we can also run \nthis script. So of course I could run it in my SQL server management studio. But here this is example of how we can \nrun SQL script from your configuration section. Okay I'm trying to install it means run this script. Now if it has some \nerrors we can go to properties find last error message text so we can see what went wrong here. In my case \neverything looks good so nothing special. I already have my view and I can check this view presence running \nsomething like this. Select something so select everything from and here is my name of the view.  \n  \n  \nSpeaker 1\n \n So if I select successfully. Yes, now it looks like my view is present. It has four columns and my database level part \nis ready. So I have database item as a view which returns some data if I select it. If something is not clear, if \nsomething you do not fully understand why I'm doing this. Please don't be shy, ask questions, I will be happy to \nanswer you. And now this database part is ready but now we have to join it with creation. In creation we can create \nan object and we can provide the same code for the object as our database view name. Here I will also paste it for \nyou. Don't forget we can also make some title, something like contact age and dates, something like this and the \nmost important property here.  \n  \n  \nSpeaker 1\n \n So now I will show you and explain some of behavior settings we must set up. Represents structure of database \nview this is very important property which tells creature that system should not try to create corresponding table or \nfind existing table. If we create an object with represent structure of database on it means developer took care about \ndatabase part themselves. So everything is already okay at the database. So creature will just not interfere with the \ndatabase to not try to create a table or modify existing table. So creature simply doesn't know what is in database \nfor you already corresponding object. But when you will try to use this object, for example, ask creation to select \ndata from it.  \n  \n  \nSpeaker 1\n \n It will try to do it and treat it as a table with a set of columns and columns information will be provided in this object, \nso it will try to use it as a regular object, but it will not try to modify its structure the database. This helps us to make \nanything at the database level, including views or self handmade tables. Or in some cases we can use like \n\n--- Page 4 ---\n\nmaterialized views in oracle or indexed views in Microsoft SQL. So you can use anything that can be used for \nselection from the database and turning on this option represents structure of database view makes this trick \npossible. So when we design our object we will not use parent object because we do not need any kind of \ninheritance here.  \n  \n  \nSpeaker 1\n \n All we have to do is set of columns which matches with set of columns of a real database view. First column is \nUSRiD and the type is unique identifier. So we have to represent it. Type is unique identifier, column code is Usrid and \ntitle could be just id. Okay, this column is done. Next one is uSR name text 250 you can name name and it's okay. \nThird one is USR birth date which is a date only birth date. And the way the last one is integer USR age days the most \ninteresting column for us, integer USR age days age in days okay, so we got it. The last change that we have to do is \nthe only required property for an object is the Id. I don't like this title. I would like to see here key column or key field.  \n  \n  \nSpeaker 1\n \n So our key column is id column we created especially it has Usrid code and it has id title. So this is the most \nimportant part and that's all we can save and publish our object. As you remember, we can just click publish \nbecause it performs save anyway. And luckily for us, publishing such object which is represented as a database view \ndoes not make any changes in the database. So it will be really quick. Such publishing will be faster than creating \nnew table and saving publishing. Regular object so we made an object with a special property, special behavior and \nour object is ready now so we can start to use it. We can go to the lookups and as you already remember, lookups is \nthe easiest way to see what is inside your object. So we can register our object age in days.  \n  \n  \nSpeaker 1\n \n We can register this object as a lookup. By the way, you probably noticed we have a new button here. Sorry for this \nalignment, but it's not a big deal. This button appeared as a result of data binding tool and it helps us to automate \ncreating of data items and for many different scenarios. In our case, we need data item for register object as a \nlookup. If I click bind lookup here, I ask system to automatically create data item for me. I need only to select target \npackage and system will do automatic creation of data item without my manual action. So I can see what happened \nhere, what actually was done. You see that this data item was created automatically contact agent days so we can \nclose it. It is saved into our package now and it's okay, let's open created object now.  \n  \n  \nSpeaker 1\n \n You can see we have name column, we have birthday and we have age in date. So you can see this calculation \nworks. There are some side effects because of this is editable list and our object is not inherited from base entity. \nWe have some side effects caused by it like this. So you see it's not working fully as expected. But when we reload \ndata, at least reading data is working right, working correctly. So you see that calculation of contact in days, age of \ncontact in days is performed well. And you see this calculation works well in real life. You may use this approach to \nperform some long lasting calculations like turnover finance calculations, like some debt calculations, or other \nthings that usually take time. So you may do such calculations at the database level with kind of views and the \nsubqueries.  \n  \n  \nSpeaker 1\n \n Then you can create an object representing your data structure and with the same name and same columns set. And \nif you mark this object as represent structure database view system will not modify data tables. It will trust you and \nit will try to read data from sources that you specify. So it will try to read data from the table or view with the same \nname as your code. So this trick can be also useful. And I would like you to see how we can connect such object to \nexisting contacts section. In order to make connections between objects, we must use lookup columns. In our case, \nit's harder to make a lookup column from contacts to our new entity. So it's better to use our new entity and then use \nreverse joins to connect with contacts.  \n\n--- Page 5 ---\n\n  \n  \nSpeaker 1\n \n Now I will show you how we can do this. But first of all we need to modify our SQL script. Let's go to our SQL script \nand add one more column. We can add one more column. It will be id as contact id. So I will use new not to contact \nUSR contact id. Yeah, so this will be one more column and I plan to use this column as a basis for my future lookup \ncolumn. Of course I need to run this query. This will be very quick. We can check out the database that our new \ncolumn appeared. Great. It's important to name it exactly as is USR contact id. Okay then we will modify our object. \nSo our script is okay, let's go to modify our object we can add lookup column named contact not contact id.  \n  \n  \nSpeaker 1\n \n We will name it USR contact title can be contact and there are some architectural peculiarities. When we have a \ncode something then on database system works with code plus id suffix. So I named my column in the object level \nUSR contact and system will work with USR contact id when it reads data from the physical database. This happens \nnot only for this object, it happens for all objects with lookups. So let me show you like account. For example \naccount column account entity has an industry lookup column and at the database level we have industry id. It has \ntype at the object and at the database we have type id, city id, region id and other lookups saved in the database. So \nwhen we have a USR contact column, system will work and search for USR contact id at the database.  \n  \n  \nSpeaker 1\n \n We have to specify lookup property. It will be a contact obviously it looks like that's it. We do not need anything else. \nLet's save and publish. Click publish, make saving and publishing. Now you will see how we can use this object so \nwe can add connected. Probably we need to reload the page because of some client side issues. Caching issues \nmaybe prevent us from working normally. So our main entity is contact. Now I plan to join my contact age object as \na joint entity using reverse joins. Let me show you how we can do this. Add columns related objects. Now I have to \nfind contact age in days object and then I will use a age in days. For example, it will be maximum value no matter \nwhich one I will use. I can even use first record value.  \n  \n  \nSpeaker 1\n \n So let it be just maximum value for one contact. We always have just one data row in our connected entity. So \nmaximum will work for us. And I can just name this column age in days. No need to use any additional filters, save it. \nSo now you can see that age in days was successfully joined to existing contacts section. We did not customize \nanything with contacts at all. We used our own artificial objects. We made an artificial lookup column and that's how \nwe are able to connect to different entities and display corresponding data. I hope this is interesting example for \nyou. You probably have your own experience with use of column settings, related column settings. Some of you \nprobably visited our customization course provided by my colleagues.  \n  \n  \nSpeaker 1\n \n So possibly this is not very difficult for you, and if you have more questions about it, just tell me. So it was an \nexample of how you can use additional tricks with objects and to connect it using database view. There are some \nother properties here like virtual connected to the portal, wave update and so on. So I only have to tell you a couple \nof words about virtual. So virtual means that object will be not connected to database at all. Virtual objects are \nusually created for the purpose of providing some template structure and then to be inherited or for the purpose of \nmanaging data without actual read from the database operations inside of object model.  \n  \n  \nSpeaker 1\n \n If we will search in our configuration for objects, search for something with the name base, we'll find a lot of objects \n\n--- Page 6 ---\n\nlike base address, base entity, base folder and so on. I will open base lookup as example. You will see this object is \nvirtual, so it has no its own table. So you see object based lookup. But if you go to the database, you will not find the \ndatabase table named base lookup. So you see we have some base value lookup, something very suspicious and \ninteresting and okay, I will look at it later. But base lookup is not found here because this is a base object which is \nvirtual. And mainly it exists only to provide inheritance. We have set of columns, business columns, we have \ninherited system columns.  \n  \n  \nSpeaker 1\n \n And when we create new object inherited from base lookup, it will be a true new real object. But you will inherit a lot \nof properties and events, settings and behavior from base lookup. And that's how this object can be really useful \nbecause you can. So base architects can program lookups behavior. Once in base lookup object, then you create \nyour own lookups inherited from it. We did it actually. And that's how you can use one template for many parts of \nfunctionality. And it's quite efficient. So we have a lot of base objects, most of them are virtual. I only interested with \nthis strange example, base value lookup. So let's search base value lookup. Base lookup this value, it's very strange \nwhy we have table for it? Oh, because it's not virtual. Someone needs this object and someone keeps some data into \nit. Probably. It's interesting.  \n  \n  \nSpeaker 1\n \n Let's check. I never faced it previously. Base value lookup let's see what. So it's empty. Translations are also empty. \nOkay, no problems. Everything is okay. So that's it about lookups, about objects. And I only wanted to show you one \nmore thing, final thing about objects. And let's look at our reality type classic object as example. So I wanted to tell \nyou about support of translations. So for you already know that creation supports translation of user interface. You \nalready found we have a languages section, we have set of active languages, so you can easily switch your \nenvironment into other languages. In your profile you can switch languages if necessary. But what you probably do \nnot know so far is that creation does not only support your UI language change, it also supports translation of some \ndata records.  \n  \n  \nSpeaker 1\n \n And inside of the objects you can specify what columns will support this translation and what columns will not \nsupport translation. By default, name and description text columns are turned on with this option, localizable text. It \nmeans that if you want, you can save translations of name and description column into other languages. And this \ntranslation was already done at base product lookups. So if we read some data from some standard lookup like \naccount type, you will see six standard records in English. But if you will look further and find out that we have a \ntranslation tables for it, they usually have cis prefix, then main entity name, and then LC suffix, you will see \ntranslations for such data into other languages. So you can order by cis culture, you will see translations into other \nlanguages. Here is russian translation.  \n  \n  \nSpeaker 1\n \n Here is probably what else, I don't know what is the language here? This seems to be italian, maybe Portugal and so \non. Probably, I don't know, it's hard for me to guess. I can join and so decode such cultures. Okay, let's do this. Not so \ndifficult, syscall type. So this is our localizable, we can join sysculture and we will read data link from cis culture and \nthen culture name as language. Okay, so now you will see corresponding language. So this one was Russian, this \none is Dutch language. So Netherland language, this is Portuguese, this is Spanish, Vietnam language, French, Italian \nand others recently added Hungarian language, Czech Republic, arabian right to left by the way, there is a right to left \nsupport. This is what Sweden probably Hebrew, Romanian, Japanese.  \n  \n  \nSpeaker 1\n \n So you can see translations of the same records that you get from your main table are saved into different \nlanguages and out of the box lookups. That is because name and description are supported with localizable text. \n\n--- Page 7 ---\n\nYou can turn this option off if you don't like it or you can keep it on by default because it was inherited from base \nlookup. It was inherited and that's why we did not change it. So we also have possibility to save translations of name \nand description into this separate table. This separate table automatically is automatically created for our lookup \nand so if you enable at least one column it will be this separate table will be named CIs, then your object code, then \nLCZ. So in my case this information is empty. Sys usr realtor type lcz my table is empty, we have to type classic.  \n  \n  \nSpeaker 1\n \n Yes, you see my table is empty because I did not provide any translation. But once you will support several \nlanguages and if you want to keep your lookups translated into other languages so you can start to use it. And the \nbest way to transport and make such translation is to register one more user with another language and then log in \nat this user, go to lookups and when you will go to corresponding lookup then you will start to edit data. If you edit it \nwith other language, so you will provide translations and this translation will be saved properly into corresponding \ntables. I hope this is interesting enough so if you're interested and really need such translation support, creatio is \nready for this so you will not face any troubles. Okay, so finally we finished playing games with contacts with our \nage.  \n  \n  \nSpeaker 1\n \n Everything should be saved on disk. Of course we will remember now about our visual studio code and git client to \nshare our settings with our imagined team members. Now you see some items created so we can commit \nsomething like contact age view example added. This will be our comment for the commit that we do with these \nrecent changes. Okay, as you can see we did not forget about registering of this lookup as of this object as lookup in \nlookup section and made a data item with the help of data binding tool. Okay, we can submit everything to our local \ngit repository, then pull and push to global git repository. That's how we can share our settings with our other team \nmembers. Okay great.  \n  \n  \nSpeaker 1\n \n What else I wanted to show you before we proceed is example of delivery because it will be important I think that \nyou are interested how we can transport our solution for test and production. You remember version control. \nWorking with git with bunch of files is not so efficient when you want to transport your solution for test and \nproduction. This type of sharing with many files is good for developers and between developer environments in \norder to make delivery to your test and production. You can simply export your package into a file and then I will \nshow you some magic. Now you can see our file was saved here. This one is our file saved seconds ago. And this is \na zip file.  \n  \n  \nSpeaker 1\n \n Inside of it we can find Gz archive and inside of it we can find a single file with metadata saved here and it's not so \nreadable. And this is a transportable format for creation packages. Okay, so this is metadata of your package fully \nincluding all the package items, including all scripts, including processes, whatever we have and even more including \nfile system package contents from the files folder. Let me show you telescope configuration ekg dev classic. We \nhave some file content as a result of our configurations, so such files also will be saved inside of this zip archive. \nThen we can go. Recently I installed one more environment so it will be test environment d two test hello node test \nso we can run this test environment. Currently I am running my second creation environment on the same PC.  \n  \n  \nSpeaker 1\n \n It will take some ram, some cpu. You see my ram consumption is more than 11gb now, so I can start my second \nenvironment. I will use it as a test environment to check how delivery works and to also make sure that I have no any \ntroubles with changes with transition of my settings between environments. Sometimes it happens. Now I started to \nreceive this attempt when I attempt to login. Then it drops me again to the login page and on the second attempt I \nsuccessfully log in. So it happens quite often. But now I don't know how we can fix it. So okay we logged into our test \n\n--- Page 8 ---\n\nenvironment. I can show you how we can load our changes from zip archive file. This is very easy. We go to settings. \nIt doesn't require any special skills. We only have to be administrators.  \n  \n  \nSpeaker 1\n \n So we have to be a member of a sysadmin. Let me show you system users. My supervisor user is a member of \nsystem administrators role. The only condition necessary for us to load packages and here is my application hub on \ntest environment and I can just install the application from file, select file from disk, go to downloads. This is my dev \nclassic package saved several minutes ago. Open it. Normally this loading procedure will finish successfully, but in \nsome cases you may face troubles here. You may face missing data items, you may face foreign key constraints and \nexceptions, some database exceptions. So in some cases you may face errors here. Anyway, you should look at \ninstallation log because it will give you enough technical details about how well our loading was performed. So we \nwill invest several seconds into looking at it.  \n  \n  \nSpeaker 1\n \n Let's see what happened. So 13 seconds we started no visible errors and 31 finished. It looks like maybe 18 seconds \nto install. Very good, very good. Okay, so you see some text, comments and details about installation of the package, \nbut now it's okay. So our package is already loaded. We can find it in configuration section of our test environment. \nBut this package will be not editable. So our package after loading we can find it here. Dev classic as you can see \nthis package is not editable because we loaded it from file. We intend to use it for test or production. So system \ndoes not expect that we will modify it. So when you load package from file it will be read only if you really need to \nmodify it.  \n  \n  \nSpeaker 1\n \n For some reasons you can do this by unlock for hotfix temporary thing that helps you to make temporary make your \npackage temporary editable. If you forget to lock it again, system will do it according to the special timeout which \ncan be found in system settings. Now you can see my package was loaded. You see status, no errors. It means all \nSQL scripts or objects were applied successfully. Now let's go to the lookups section of my test environment. As you \ncan see this lookup section doesn't have any column setup which I prefer to do. Okay, we can go back to list view \nand we can start to adjust it to easily find the corresponding new lookup records. Now you can see my realty types. I \nexpect to see four records here, so they were normally loaded. Everything is okay.  \n  \n  \nSpeaker 1\n \n Contact age in days as you can see according to my current data on test environment is calculated. Great. So it \nlooks like everything I did was normally loaded and we can use this environment for future checks. Now we can \ntemporarily disable it, but then later we will check our new environments. We will check our new application which \nwe plan to do right now. So you see that delivery is very easy. You can just export your solution to the file. If you have \nmany packages, you can export many packages. You can also do some tricks at the database. For example you can \nput several GZ files into one zip file if you want to make it faster to load.  \n  \n  \nSpeaker 1\n \n And today I plan to show you how to make a UI settings how to make new sections not with section wizard because \nit's classic UI, outdated stuff. I will show you how to make new sections, new bake applications made with \nautomations provided by application hub and Freedom UI. So we will focus mainly on Freedom UI. But before doing \nthis I need to explain you what is application hub and how it's intended to be used. So we go to settings, then we go \nto application hub section and open it. Special tab opens for you. And this is a place which is designed to manage \nyour freedom UI customization. And now we need to talk about new functional item of creation that is called \napplication. So I will try to explain you what application is and how you should understand it.  \n   \n\n--- Page 9 ---\n\n Speaker 1\n \n Application appeared not so far ago, maybe just a couple of years, and packages were present for more than ten \nyears. So you see that application is generally relatively new to creation and previously we had only packages. So \napplication is a new logical type of items and usually one application means one or several packages. So application \nis a higher level logical setting and it may include so it must include at least one package. But sometimes it can \ninclude more than one package. As example, customer 360 app includes three packages. Only one of them will be \nlike current default package for saving of customizations. But now let's focus on the idea. So customer statistics is \nan app and it has three packages behind it. Application has its own properties like name, version, default page \ndescription, date of creation and so on.  \n  \n  \nSpeaker 1\n \n Also it has information about its developer. Terrasoft here means that it is a creation company. Terrasoft, as you \nremember from previous sessions is previous name of creature company and creature brand. So application has its \nown properties. Also application has color settings and application has icon. You can find data binding tool, but it's a \nbit artificial. Application just made for compatibility. Previously data binding tool. It was just a package and when we \nloaded it we have this GLB data binding package, we can see its contents and originally data binding tool was not \ndesigned as a freedom UI app. So all customizations we have here are based on classic UI tools. That's why we will \nnot see any pages, any special section data. We have just data items related to different parts of creation \napplication. But it's not actually sections.  \n  \n  \nSpeaker 1\n \n Such items are data items created for some purpose. Data models means objects. Business processes are like \nautomated business procedures implemented as diagrams. So code in creation. They are called business \nprocesses. No integrations and advanced settings show us all packages for this app or filtered by selected package. \nSo application is a higher level setting or entity which includes one or many packages. The reason why creatio \nneeded applications was caused by shift to so called composable apps approach. I will try to explain what it is. So \noriginally we had no any customizations at our studio environment, so it was just constructor only. Then we installed \nseveral apps like customers 360 like data binding. Also we installed maintenance tools and so on. If necessary we \ncan remove some of installed apps.  \n  \n  \nSpeaker 1\n \n The system will revert and go back into its original state which was before installation of such tools. So finally, end \nuser system may include only solutions, only applications that user decides to run. And that's why we can call this \nlogic composable app. It's very close. Composable apps, it's very close how you manage your software at your \nsmartphone. So you have platform, let's say Android or iOS, and then you install necessary apps that you use for \nsome certain purpose. If you don't like some app or if it starts to work, not normally, you can remove it easily. And \npreviously, maybe three or five years ago, it was not so easy to do in creature, because creature had out of the box \nfunctionality which cannot be removed from system. So old Kriacia systems included functionality that could not be \nremoved from it.  \n  \n  \nSpeaker 1\n \n So it was not fully composable approach. And we had just simply hard coded part of the system which also was \ncustomizable, but it was not removable from the system. Now developers decided to make constructor only and \nthen to install everything that you need on top of it. And that's why they needed applications, because sometimes \nfunctionality that you want to add includes more than one package. So developers needed applications because \nsome functions were designed as set of packages, not just one package. So application means set of packages \nwhich includes some certain business functionality. And applications can also be imported or exported. So when \nyou export an application, it physically saves set of packages on disk into one zip archive file. So here is a single zip \nfile. If you look inside, you will see set of packages Gz files.  \n\n--- Page 10 ---\n\n  \n  \nSpeaker 1\n \n And this is pretty standard for creation. So you can use one zip file for many packages inside. It was possible even \nbefore applications appeared. So now developers just improved this idea and made a separate logical level code \napplication. Okay, how safe is creatio? Kind of after you install a package? Like is there a lot of artifacts that are kind \nof left behind or is everything cleaned up except for maybe database entries and stuff like that? You're asking a very \ninteresting question. For example, when you install it and then you decide to remove it, of course we have some \nitems in configuration like SQL scripts, which may do irrevertible change. So some changes in the database can \nhappen that you physically cannot revert.  \n  \n  \nSpeaker 1\n \n So ideally if you develop a very good app and then you remove it, you can take care for full recovery of your database \noriginal structure after your application was removed. And if really needed, you can create SQL scripts which will do \nthis. Recovery and installation type will be uninstall app. So uninstall app installation type is a special scenario when \nthe script will be started only in case when your package is deleted. So this is kind of recovery steps that you plan to \ndo at the database in order to make everything clean as it was before installation of your app. But in real life, not all \ndevelopers do this.  \n  \n  \nSpeaker 1\n \n So in real life when you remove your app, some traces may remain in the database and usually this is not critical for \napplication because logically such columns or some data leftovers will not be available to see easily unless you go \nto the SQL level, unless you start to make some special queries in order to find them. So in general, when you \nremove some app, it will be logically cleared so it will fully disappear from the system. You will not see anything but \nsome tiny minor database leftovers can be found the same as you have a smartphone. When you install some app, \nthen you remove this app, some application log files, some application technical things may still remain in your \nsmartphone. If you go into smartphone file system with the proper tools, you will probably find it.  \n  \n  \nSpeaker 1\n \n So in general, it was designed to make it easy to install some app and to remove some app. And ideally when app \nwas removed, no visible traces should remain. Beddy is it clear? Brilliant. Thanks million. Okay, great. Thank you for \nyour questions and I encourage all of you to ask any questions if something is not clear. So having such a dialogue \nin our sessions is much better than just a lecture. And I think lectures are boring. So speaking is better. Thank you \nfor asking questions. So let's move on. We need to do some practice, so to do some practical steps to understand it \nbetter. Of course our practice will include creating your app. Now I need to tell you about some, let's say business \nvalue.  \n  \n  \nSpeaker 1\n \n Our plan is to automate realty estate agency and we want to keep list of realty records in freedom UI application. We \nwill have a section for such list of realty records and we can use existing platform customization tools to make it as \nfast as possible, to make it quick and easy. So click new application. We have several different templates here. In my \ncase, probably the best option is records and business processes. For very unique scenarios. You can use custom \napp which will create an app and it will be empty. So you will have to create your own section inside. But if you create \nan app based on records and business processes template, it will start to create a section for you. Section is a data \nentity. So a big data entity which you can use inside your system.  \n  \n  \nSpeaker 1\n \n\n--- Page 11 ---\n\n In our examples of sections are accounts or contacts and also we have set of system sections like lookups or users \nor system settings. So section in creature, it's like main big entity which usually has a lot of columns and usually has \nsome subordinate items called details. We will study it, you will see. And also if you're just more risky and you're \ninterested in AI tools, it's possible to make a section with the help of AI. And you need to explain in words what \nsection you plan to create, what colors should be there, what details you expect to see. But personally I do not like \nthis approach because if it makes it incorrectly, then you will spend more time to fix than to create from scratch. So \nthat's why I prefer to create from scratch. Okay, let's create new app.  \n  \n  \nSpeaker 1\n \n Let's change its color to something more like significant. And we can see, oh, we have some new icons here. So I \nplan to create a real tea section. So possibly I could find some icon representing a house or apartment. Okay, let it be \nlike this. So it will be icon for my new section. Name of the application, it's very important will be caption of our \nsection. It will be title of new created object. So it's important whether it be real t and advanced parameters. You can \nsee we can provide some application code. Code is also very important because this code will be used to create a \npackage, to create a main object, to create some corresponding settings related to object like page or list and page \nfor edits. So forum page we call it. And so this code is really important.  \n  \n  \nSpeaker 1\n \n You will not be able to easily change it later. So it's important to provide it correctly from the first time. Also it's \npossible to link so simply to create rhythm UI section based on existing object. But this option is really useful only in \ncase if you already have some created objects in your system. And usually it happens when you already have classic \nUI solution and you want to migrate into freedom UI. In my case I will create everything from scratch. I will not even \nuse my previously created lookup because I planned to use it for Quest SQL. So we have a separate package, \nseparate application and let's create it. Creating will take just several seconds because it will only add some \ntemplate stuff like main entity, page list and that's all. So my app now is called Realty.  \n  \n  \nSpeaker 1\n \n It has its main name, version, default page, some description, date of creation developer. This is a string named \ncustomer. If we change our system setting, named publisher to be possible to change developer of this package and \nthis app. Okay, no changes in app properties. We have pages part, we have list and form page, we have navigation \nand section. So it's registering of a realt section. We have main object realty, we have no business processes, no \nintegration so far and we have structure of our packages. Now I need to explain what is shown here. So our app now \nhas only one package. This package has certain properties and the most important is that this package has a \nalmost black colored folder icon which means this package is editable. Let's compare with other customer 360 now \nyou see gray colored icons.  \n  \n  \nSpeaker 1\n \n It means such packages are read only. If you want to customize something in customer 360 app system will not be \nable to save anything into such read only packages. So this will automatically create new package for you. And \nunfortunately automatically created package will certainly have an ugly name. I will show you this a bit later and I will \nshow you how you can manage efficiently packages for different apps and how you can connect it. In my case I try \nto keep it simple because I understand you are beginners, you want to make it work first and you do not want to go \ninto unnecessary complex things. So now we have one single app, we have one package for it and system helped us \ncreating main object, creating set of client modules representing page settings and some technical things for pages.  \n  \n  \nSpeaker 1\n \n And as you can see it created seven data items representing inserts into some system tables that are necessary to \nmake our application work normally as a section. Let me show you where we can see it. We can also run this app \nbut I prefer to work with main application window and in order to fight with any potential browser cache issues I \n\n--- Page 12 ---\n\nreloaded it. Now we can go to studio and switch to my applications workplace or we can find all apps in all apps. We \nwill see all available sections including our reality section recently created this reality section now has no data. It is \nbased on main entity named realty and we can use edit page to add some data. In this edit page we only have name \ncolumn so no customization so far. Apartment in okay, let it be New Orleans.  \n  \n  \nSpeaker 1\n \n So this is just an example of a reality object that we plan to reality data that we plan to save. Such list and edit page \nwill be used to manually input data, to modify this data and to work with this data. Then of course we need to \ncustomize it to make more columns to make it more useful to work with. But let's make a break and then we will \ncontinue because it looks like I just forgot to have a five minutes break. So let's make a quick refresh and then we \nwill continue with customization of our new section. Now we continue to customize our section. So what we can do \nhere, there are several ways how we can make changes. I will show you which way I prefer the most. So when you go \nto a certain section, for example here is list page.  \n  \n  \nSpeaker 1\n \n Then you open edit page. You can also open edit page by clicking on this action, but it takes two clicks quite hard \nand we can just click on this hyperlink. Okay, now we have a so called form page or edit page. We can do \ncustomizations right from here with a small edit page button. It will open corresponding page editor if you have. So if \nyou already passed our customization course, you already know how to use this page editor. I will only show you \nsome quick settings here. So we will not go and reproduce the same customization course because I need this \nsection only as a on the as a basement for our next programming examples. So customization here and no, code \nsettings are not the top priority for us. We will do it just because we need it for future samples.  \n  \n  \nSpeaker 1\n \n So I will do it quite fast. Please confirm. Do any of you reproduce the same steps just during the session or you just \nwatch and plan to do your own practical steps separately? Watching videos so please type plus in our chat if you \nfollow me just during this section right now and do the same examples at your environment. In this case I will do \nsomething not so fast and please type minus in our chat which will mean for me that you are only watching and I \ncan do it quite quick. So not waiting for your response, some of you responded that you do practicing along with me. \nThank you Monica and Rakhi. But most of you just watch. Okay, I will not go too fast and I will show you and wait for \nyou to do the same.  \n  \n  \nSpeaker 1\n \n So my plan is to extend a bit our settings and make it more useful. When I select any column we can look at its \nproperties settings. We have some kind of object inspector for settings of a certain selected item. In my case here is \ntitle code, data format, some settings and here I would like to make it copyable. For some unknown reasons, \ndevelopers who made a template made name not copyable. But I think it's very good idea to easily create copies of \nexisting records and copy names as well. Okay, we can change any properties here, not so many. Okay, so what else \nour reality will have? Of course it will have price. So we can use number columns. As you can see we have set of \ncolumns from this list. Add new field set so we can add different data columns to our page.  \n  \n  \nSpeaker 1\n \n Simply drag and drop. You see several potential places to land our page. Our column I prefer to put it here nearby \nname. I can name it price. I can also specify the amount so maybe the currency of our price to make it more clear. \nSo let it be price USD if you want to translate it into other languages, you can also put translations here. Code is very \nimportant property and I also need to warn you, a lot of beginners have mistakes at their pages just because of \nmessing with codes. So please take it seriously. I recommend you to set up codes initially just when you design your \ncolumns and do not change it later. So let's set it responsibly. And as you can see, code is one of not so many \ncolumns where we have to confirm our change or reject the change.  \n\n--- Page 13 ---\n\n  \n  \nSpeaker 1\n \n In our case, code will be something like USR because we need prefix for our new columns and technical things, so it \nrequires prefix. USR price USD will be our code and we confirm. Save this change. Okay, the data format will be \ndecimal, two digits, no description, maybe not required and okay, if you want you can make it required. So system \nwill not allow you to save zeros here. No need to make it read only, no need to hide, no need to make custom \nsettings for titles. But what we need here is element code. This is also technical part, but element code may be \nimportant if you plan to search for this column in its settings, like in technical parts in JavaScript and client module. \nSo if you plan to do any kind of programming, then having a good looking friendly code is important.  \n  \n  \nSpeaker 1\n \n It should be unique so we can name it the same as our own USR price USD and confirm. As you can see, \nconfirmation is provided for the most important properties and columns of our items. So element code seems to be \nimportant because we have this confirmation stuff. Okay, did it. So this is how we can make one more column. \nQuick, let's say another one. Any reality has area. I will do it a bit faster now. I think you already got main idea how to \ndo this. Decimal 200 and also at the end element code will be USR area and confirm. When we click save, our \nchanges will be applied to the object, to the page settings. So we will have our settings saved in our system. Let's do \na bit more drop down type. We need a lookup.  \n  \n  \nSpeaker 1\n \n We need type what is real t and I will use it based on drop down or lookup. Column drop down and lookup are very \nclose synonyms so it's almost the same. The title for our new lookup column will be type. Inner code will be USR, \ntype and confirm. But lookup is not present here. We do not want to use similar lookup reality type made for query \nCQI purpose. So I plan to make a fully separate solution and that's why we can make new lookup from scratch as \nyou can see system helps us with automation. We can create. We can ask system to create new lookup. It will be \nrealty type and code will be USR reality type.  \n  \n  \nSpeaker 1\n \n No classic UI words here so it will be our freedom usage reality type, title and code are necessary because system \nwill use it to create new lookup object inherited from base lookup. It will also register it as lookup in lookups section. \nIt will provide data items for this registering and the only missing part will be lookup contents. We will do it later. \nOkay, type is clear. One more thing that we will need in our section is offer type because some reality objects will be \noffered as for sale, others for rental. So we will have an offer type lookup to specify exact offer type. Is it sale or \nrental? I will call it offer type. This is a title code will be something like USR offer type and we confirm it.  \n  \n  \nSpeaker 1\n \n No lookup for this so we can create one from scratch realty offer type I will do some poses for some of you like \nMonica or macho or rakhi who confirmed that you do it just along with me. Okay, save it. And I also just was quite \nquick. Normally by default lookups will be shown as simple drop down list. But in case if you select something \ncomplex like big entity like contacts or accounts, it may be useful to use full scale selection window for the offer \ntype. We will have only two possible values like rental or sale. So that's why drop down will be perfect. We need to \nscroll down and set up element code here. Maybe we will not use USR. So you can just use any unique string here. \nSo offer type will be also quite unique.  \n  \n  \nSpeaker 1\n \n This is just to make it more, let's say friendly when we will work with code part. Okay, so what else? Maybe we can \n\n--- Page 14 ---\n\njust practice with a single text column and it will be just a comment 250. Maybe it's enough for us. Okay, checked \neverything. Comment. Okay. And maybe one more example of a more complicated lookup with the selection from \nbig object. So let me show you one more drop down column. I will name this column manager. So it will be some \nmanager person who is responsible for managing data of this realty. Usrmanager will be our code lookup will be \nselecting from contact. And as a contact is a big entity, we may need some additional columns to be displayed, \nsome filters, sort order and so on. So big scale selection window will be good enough for this.  \n  \n  \nSpeaker 1\n \n Good, good option for this type of selection. And I can also make unique name here manager as a code. Okay, so I \nonly usually set four parameters, title code, we specify lookup and element code. Okay, for the very beginning this is \nenough. We have some required columns, some not required columns. Unfortunately we cannot use default value \nsetting here. So if you want to extend and make your solution more, let's say well customized, you will need to go to \nobjects anyway. So let's save our changes. Now. You will see what has been changed here. We can track what is \nhappening at application hub part, or we can go to our configuration section, reward it. Maybe we already see here. \nOkay, let's still reward. So you will see your changes in configuration section. Now this page editor will finish its work \nsoon.  \n  \n  \nSpeaker 1\n \n It takes time because system saves client module. It saves changes to object, it publishes objects, so it takes some \nsignificant time and that's why it takes a while. Okay, everything was saved. We can close this editor. You can check \nwhat's happening with our new package. You can see it here, or if you prefer to manage from application hub you \ncan find your reality application. You can see two pages here and you can see one object. So main object realty offer \ntype and type are created as a supporting lookup. Objects and advanced settings will show us all packages. Here we \nhave only one package and usually I prefer to look at it sorting by descending order of date of modification because \nusually you need to look at the most recent changes first.  \n  \n  \nSpeaker 1\n \n So you see that just from 20 minutes of our work we have a lot of items already created and including main entity, \nincluding some objects that are used for lookups. You can also check if you go to lookups section, you will see \nrecently registered lookups automatically. So system also made this registering as data items. So it's quite smart. \nAnd when you create lookups with the help of page editor, it will automatically create object for you. It will \nautomatically register this object as lookup and create corresponding data item. The only missing thing is contents \nfor this object. Any questions please? You're welcome. If you so if you have any questions, any notes, I'll be happy to \nhear. Now it's time for us to think about some lookups. Okay, offer type probably is not so difficult. We have only two \npotential offer types.  \n  \n  \nSpeaker 1\n \n The most commonly will be using sale offer type and another one will be rental. So we have only two offer types in \nour system and when we have data binding tool it will be extremely easy for us to save all data into our target \npackage. And that's IT system creates thanks to data binding tool it creates corresponding data item automatically, \nhelping us to save our time and do not perform some boring work. So here you can see all the records of our lookup \nwere saved as data item. This is very efficient. One more thing which I wanted to show you is how you can use some \ntools like export and import. Here you can see a lookup made for classic UI. I want to steal its data. Moreover I will \nsteal their ids. Let me show you what I'm planning to do.  \n  \n  \nSpeaker 1\n \n So let's do one more column display id. Column. I want to display it. I don't need description at all. Okay, save such \ncolumn settings. So we have four records here for our classic UI, just for the demo purpose. So you should not do \nthis constantly. But. Oh Andrea, no problem. You told me you had some issues with this performance. So if your \n\n--- Page 15 ---\n\ncolleague is still here, we can try to find out the reason why it is slow. Thank you. Thank you Andrea. Ok, so I want to \nshow you a simple quick example how we can use standard tools for export and import of data. Export is very easy. \nWe can do export to excel, any creature list. It will create a file as xls six format and save it to your disk. Great.  \n  \n  \nSpeaker 1\n \n Then we go to another lookup realty tape for Freedom UI section. And just for demo purpose I will show you how we \ncan import this data from file. Data import target object is already selected. We need to select file for our import. We \nneed to match columns and provide such column settings. As you can see, we have very similar columns names in \nfile and in our creature data model. That's why it was already automatically matched. Now I need to look. I need to \nshow you what this file looks like. And here you can see this Excel file. So it has first row with column titles. All other \nrows are representing some data. Such files can be easily loaded into creature matching first column titles with \ncreation columns of objects and it will be one to one import.  \n  \n  \nSpeaker 1\n \n And if we import, we have to specify duplicate search rule. So what column will be used to check presence of data. \nOkay, we can do it very technical way and check by id. In real life, when you import data from excel, you may not have \nthis id. You will need to select some, let's say reliable enough columns which should be quite unique. In my case, id \nwill be the best option for making such checks. And now you can see import was fully done. We can reload this data. \nSo we imported four data rows from file into our rhythm Ui reality type object. We can also use data item data \nbinding, automatic creating of it and data was added successfully. Now you see bound data. All four records were \ncreated correctly and saved it to our target package. Great.  \n  \n  \nSpeaker 1\n \n Now we can do more steps with main object setting because I want to use some additional features available at \nobject model. Let's go to objects and I want to show you default values for our section. Unfortunately we cannot set \nit from page editor, so we can go to object editor. For example, for the manager we can set default value as a special \nsystem variable, current user contact. So if a person creates some reality record, it will be considered, this person \nwill be considered as the manager. Current user contact. Okay then by default. Oh no, it's okay. Everything is okay. \nNo errors. I just thought I have a mistake here. Okay, when we create new record, for example, we think that the most \ncommon, the most frequent scenario will be working with houses.  \n  \n  \nSpeaker 1\n \n So we can make default value for created reality records as a constant. And we can take constant from lookup to be \nhouse. So this will be our house. And when we create new record, this default setting will be done. If we had some \nnumbering we can also use auto number feature, but for reality I just did not use it so far. Offer type we can also set \nas constant. And let's imagine that the most frequent scenario will be sale. So houses for sale is our primary \nbusiness. That's why when we create new record we will have such default settings. And when we finished we can \nclick publish which will make save and publish. Now you may ask me why we do so many of customizations here. \nWe need it for our future examples. And now it's over.  \n  \n  \nSpeaker 1\n \n So we made our section and we can check how it works. Going to our realty section or going to my applications \nrealty and opening its page, you see previous data. We have some price for department, some area, maybe it's in \nsquare feet. So that's why we have such data. It will be an apartment for sale and some default contact. Okay, so \nwhat happens when we create new record new, you see, default value is set for type for offer, type for manager, \nsome settings, test, comment and we can save it. So having default values really helps us to work with it. Oh, takes \ntime. Probably something happened. Let's check. As you can see, browser console is full of some debug messages. \nBut I think in our case it's not so very critical. So let's try to reload data and check. Yeah, it was saved normally.  \n \n\n--- Page 16 ---\n\n \n  \nSpeaker 1\n \n House in Seattle was saved normally. Okay, we have some kind of basement for our future study. And now I need to \ntell you something that you will consider as boring. So we need to go deeper. Okay, a couple of words for list part \nbefore we go deeper. List pages also can be customized so we can go to edit it. I just found this edit page button \nand list page also can be customized. We can hide unnecessary columns, we can display columns that we need. For \nexample, we need, okay, we already have name, we need price, type, offer type, maybe date of creation here and area \nin the same order such columns will be displayed. And that's it. If necessary, can also use some coloring stuff. You \ncan try to make some customization with setup, lining colors, spacing and so on.  \n  \n  \nSpeaker 1\n \n But now I try to keep it simple, everything as is by default. So I only have some set of columns set by default. Reload \nthis page so you will see default column settings for me. Okay, great. Looks very good. If we copy some data, you \nwill see that almost all columns are copied and that's it. So we can easily manage this. So what we have to do now, \nthis is customization level, doesn't require any programming. And of course you probably would like to make much \nmore significant and more, let's say technical things on this client side and the page level. I plan to explain how \ncreation made this user interface and how we can make changes in it using programming. And first of all I need to \nexplain you how client modules are designed and in order to check it out.  \n  \n  \nSpeaker 1\n \n So let's select our package, select only client modules and for example, let's try to open form page. If you click on the \nform page directly on its title, you will see page editor, not a program code. You can find program code part of it. If \nyou click on this source code, don't save source code will be opened. Then we have to close form page because \nhaving separate editors for the same item opened simultaneously, it's not a good idea. You can accidentally save in \none of the editors and you will lose changes made in another. So it's better to keep only one part at a time, only page \neditor part or on the code part. Now you see quite strange JavaScript code which is really hard to understand what it \nis. And also I can show you how you can open the same code quickly.  \n  \n  \nSpeaker 1\n \n You can go to write part. This is three dots button called actions. And then you can open source code directly \nwithout opening page editor. So this is some kind of code. And now I need to explain you what we are looking at and \nto explain you some concepts used at creature platform. So the language for this code is JavaScript. But as you may \nguess, this code represents more like settings than executable stuff necessary to build this page. And before we go \nin deeper, I need to explain that creation client side is fully dynamic and generated in runtime. So if you will inspect \nany part of the client side page, it will show you some pieces of HTML.  \n  \n  \nSpeaker 1\n \n You see a lot of divs, a lot of some layout settings, a lot of classes, and also you will see plenty of Ng names here \nstanding for angular. So in Freedom UI, its undercover framework which helps us to build and display components is \nangular. So if you have some angular knowledge and experience, you will find it easy to make your own new \ncomponents if you need it for your solution. I prefer to use as much as possible for base product standard \ncomponents because creating new components usually take significantly longer without clear, let's say profitability \nfor end customer. So now you see big complex structure of HTML. It's really hard to make it from scratch and luckily \ncreation is capable to build such pages itself using some settings about how page should be built.  \n  \n  \nSpeaker 1\n \n So this is result of work of big number of JavaScript files and such. JavaScript files consume information about \n\n--- Page 17 ---\n\ncontrols, about settings, about what they have to build. And thanks to base product architects, we do not need to \ntype or develop such code ourselves. So creature pages are made dynamically, in this case with the help of angular \nframework and using some page settings. Okay then I need to explain you one more thing about structures and \nabout JavaScript code inside of creation. So as you can see, creatio user site user pages client module client part is \nbuilt by big number of JavaScript files, so we can try to find how many files are used there. So opening any page, go \nto sources, start to investigate structure of sources.  \n  \n  \nSpeaker 1\n \n Here you will see plenty of files and what is really frightening, then you will see a lot of configuration items here. So \nprobably several hundreds, maybe up to 1000. And it's important for you to understand that client side of creature \nconsists of big number of relatively small pieces of code. So quite big number of JavaScript sources. And if anyone \nfrom you has any experience with JavaScript sources and JavaScript apps, of course obviously you understand how \ncomplex to keep this structure to manage it. And of course developers of creation also felt this difficulty and they \ndecided to use some world class standards to manage JavaScript application. In order to make it efficient, \ndevelopers decided to use special concept AMD concept let me try to find you some articles at academy for this. \nLet's search for AMD.  \n  \n  \nSpeaker 1\n \n We'll find some articles Academy AMD modules module overview yes probably this one is good article explaining \nthis, but also this concept can be found at some common sources like Wikipedia. So AMD stands for asynchronous \nmodule definition. So this is an idea of splitting of all your JavaScript application into parts code modules and make \nsuch modules capable to be loaded separately from other modules and asynchronously. And let's that's how we can \nuse modern browsers, multitasking tools and finally a synchronous load of modules will give you much better \nreceived performance of your JavaScript app. So main ideas of AMD is split of your JavaScript app into parts. Such \nparts are called modules and organize asynchronous load of such modules only when they are necessary. We have \nspecial framework which keeps an eye on this and this framework is require G's.  \n  \n  \nSpeaker 1\n \n Quite simple and very old framework require G's. You can read more about require G's, probably you can find it, \nrequiregs.org probably can find its original page, explain explanations and so on. And this is quite old framework still \nworking and its main task is to keep in memory such modules, organize loading of modules, organize module \ndependencies and creature users require G's so we can try to find it like this require G's version. Now you can see \nversion 235. So required G's is used in creature and its main purpose is to keep and handle all such client side \nmodule structure in browser memory, providing possibility to load only necessary modules when they are requested \nfor certain page and which makes quite good performance because in total our client side now has probably 1000 of \nmodules, 1000 of small JavaScript files.  \n  \n  \nSpeaker 1\n \n But when you open any page, system needs only some part from it. For example, it needs only 100 or maybe 200 \nmodules. Required G's helps to load only necessary modules by the help of by the analyzing of definitions of such \nmodules and so generally required J's is main under cover framework for organizing of executable JavaScript code \nin creation client side and required J's has its own requirements for how such JavaScript code should look like and \nthat's why we are coming to answer of why our client module code looks like this. This is a result of use of required \nG's framework and the first command that you see here, it's a function define. This function is calling required \ngsmethod and it transfers some arguments. First argument is very important. This is unique module name \nrepresented just as string by the way.  \n  \n  \nSpeaker 1\n \n Also client module has its own schema properties, so properties of changeable item saved in creation configuration. \n\n--- Page 18 ---\n\nIt has its own code localizable title information about parent client module so it could be used for inheritance and \npackage where this client module is saved. So code of your client module must be matched with the name of the \nclient module in your code. If name will be not the same as code, this will not work. So first argument here is our \nmodule name. This is just a text. Second argument is optional and usually it's empty. But this is an array of other \nmodule names that are necessary to load before starting our module. So that's how we can set up that for this \nmodule we need some else and system will load them 1st 3rd argument here is the most important. This is so called \nfactory function.  \n  \n  \nSpeaker 1\n \n This function has a main purpose to return you some data object. As you can see it returns JavaScript object, \nincluding in our case six properties. This JavaScript object represents necessary information which system needs to \nknow about how to build our page. And this information in general was created with the help of automation tools of \npage editor and that's why we did not program this code ourselves. So most of this was done by page editor. But you \nstill need to know and let's say navigate here properly. I will quickly explain what are these properties? And now you \nprobably will not remember this, but it's just for you to like for your reference. So this JavaScript object in general \nrepresents information about page view.  \n  \n  \nSpeaker 1\n \n Config diff represents visual part of the page and physically this is an array in JavaScript and this array includes set \nof items. In each item represents one control on the page. Let me show you a simple example. This is control for \nname column. So here when we look at this name we have some title and we have input field. So in total it's called \ncontrol. So some tool on the page which we can use for data input and output. And this control has its own settings \nwhich we can provide inside of view config diff array. So this item represents name column. You can see values, \nsettings, some different properties and layout. Config represents position and size, type represents the way the type \nof the component used for input and output.  \n  \n  \nSpeaker 1\n \n We have a label, we have some other properties, parent container, name and that's all. It's interesting to mention that \nhere we have some settings which represent connection between our control and physical data field connected and \nsaved in memory. I will explain this a bit later. Now you should remember that view config represents set of \ninformation set. So it's just array of JavaScript objects. And each JavaScript object represents information about \ncontrol that you want to see on the page. So for price, for name we have one control, for price, another control and \nso on. You can edit it if you want, but you should be very careful keeping syntax, keeping breakage, keeping \neverything correct and if you do something incorrectly it will not work and we have no any intellisense or \nautocomplete tools which will clearly show you where you did some wrong settings.  \n  \n  \nSpeaker 1\n \n For example, if I accidentally do something like this, system will notice it and it will not show me where I have a \nmistake. So you should be very careful working with this part and 100% of such settings are now performed with the \npage editor so it's not so hard. Not so difficult to do this customization with page editor and then looking at this \ncode. Okay, in general, view config diff represents UI structure set of user interface items that you plan to see. Okay \ngreat. Let's move on to other items. After view config we have view model configuration. This is a bit more difficult to \nunderstand because viewmodel config is information about so called attributes. Attributes are variables at the page \nlevel. So like storage items, like memory cells.  \n  \n  \nSpeaker 1\n \n For page level they have special names generated by application automatically and once I tried to change them, it \nturned out to be hard coded each time you create them. So it's not a good idea to make them better. If it looks a bit \nugly like this, you should not try to change it because it looks like page has also some metadata saved separately \n\n--- Page 19 ---\n\nwhich has corresponding names inside of it. And if you start to beautify with no any part. So if you start to edit your \nattributes, probably your page will not work anymore. So I recommend you not to remain attributes. Each attribute \nrepresents some variable on the page and usually attributes are connected with corresponding data columns. Data \ncolumns are parts of our object and object has its own invisible client side representation in memory.  \n  \n  \nSpeaker 1\n \n So attributes are used to keep some data and connect with controls. Then finally we have model config which \nrepresents set of data objects used with our page. In our case, only one data object is used. Reality reality entity is \nused to work with our page. But why we have so complex settings here is that freedom UI pages can operate with \nmany data objects and many data lists at the same page. Unlikely to classic UI freedom UI page can be quite more \ncomplicated and may include many data objects at it. That's why this model config will be a bit more complex than \nyou expect. Handlers, converters and validators areas where we can do some programming. We can handle some \nexisting events, so we can make own custom handlers for some certain events and make some additional work for \nit.  \n  \n  \nSpeaker 1\n \n We can do conversion between columns like recalculations, but personally I prefer to do it inside of handlers and \nvalidators are used to perform some checks at client side to ensure that values provided in the columns are correct \nand in case if they are not correct, it's possible to display error messages and prohibit saving of data. We will also do \nsuch examples later. So if you ask me about where we will program here, the most common answer will be we do \nour own handlers. But also please note, you probably noticed special text comments here in this code before and \nafter different settings here and even here. So you can see that we have some special comments. Such comments \nare very important.  \n  \n  \nSpeaker 1\n \n Please do not modify do not remove them because they are necessary for page editor it's unusual, but page editor \ndoesn't search for the name of the object here or name of the array. Page editor searches for such system \ncomments and then takes code between and analyzes it and representing page design for you. When finished and \ndata changes are saved, page editor creates new set of items like Div array for example and saves it into this code. \nSo such text comments are used as text markers. They are necessary and they are vital for page editors. So please \ndo not corrupt them, do not change, do not remove. They should be as is okay and possibly you have some \nquestions about strange names view model and model.  \n  \n  \nSpeaker 1\n \n Some of you who studied somewhere at university or who studied yourself with the way how UI can be programmed \nprobably know about architectural patterns and maybe you know a pattern named MVC and here we have a pattern \nnamed Mvvm. Let me explain what it is we can study and we can find some simple articles at Wikipedia about it. So \nMvvm this is an architectural pattern. So like some standard way of implementing things in programming which \nhelps us to make and to solve some typical tasks with the typical way. So we have typical solution for this. We have \na task to manage our client side application in our browser and mainly programmed in JavaScript. And there is a \ngood practice to separate visual part from logical part and from data storage part.  \n  \n  \nSpeaker 1\n \n And in MVVM pattern it's recommended to separate visual part and code view separately, store data values and call \nit model and also make a separate controller unit which is called view model. And Viewmodel has a lot of \ninformation about view. Viewmodel knows view structure and Viewmodel manages our view. It manages controls \nand also Viewmodel is responsible for handling events that happens with view controls. For example, user clicks on \na button or user inputs some data. The reason why developers used this architectural pattern is to make application \nmore manageable, to make it easy to develop or replace view, to make it easy to extend our model and to make more \n\n--- Page 20 ---\n\nor less structural way to handle all events and make business logic inside of viewmodel some traces of it can be \nfound in this text.  \n  \n  \nSpeaker 1\n \n View config diff represents view structure and that's why it's called view config diff, not just diff. By the way, the word \ndiff here is probably shortage from a difference and means that it's information about only some changes. And it \nmakes sense because our module is not made from scratch. Our module was made as inherited item from some \ntabbed pages left area base platform client module. So client modules as objects, they also can be inherited from \neach other. And diff array represents changes in comparison to previous parent item. That's why possibly such items \ncalled diffusion and not just kind of list which represents full set of items. This diff includes only changes and some \nbase template items like buttons, menu items and so on will be not listed here because they are supposed to be \nused by the inheritance.  \n  \n  \nSpeaker 1\n \n So when client side modules will finally form final page structure, they will take base parent one, they will apply child \nitem like this setting, and finally they will analyze base diff child diff and they will make all of the components \naccording to parent and child items. Okay, so view config div represents visual part represents view in mvvm pattern \nmodel, config represents information about data entities used for our page and also view model config. I think partly \nalso works about the same because this is registering of available variables that we can use on the page and \nimplementation of handlers. Implementation of events can be done inside of handlers and also is already performed \nin parent modules. In parent template pages like tab, the page with left area and such pages can be nested. It means \ninheritance can be done many times.  \n  \n  \nSpeaker 1\n \n It looks like quite boring thing. So let's do some practical step for today and I will show you very simple hello world \ncomplexity level example. So let's do some simple example. But first as we want to make a button, it's better to start \nmaking button with the help of editor. So let me show you how we can make a button to show something simple but \nworking and programmed and go to settings. Edit page edit page I can add a button to my page, scroll down here, \nyou can see a list of existing columns, we can add new columns and we have a lot of components. Button probably \nwas the first component supported in Freedom UI page. So we can put our button somewhere here, change its size, \nchange its color or maybe this.  \n  \n  \nSpeaker 1\n \n You can make some kind of funny caption like push me and if you want you can translate this title into other \nsupported languages and by default, as you can see we have a lot of supported actions like open records, like saved \ndata, close page run business process and so on. Once I started to count I found 24 supported actions here. So I will \njust randomly select some action and then I will replace it with something else. By the way, what's happening here? \nMy title looks a bit strange. Okay, I want to use icon. Something is wrong with my title here. No, it's okay. Okay, some \nbug period. Okay, push me and let's select some icon that will represent this idea. Okay, would it be like this?  \n  \n  \nSpeaker 1\n \n So we have more than 60 supported icons here and okay, so and I also set some dummy action. I plan to change it \nlater. I don't have any support. Net menu. No any special conditions. We will study it later. Element code okay, let's \ncall it push me button. Okay that's all. We can save it now. After doing this we can go to the code in order to find our \nbutton. Let's go to the code source code, then we find our button. Let's call search for push me and we'll do control f \noh you see new editor search function here. It was different in previous versions. Okay, would it be like this? Thanks \nto our element code we can easily find push me button by code and this diffuser array item for view config \nrepresents button settings.  \n \n\n--- Page 21 ---\n\n \n  \nSpeaker 1\n \n We have caption, we have type and also we have clicked setting. Let's remember line number 52 and this is setting \nfor some tenders tender which is already programmed somewhere in parent templates, parent components and \nsystem knows how to implement this. Now we can go to handlers part and make our own handler. I already have \nsome example because making it from scratch is a bit difficult. So I will show you examples for freedom Ui button \nand this is example of a button. I will share it with you in our zoom and also I will put it into my handlers collection \nmanually. So what I do is providing setting here in my handlers collection handlers array. Technically this is an array.  \n  \n  \nSpeaker 1\n \n By the way, it looks like this editor was seriously changed because previously we had some unnecessary warnings \nrelated to new JavaScript comments and features and now it looks like in this editor there are significant \nimprovements related to the way how code is managed. So thanks developers. Version 813 now had a new type of \neditor here. Okay, this is my handler physically is also JavaScript object with three. Now we have two properties \nrequest and handler. Property. Request property represents the name of my handler so it's kind of identifier which I \ncan use to assign inside of view config items. So it's kind of inner technical name of my procedure and handler itself \nis asynchronous function which can do something useful. For example, we can do console output here we can use \nembedded classic UI front end core JavaScript framework made by creation called Terrasoft.  \n  \n  \nSpeaker 1\n \n So when you see Terasoft here, you should understand this is a JavaScript core framework, quite old but still \nsupported. You can use true information from it to show some pop up messages. And also I plan to show you how \nyou can manage data, read data and write data. We have a special procedure to get attribute values. Now let's \ncollapse view model con collapse diff part. We already remember line number 52, so let's look at view model \nconfiguration. We have set of attributes and for the price we have this name of the attribute. So copy it, go here and \npaste it. That's how we can correctly get price value inside of our JavaScript code. We can do console output to \ndisplay this price, and we can also work with this price and show how we can set value into it.  \n  \n  \nSpeaker 1\n \n Request dollar context attribute name equals and then we will just take 20% of this price and save it again. We have \nto normally analyze our code inside of a synchronous function, allowing other potential handlers to be started. So \nthis is also very typical end of handler code. In your case, you will have to change this line to find corresponding \nprice attribute and also to do it with setting value. So this example will show us message in the console, it will show \nus pop up message, it will take price value and show proof of it in the console. Then it will take some part of it and \nset to the price column again. And that's all we can save this code. Please note, saving is important from this \nmoment. It's better to close this page and then we go to check how it works.  \n  \n  \nSpeaker 1\n \n In most of cases probably it makes sense to reward the page, but in most of cases browser cache doesn't really \nprevent us from working, so it will probably work normally even without revolting the page. So open it again. Now we \nsee our button enable browser developer console f twelve or control shift I. There are plenty of warnings, as you can \nsee here, they are minor warnings, and it's because freedom UI page is not ideal now, so system probably will be \nfixed later. Now it's not a serious issue, so let's try to click on the button, nothing happens or I just do something \nincorrectly. Oh yeah, it was my mistake, sure, because this is my handler, but my button by number 53 still performs \nprevious action for it. Here is push me button. Here is clicked setting. So I just forgot to set it properly.  \n   \nSpeaker 1\n\n--- Page 22 ---\n\n  \n Okay, here in my button I have clicked property and I have to specify my own custom handler name here. That was \nmy mistake, I just missed it. So I have to save and fix and save it. I will also call copy this piece for you. You config \nprobably I should not copy big part of it, so I only should do something like this. So you will focus only on the most \nimportant thing. Okay? And we can close open probably now it will work. Yes. You see, I did not reload the page, but \nit works well. So buttonworks shows us pop up message, takes original price, takes 20% of it and saves as new price \nhere. And we have no error messages, no errors in network tab, no errors at the console. So everything looks very \nvery good, smooth and no mistakes. Let's check again.  \n  \n  \nSpeaker 1\n \n Sorry for safe I should use push me this one. Yes, you can see now price changed. We have all the proofs here and \nno errors. So it looks like everything works according to the plan. This is example of hello world application. So we \ncan do some own programming inside of creature client side page. And of course later we will do a bit more useful, \nmore meaningful steps. But now this is an example of how you can do your own code, how you can do some display, \nhow you can access data from your page, do something and how you can save data. Please note that access data is \nused with await operator because some code behind this method. It looks like this is something like a method. And \nfinally it runs some asynchronous functions behind it and we need to use a weight operator here.  \n  \n  \nSpeaker 1\n \n If you do not use await, you will have a bit different structure at the end and you will still have to dig into object that \nyou will get from it. So recommended option is like this, await request, doer context and then your attribute name. \nOkay, that's all for today. We sat a bit longer than usual so our session is over. Tomorrow we will do more \nprogramming examples, you will see more useful things with recalculation, with validation, and you will see how \nmore different settings you can program on the page level. Thank you very much for your time and documentation \nabout the frameworks of client side. Yes Adrian, I can show you where you can find this documentation in creature \nacademy guides for developers. You can find front end development in classic UI and then you will see G's classes \nreference.  \n  \n  \nSpeaker 1\n \n This is exactly this API for this telescope framework. So you can use some search here for example, we used the \nmethod to show information. So method show information. We can search here, show information and you can see \nexamples of it, you can see source and you can see all the arguments. Show information and probably it's not the \nbest example, but. So finally you can try to get some use of it and you can see some help, stuff that can let you \nunderstand how it works. So Adrian, thank you for your question. And also I heard some more questions, Carlos. Yes, \nyes, about performance. Sorry, no, please, please ask questions, please.  \n  \n \n  \nSpeaker 2\n \n Maybe it's about my problem of performance of the application in my laptop.  \n  \n  \nSpeaker 1\n \n Oh, yes, we can do this. Would you like to record this part also as part of our training or you prefer to keep it more \npersonal and private so we can start recording if you want.  \n   \nSpeaker 2\n\n--- Page 23 ---\n\n \n  \n You can. I have no problem to me, no problem.  \n  \n  \nSpeaker 1\n \n Okay, so I will stop sharing. Our main part of the session is over. Thanks all for your attention. Today we will have \nsome small session, Carlos, to detect potential performance issue problems on their environments. So thanks all for \ntoday's session. I will stop sharing. Recording is still on. So Carlos, please. You're welcome. Show me please your \nenvironment. I will try to help if you have a full zoom client better because you can manage your screen.  \n  \n \n  \nSpeaker 2\n \n I share my screen with you?  \n  \n  \nSpeaker 1\n \n Yes, yes, please. Thanks all of you, thanks for all information and your questions. Yes, please show me your screen, \nplease.  \n  \n \n  \nSpeaker 2\n \n Yeah, sorry, I have two.  \n  \n  \nSpeaker 1\n \n You can show only one, but I. Okay, green share screen button.  \n  \n \n  \nSpeaker 2\n \n If I have two screens, so I disconnect one.  \n  \n  \nSpeaker 1\n \n Yes, please select one. Okay, I can see a screen. Thank you. Nice. So please show me how your creature works and \nmaybe you can agree for request of remote control, so I can manage your screen more efficiently. So yes, you are \nusing the latest version? Yes, yes. We can start to investigate it with the help. By the way, what type of browser you \nare using? It's chrome.  \n   \nSpeaker 2\n\n--- Page 24 ---\n\n \n  \n Yes, it's chrome. Yes.  \n  \n  \nSpeaker 1\n \n Okay, you try to run it once again.  \n  \n \n  \nSpeaker 2\n \n Yes, I restart in many occasions and don't work. Good. So let me show you a little problem. For example, I go in \nadvanced settings, okay. And I create a business process, for example. And that is all. That's it.  \n  \n  \nSpeaker 1\n \n Okay, so are you using Windows Pro or Windows home?  \n  \n \n  \nSpeaker 2\n \n I have windows.  \n  \n  \nSpeaker 1\n \n You can find system information?  \n  \n \n  \nSpeaker 2\n \n Yes, Windows homes.  \n  \n  \nSpeaker 1\n \n You will have significant issues. Let me show you how you can fix this. But it will be not full fix, it will be just a \nworkaround which is not fully. Okay, let me show you. So in case, if you work on home, you should close your main \nshell page and sometimes you will need to now you will see, sometimes you need to even close the configuration \npage, but now it looks like you can work with it. So sorry.  \n  \n  \nSpeaker 2\n \n\n--- Page 25 ---\n\n \n I can see how you do that. You can repeat that, please just close.  \n  \n  \nSpeaker 1\n \n Other pages, that's the solution. So when you go to configuration section, you should close other main page. \nCreation will work normally. So it cannot work normally on home actually, because we still will face some problems. \nEven if you work with single page, but with for example setting business rules, you will face trouble. So I recommend \nyou to upgrade to Windows Pro. But once you work with Windows home, now I can show you what you can do. You \nshould close all other tabs of creation. In this case, your single tab will work normally. As you can see, you can do \nsomething. You can provide some settings like this, like USR my process, then you can save it. So this will work and \nit works more or less good.  \n  \n  \nSpeaker 1\n \n But when you need to go back to your main configuration section, you will have to use tabs and you will have to \nclose other tabs. This is not comfortable. Okay, I understand this saving will work for you. This works, but not so \nfast. And as far as I know, the problem is number of available websockets. Okay. Yes. In Windows home, I think all of \nissues you have are caused by Windows home. And as you can see, saving is performed. But okay, let's wait till \nsuccessful operation. Also some memory. So we need to look at your memory availability. Could you please click on \nthe performance tab second one after we have processes. Second one is performance. So you have 16gb of ram \nand SSD. So your PC is very good. Your PC is fast, but Windows is not good.  \n  \n  \nSpeaker 1\n \n So I recommend you to upgrade your windows to pro. In this case it will be. In this case it will better.  \n  \n \n  \nSpeaker 2\n \n Andrea is my colleague, he takes the code the course too. So he asked me, okay, so I save, socially save, I cancel \nand I.  \n  \n  \nSpeaker 1\n \n You can, you can just open another tab with your, you can recover previous page. Yes. Now you can see your process \nis saved and you can export, you can do everything.  \n  \n \n  \nSpeaker 2\n \n So it's work. Oh, it is so simple. Yeah.  \n  \n  \nSpeaker 1\n \n Yes. And it's. Unfortunately this is caused by limited number of Websocket connections allowed for IIs web server \nrunning in Windows home. So Windows Home is like very mini, little limited version of windows and it's not designed \n\n--- Page 26 ---\n\nto be used for serious development. So you probably should think of upgrading it to Windows Pro.  \n  \n \n  \nSpeaker 2\n \n Okay, thank you. Thank you very much, Dmitry.  \n  \n  \nSpeaker 1\n \n Thank you Karim.  \n  \n \n  \nSpeaker 2\n \n You saved me. My boss is over me all day and it's difficult forwarding to the course. Thank you very much.  \n  \n  \nSpeaker 1\n \n No problem. Thank you, thank you.  \n  \n \n  \nSpeaker 2\n \n See you tomorrow.  \n  \n  \nSpeaker 1\n \n Yes, so our session is over. If any other questions? Hi, Vikrat Alpha is sorry. Hi Dmitry. Yes please. Yes, the compiler \nis successful, but give me a message, can I share that with you? Okay, I will stop sharing, so please Basil, start \nsharing. You see. Yes, it's a warning message. This warning message does not prevent you from next steps. So \nwhen you do some server side coding, possibly previously you. So in your previous experience, maybe you also \nfaced some warning messages and unfortunately for me, it's not clear how to get rid of it easily. It looks like some \nleftovers made by base product developers. Maybe we can also see it at my own environment. Surprisingly, I \nprobably so maybe which version currently you're running.  \n  \n  \nSpeaker 1\n \n So maybe you have just a bit older version than I do because I recently switched to the latest one and your version \nmaybe not the same latest, but this is not critical. So you can just see this compilation result. But I can complete. \nYeah, in general it's not ideal, but it's something that is satisfactory. So you can continue your work. Okay, I can go to \nthe system mode next, right? So you can do next examples, next steps of our videos so you can work normally? Yes. \nOkay. Okay, thank you. But last question, if I download the window eleven Pro, do I have to repeat the old step in the \nfirst lecture or it's installed by default? Unfortunately I have no experience of upgrading windows from home to pro.  \n   \nSpeaker 1\n\n--- Page 27 ---\n\n  \n I believe it should only change some files on your windows and it will not be like clean environment. So you should \nhave the same IIs website, you should have the same stuff. And I did not check it by my own, so I have no \ninformation, no practical experience with it. So my company gave me a laptop with Windows Pro and I never tried to \nrun on Windows home and upgrade it. Yeah. Thank you. Thank you very much dmitry. Thank you too. Pes. So our \nsession is over. Thanks all of you who watched this video till the end, see you tomorrow. Goodbye. Goodbye.",
    "file_path": "creatio-academy-db/developer_course/pdfs/Creatio-Developer-3.pdf",
    "page_count": 27
  },
  "metadata": {
    "filename": "Creatio-Developer-3.pdf",
    "file_size": 275660,
    "created_date": "2025-01-23T16:16:40.007885",
    "page_count": 27
  },
  "chunks": [
    {
      "chunk_id": "79584b7788e3acc266b1a1f9cf34ae99",
      "document_id": "7c589e42742e",
      "content": "--- Page 1 ---",
      "chunk_type": "paragraph",
      "chunk_index": 0,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 4,
      "token_count": 5,
      "context": {
        "heading": null,
        "paragraph_count": 1,
        "position_in_document": 0
      }
    },
    {
      "chunk_id": "70fc28222aef1e6f874c5336a8a5dca5",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo today session number three of our development on creation platform guided learning. So we started \ndevelopment questions. We already set up our environment. We did some simple changes there. We practiced with \nobjects and with data items. I just forgot to note that you need some additional permissions and when you place \nyour environment, your app into some protected folders like Cub or C program files or somewhere in users. So it \nmeans that such folders are protected. In this case you may need some special permissions. I already did it \nsomewhere here, so let me show you what special permissions you may need. No, not here. Let me find probably \nthis one. Yes. So this is important.",
      "chunk_type": "paragraph",
      "chunk_index": 1,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 122,
      "token_count": 147,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 1
      }
    },
    {
      "chunk_id": "11be91f7b3e796f2341fc37d1a72442c",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nIf you experience some problems with your app and if you start to get error messages about some files are not \ncannot be written or you have some file system access issues, especially you can face it during calculation, you can \ncreate separate setting and you can find your app folder Terrasoft web folder and add special role IIs underscore I \nusers and you should provide modified permission for this role for all of your application folder Javasoft web folder \nthis will grant unlimited file system access to create your application. So you will not have troubles with saving files. \nYou will not have troubles with application errors about some file system issues. In case if you will find errors like we \nhad with Bazel, that system tries to save some data somewhere and fails. You can also make sure that such \npermission is granted.",
      "chunk_type": "paragraph",
      "chunk_index": 2,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 148,
      "token_count": 172,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 2
      }
    },
    {
      "chunk_id": "567f19be261960a81f5b9d40c5c9a618",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo iis I users it's a local role which includes set of automatically created users made by creature. Sorry, made by IIS. \nWhen you create your application pool system makes automatic creation of application pool identity and such \nidentity. Actually it's medically generated user. I can show you something in my c users. You see I have a lot of site \nautomatically generated users created previously, so I probably should remove most of them. But this is something \nthat you need to know. That system runs under such privilege. If you have local administrator privilege, you can also \nlook at your task manager and you can see who exactly runs w three WP process. In my case this is some user \nwhich I can't see unless I will start something with my local administrative privilege.",
      "chunk_type": "paragraph",
      "chunk_index": 3,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 138,
      "token_count": 165,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 3
      }
    },
    {
      "chunk_id": "c755508b09d518288a1fbcb144aa50c2",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nBut currently my regular user has no such privilege because of corporate restrictions which I have with my \nenvironment. So let's move on. So this is something that may help you with troubleshooting of your access issues of \nyour application. Now let's move on with next topic. So I just wanted to show you some interesting thing with virtual \nobjects and with connecting objects to a database view because previously we worked only with regular normal \nobjects when you created it makes the same database table in your real database. So we added some data. Now \nyou see the same data records physically, but you can create very interesting situation when object can be \nconnected with something in database not created by creation application.",
      "chunk_type": "paragraph",
      "chunk_index": 4,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 127,
      "token_count": 145,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 4
      }
    },
    {
      "chunk_id": "0f3703ea771dce09768ecca1167d9164",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nFor example we can make our own view in database, so we can use some SQL scripting and then we can make an \nobject named the same as this view and we will have the same columns in our object the same as available in view. \nAnd finally it will show you some interesting trick, how you can use creation objects to read data from sources not \ncreated by creation system. For example, such sources may be created by developer or can be used for integration \npurpose to connect with other systems. So let me show you some simple example which implements this idea. And \nfirst of all I need to tell you something about business. So here we have a contacts section. Contacts were installed \nhere because we recently, yesterday we installed customer 360 app and we used application hub for this.\n\n--- Page 2 ---",
      "chunk_type": "paragraph",
      "chunk_index": 5,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 150,
      "token_count": 171,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 2,
        "position_in_document": 5
      }
    },
    {
      "chunk_id": "616c4f6be1e3ced0f65ac8516f7aa249",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nHere we used application hub and we installed it from marketplace. So this customer 360 was installed from \ncreation marketplace. Customer 360 encodes contacts and accounts. So now we have contacts section and what I \nwant to show you is that contact by default already has birth date column and also contact entity has integer age \ncolumn representing current age which is recalculated every day automatically according to birth date and current \ndate. Let's make a bit more examples with age calculation so we can click on supervisor. We can provide some birth \ndate somewhere in like this where it be save close. So now you can see we have provided some birth date and we \nhave automatically recalculated age. So this is age in years and everything looks good. But let's imagine we have \nsome unusual task to calculate age of a contact but not in years.",
      "chunk_type": "paragraph",
      "chunk_index": 6,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 151,
      "token_count": 176,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 6
      }
    },
    {
      "chunk_id": "b05384b05d44a40ebf9602e2a9259919",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nWe want to calculate it in days. So just to see how many days certain person lived and what is its current age in \ndays. We can do it easily at the database level. So let me show you, I already have some examples how we can do \nthis. So I will do it quick and I will provide you necessary scripts for this SQL view. So let me show you how we can \ndo this example. So first of all I will show you an example which makes corresponding calculation like this. And this \nis Microsoft SQL server query which selects id name, birth date. And we use some SQL functions like date default \nfunction to make some kind of calculation here. Now we do a calculation of a difference between birth date and get \ndate.",
      "chunk_type": "paragraph",
      "chunk_index": 7,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 140,
      "token_count": 160,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 7
      }
    },
    {
      "chunk_id": "5339e12eb4707a29152b19c371a44a27",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo actually it's better to say difference between get date which represents current date and birth date. And it makes \na difference in days and shows us some integer value. So if we run such query we will see list of our contacts and \nwe will see age in days. This is a very simple example. It is made specialist, so simple so you easily understand it in \nreal life. Such approach like making your own selections from the database can be much more complicated. Using \nsome aggregations, using joins, using subqueries, using having operators, using group by and a lot of other things. \nSo you can do it unlimited complex if necessary. My example shows you that you can do some queries, you can use \nsome functions from SQL, you can do the same in postgres.",
      "chunk_type": "paragraph",
      "chunk_index": 8,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 140,
      "token_count": 167,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 8
      }
    },
    {
      "chunk_id": "068c53d70931a1208677c416b16ce9f8",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nAnd this is example of how we can do some special selection from the database which is not normally available if \nyou want to use just only creation tools. So creation supports three types of databases. It doesn't support some \nspecific database dependent features like date, d function. And also we have not so much of flexibility building \nqueries in our creation. So as we have flexibility to build queries directly from SQL. So now you can see we have an \nexample of such query. So what else we do? Now I will show you how we can make a database view based on this \nquery. We can use SQL script and of course I could run this SQL script directly at my SQL Server management \nstudio. But my plan is to make it transportable to other solutions, to other environments.",
      "chunk_type": "paragraph",
      "chunk_index": 9,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 144,
      "token_count": 166,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 9
      }
    },
    {
      "chunk_id": "64f8de87f46dccd55d578a4e80113439",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo I will share example of a script for creating Vue for SQL version and some of you are running postgres. For \nexample you may run postgres at cloud instances like demo websites or maybe trial websites. They are usually \nbased on cloud, on postgres. So this is example of postgres for the same stuff. Okay, so these such scripts of \ncourse obviously are database dependent. Now I plan to use my SQL version but I will not run it directly in this editor. \nI know it will work for me, but I can show you how we can make a SQL script in our package. So let's go to \nconfiguration our system, then settings, then advanced settings. That's how we go to advanced settings part. Or we \ncan also go here by typing the URL of our website zero dev.",
      "chunk_type": "paragraph",
      "chunk_index": 10,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 144,
      "token_count": 169,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 10
      }
    },
    {
      "chunk_id": "2a9a916d7e86353b338ce9696ae89d5a",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\n--- Page 3 ---\n\nThat's how we go to configuration section, find our package that we decided to use. Add SQL script I can name my \nSQL script whatever I want. For example USR, create contact age, days view, something like this. It could be \nanything. When we create this script, when we start the script in a process of package load, it could before package \nbecause at the very beginning of the package load procedure, no backward compatibility just apply and I have my \nscript here in the clipboard. So this script creates or modifies database view with a certain name. This name should \nstart with USR. Then you can do whatever you want and you can name it. But there are some conventions agreed \nwith developers and if you make a view it makes sense to name it vw.",
      "chunk_type": "paragraph",
      "chunk_index": 11,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 144,
      "token_count": 173,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 2,
        "position_in_document": 11
      }
    },
    {
      "chunk_id": "77730e67ccd227225ca68e8deb56c38b",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nJust to make clear that your object is not a simple table, you plan to make a view. So this view name should be the \nsame as our future object that we will create. That's why this view has such a strange name. This view will work as \nselect statement, selecting set of columns and as you can see I have to use aliases for columns with USR prefix \nbecause of requirements. When we design our object in creation configuration it asks us, not forces us to use USR \nfor column prefixes. Yes here so you can see we select id name, birth date which includes day, month and year and \ndate diff as an integer value which will represent age in days. So this simple view will return four columns for us and \nwe can register so we can set it up as a SQL script.",
      "chunk_type": "paragraph",
      "chunk_index": 12,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 150,
      "token_count": 173,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 12
      }
    },
    {
      "chunk_id": "1a0f8e19b335b6bb45d8a975b1363055",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nYou can save this SQL script. Obviously if you work with postgres database you should use postgres version for this. \nWhen you create SQL script you can decide what type of database you are focusing. So close it and we can also run \nthis script. So of course I could run it in my SQL server management studio. But here this is example of how we can \nrun SQL script from your configuration section. Okay I'm trying to install it means run this script. Now if it has some \nerrors we can go to properties find last error message text so we can see what went wrong here. In my case \neverything looks good so nothing special. I already have my view and I can check this view presence running \nsomething like this. Select something so select everything from and here is my name of the view.",
      "chunk_type": "paragraph",
      "chunk_index": 13,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 150,
      "token_count": 170,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 13
      }
    },
    {
      "chunk_id": "040db9bfc728dff3095ee6d7c823ead3",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo if I select successfully. Yes, now it looks like my view is present. It has four columns and my database level part \nis ready. So I have database item as a view which returns some data if I select it. If something is not clear, if \nsomething you do not fully understand why I'm doing this. Please don't be shy, ask questions, I will be happy to \nanswer you. And now this database part is ready but now we have to join it with creation. In creation we can create \nan object and we can provide the same code for the object as our database view name. Here I will also paste it for \nyou. Don't forget we can also make some title, something like contact age and dates, something like this and the \nmost important property here.",
      "chunk_type": "paragraph",
      "chunk_index": 14,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 142,
      "token_count": 169,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 14
      }
    },
    {
      "chunk_id": "7305fb9288ac8ca24019c9d8d3b2161c",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo now I will show you and explain some of behavior settings we must set up. Represents structure of database \nview this is very important property which tells creature that system should not try to create corresponding table or \nfind existing table. If we create an object with represent structure of database on it means developer took care about \ndatabase part themselves. So everything is already okay at the database. So creature will just not interfere with the \ndatabase to not try to create a table or modify existing table. So creature simply doesn't know what is in database \nfor you already corresponding object. But when you will try to use this object, for example, ask creation to select \ndata from it.",
      "chunk_type": "paragraph",
      "chunk_index": 15,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 125,
      "token_count": 143,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 15
      }
    },
    {
      "chunk_id": "b7329acc0e747de1a5f864729228cc90",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nIt will try to do it and treat it as a table with a set of columns and columns information will be provided in this object, \nso it will try to use it as a regular object, but it will not try to modify its structure the database. This helps us to make \nanything at the database level, including views or self handmade tables. Or in some cases we can use like\n\n--- Page 4 ---\n\nmaterialized views in oracle or indexed views in Microsoft SQL. So you can use anything that can be used for \nselection from the database and turning on this option represents structure of database view makes this trick \npossible. So when we design our object we will not use parent object because we do not need any kind of \ninheritance here.",
      "chunk_type": "paragraph",
      "chunk_index": 16,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 139,
      "token_count": 159,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 3,
        "position_in_document": 16
      }
    },
    {
      "chunk_id": "2b991ecf26b74b71b97e121150aa52cc",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nAll we have to do is set of columns which matches with set of columns of a real database view. First column is \nUSRiD and the type is unique identifier. So we have to represent it. Type is unique identifier, column code is Usrid and \ntitle could be just id. Okay, this column is done. Next one is uSR name text 250 you can name name and it's okay. \nThird one is USR birth date which is a date only birth date. And the way the last one is integer USR age days the most \ninteresting column for us, integer USR age days age in days okay, so we got it. The last change that we have to do is \nthe only required property for an object is the Id. I don't like this title. I would like to see here key column or key field.",
      "chunk_type": "paragraph",
      "chunk_index": 17,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 149,
      "token_count": 181,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 17
      }
    },
    {
      "chunk_id": "2945b6a3e7e958a2f6e8b99e360a306a",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo our key column is id column we created especially it has Usrid code and it has id title. So this is the most \nimportant part and that's all we can save and publish our object. As you remember, we can just click publish \nbecause it performs save anyway. And luckily for us, publishing such object which is represented as a database view \ndoes not make any changes in the database. So it will be really quick. Such publishing will be faster than creating \nnew table and saving publishing. Regular object so we made an object with a special property, special behavior and \nour object is ready now so we can start to use it. We can go to the lookups and as you already remember, lookups is \nthe easiest way to see what is inside your object. So we can register our object age in days.",
      "chunk_type": "paragraph",
      "chunk_index": 18,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 150,
      "token_count": 175,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 18
      }
    },
    {
      "chunk_id": "ffacd96942082580b16550f31166762f",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nWe can register this object as a lookup. By the way, you probably noticed we have a new button here. Sorry for this \nalignment, but it's not a big deal. This button appeared as a result of data binding tool and it helps us to automate \ncreating of data items and for many different scenarios. In our case, we need data item for register object as a \nlookup. If I click bind lookup here, I ask system to automatically create data item for me. I need only to select target \npackage and system will do automatic creation of data item without my manual action. So I can see what happened \nhere, what actually was done. You see that this data item was created automatically contact agent days so we can \nclose it. It is saved into our package now and it's okay, let's open created object now.",
      "chunk_type": "paragraph",
      "chunk_index": 19,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 150,
      "token_count": 177,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 19
      }
    },
    {
      "chunk_id": "4413e891ac6feaf2bfbebaccc7e63796",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nYou can see we have name column, we have birthday and we have age in date. So you can see this calculation \nworks. There are some side effects because of this is editable list and our object is not inherited from base entity. \nWe have some side effects caused by it like this. So you see it's not working fully as expected. But when we reload \ndata, at least reading data is working right, working correctly. So you see that calculation of contact in days, age of \ncontact in days is performed well. And you see this calculation works well in real life. You may use this approach to \nperform some long lasting calculations like turnover finance calculations, like some debt calculations, or other \nthings that usually take time. So you may do such calculations at the database level with kind of views and the \nsubqueries.",
      "chunk_type": "paragraph",
      "chunk_index": 20,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 149,
      "token_count": 176,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 20
      }
    },
    {
      "chunk_id": "b21b35b0f8fe56494655450b95087cc5",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nThen you can create an object representing your data structure and with the same name and same columns set. And \nif you mark this object as represent structure database view system will not modify data tables. It will trust you and \nit will try to read data from sources that you specify. So it will try to read data from the table or view with the same \nname as your code. So this trick can be also useful. And I would like you to see how we can connect such object to \nexisting contacts section. In order to make connections between objects, we must use lookup columns. In our case, \nit's harder to make a lookup column from contacts to our new entity. So it's better to use our new entity and then use \nreverse joins to connect with contacts.\n\n--- Page 5 ---",
      "chunk_type": "paragraph",
      "chunk_index": 21,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 147,
      "token_count": 169,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 2,
        "position_in_document": 21
      }
    },
    {
      "chunk_id": "f5117b767d9d0a49fe8f71345e5d5f05",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nNow I will show you how we can do this. But first of all we need to modify our SQL script. Let's go to our SQL script \nand add one more column. We can add one more column. It will be id as contact id. So I will use new not to contact \nUSR contact id. Yeah, so this will be one more column and I plan to use this column as a basis for my future lookup \ncolumn. Of course I need to run this query. This will be very quick. We can check out the database that our new \ncolumn appeared. Great. It's important to name it exactly as is USR contact id. Okay then we will modify our object. \nSo our script is okay, let's go to modify our object we can add lookup column named contact not contact id.",
      "chunk_type": "paragraph",
      "chunk_index": 22,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 146,
      "token_count": 173,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 22
      }
    },
    {
      "chunk_id": "246d66b7bcb184ea97f6dd363ed3af74",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nWe will name it USR contact title can be contact and there are some architectural peculiarities. When we have a \ncode something then on database system works with code plus id suffix. So I named my column in the object level \nUSR contact and system will work with USR contact id when it reads data from the physical database. This happens \nnot only for this object, it happens for all objects with lookups. So let me show you like account. For example \naccount column account entity has an industry lookup column and at the database level we have industry id. It has \ntype at the object and at the database we have type id, city id, region id and other lookups saved in the database. So \nwhen we have a USR contact column, system will work and search for USR contact id at the database.",
      "chunk_type": "paragraph",
      "chunk_index": 23,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 148,
      "token_count": 175,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 23
      }
    },
    {
      "chunk_id": "1c02936243710c309283c06bd0410373",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nWe have to specify lookup property. It will be a contact obviously it looks like that's it. We do not need anything else. \nLet's save and publish. Click publish, make saving and publishing. Now you will see how we can use this object so \nwe can add connected. Probably we need to reload the page because of some client side issues. Caching issues \nmaybe prevent us from working normally. So our main entity is contact. Now I plan to join my contact age object as \na joint entity using reverse joins. Let me show you how we can do this. Add columns related objects. Now I have to \nfind contact age in days object and then I will use a age in days. For example, it will be maximum value no matter \nwhich one I will use. I can even use first record value.",
      "chunk_type": "paragraph",
      "chunk_index": 24,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 147,
      "token_count": 175,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 24
      }
    },
    {
      "chunk_id": "03a5b5983dea7dee432fb37088e1aa01",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo let it be just maximum value for one contact. We always have just one data row in our connected entity. So \nmaximum will work for us. And I can just name this column age in days. No need to use any additional filters, save it. \nSo now you can see that age in days was successfully joined to existing contacts section. We did not customize \nanything with contacts at all. We used our own artificial objects. We made an artificial lookup column and that's how \nwe are able to connect to different entities and display corresponding data. I hope this is interesting example for \nyou. You probably have your own experience with use of column settings, related column settings. Some of you \nprobably visited our customization course provided by my colleagues.",
      "chunk_type": "paragraph",
      "chunk_index": 25,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 135,
      "token_count": 158,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 25
      }
    },
    {
      "chunk_id": "aaed6266aa54914214e5b2b44cd054e8",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo possibly this is not very difficult for you, and if you have more questions about it, just tell me. So it was an \nexample of how you can use additional tricks with objects and to connect it using database view. There are some \nother properties here like virtual connected to the portal, wave update and so on. So I only have to tell you a couple \nof words about virtual. So virtual means that object will be not connected to database at all. Virtual objects are \nusually created for the purpose of providing some template structure and then to be inherited or for the purpose of \nmanaging data without actual read from the database operations inside of object model.",
      "chunk_type": "paragraph",
      "chunk_index": 26,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 123,
      "token_count": 140,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 26
      }
    },
    {
      "chunk_id": "492d01eeee360010ee7c327e737243c4",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nIf we will search in our configuration for objects, search for something with the name base, we'll find a lot of objects\n\n--- Page 6 ---\n\nlike base address, base entity, base folder and so on. I will open base lookup as example. You will see this object is \nvirtual, so it has no its own table. So you see object based lookup. But if you go to the database, you will not find the \ndatabase table named base lookup. So you see we have some base value lookup, something very suspicious and \ninteresting and okay, I will look at it later. But base lookup is not found here because this is a base object which is \nvirtual. And mainly it exists only to provide inheritance. We have set of columns, business columns, we have \ninherited system columns.",
      "chunk_type": "paragraph",
      "chunk_index": 27,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 141,
      "token_count": 172,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 3,
        "position_in_document": 27
      }
    },
    {
      "chunk_id": "ae385fb4e312b6da7089ec6467faf4cc",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nAnd when we create new object inherited from base lookup, it will be a true new real object. But you will inherit a lot \nof properties and events, settings and behavior from base lookup. And that's how this object can be really useful \nbecause you can. So base architects can program lookups behavior. Once in base lookup object, then you create \nyour own lookups inherited from it. We did it actually. And that's how you can use one template for many parts of \nfunctionality. And it's quite efficient. So we have a lot of base objects, most of them are virtual. I only interested with \nthis strange example, base value lookup. So let's search base value lookup. Base lookup this value, it's very strange \nwhy we have table for it? Oh, because it's not virtual. Someone needs this object and someone keeps some data into \nit. Probably. It's interesting.",
      "chunk_type": "paragraph",
      "chunk_index": 28,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 152,
      "token_count": 194,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 28
      }
    },
    {
      "chunk_id": "bbdaab1b60e7ba918bf4605c76d4af76",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nLet's check. I never faced it previously. Base value lookup let's see what. So it's empty. Translations are also empty. \nOkay, no problems. Everything is okay. So that's it about lookups, about objects. And I only wanted to show you one \nmore thing, final thing about objects. And let's look at our reality type classic object as example. So I wanted to tell \nyou about support of translations. So for you already know that creation supports translation of user interface. You \nalready found we have a languages section, we have set of active languages, so you can easily switch your \nenvironment into other languages. In your profile you can switch languages if necessary. But what you probably do \nnot know so far is that creation does not only support your UI language change, it also supports translation of some \ndata records.",
      "chunk_type": "paragraph",
      "chunk_index": 29,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 144,
      "token_count": 181,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 29
      }
    },
    {
      "chunk_id": "f29a035d7d2d77ba1288786138397eb9",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nAnd inside of the objects you can specify what columns will support this translation and what columns will not \nsupport translation. By default, name and description text columns are turned on with this option, localizable text. It \nmeans that if you want, you can save translations of name and description column into other languages. And this \ntranslation was already done at base product lookups. So if we read some data from some standard lookup like \naccount type, you will see six standard records in English. But if you will look further and find out that we have a \ntranslation tables for it, they usually have cis prefix, then main entity name, and then LC suffix, you will see \ntranslations for such data into other languages. So you can order by cis culture, you will see translations into other \nlanguages. Here is russian translation.",
      "chunk_type": "paragraph",
      "chunk_index": 30,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 146,
      "token_count": 174,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 30
      }
    },
    {
      "chunk_id": "cfa89f9ad6a72e0cedfedd652a5d2715",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nHere is probably what else, I don't know what is the language here? This seems to be italian, maybe Portugal and so \non. Probably, I don't know, it's hard for me to guess. I can join and so decode such cultures. Okay, let's do this. Not so \ndifficult, syscall type. So this is our localizable, we can join sysculture and we will read data link from cis culture and \nthen culture name as language. Okay, so now you will see corresponding language. So this one was Russian, this \none is Dutch language. So Netherland language, this is Portuguese, this is Spanish, Vietnam language, French, Italian \nand others recently added Hungarian language, Czech Republic, arabian right to left by the way, there is a right to left \nsupport. This is what Sweden probably Hebrew, Romanian, Japanese.",
      "chunk_type": "paragraph",
      "chunk_index": 31,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 138,
      "token_count": 186,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 31
      }
    },
    {
      "chunk_id": "d39a9fabf6eb908efdff8c0d6a245950",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo you can see translations of the same records that you get from your main table are saved into different \nlanguages and out of the box lookups. That is because name and description are supported with localizable text.\n\n--- Page 7 ---\n\nYou can turn this option off if you don't like it or you can keep it on by default because it was inherited from base \nlookup. It was inherited and that's why we did not change it. So we also have possibility to save translations of name \nand description into this separate table. This separate table automatically is automatically created for our lookup \nand so if you enable at least one column it will be this separate table will be named CIs, then your object code, then \nLCZ. So in my case this information is empty. Sys usr realtor type lcz my table is empty, we have to type classic.",
      "chunk_type": "paragraph",
      "chunk_index": 32,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 155,
      "token_count": 183,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 3,
        "position_in_document": 32
      }
    },
    {
      "chunk_id": "2c23491659c18d39f9e3d7107e5fdc5f",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nYes, you see my table is empty because I did not provide any translation. But once you will support several \nlanguages and if you want to keep your lookups translated into other languages so you can start to use it. And the \nbest way to transport and make such translation is to register one more user with another language and then log in \nat this user, go to lookups and when you will go to corresponding lookup then you will start to edit data. If you edit it \nwith other language, so you will provide translations and this translation will be saved properly into corresponding \ntables. I hope this is interesting enough so if you're interested and really need such translation support, creatio is \nready for this so you will not face any troubles. Okay, so finally we finished playing games with contacts with our \nage.",
      "chunk_type": "paragraph",
      "chunk_index": 33,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 149,
      "token_count": 173,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 33
      }
    },
    {
      "chunk_id": "225dd8743aba19c01f4183ec379586f6",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nEverything should be saved on disk. Of course we will remember now about our visual studio code and git client to \nshare our settings with our imagined team members. Now you see some items created so we can commit \nsomething like contact age view example added. This will be our comment for the commit that we do with these \nrecent changes. Okay, as you can see we did not forget about registering of this lookup as of this object as lookup in \nlookup section and made a data item with the help of data binding tool. Okay, we can submit everything to our local \ngit repository, then pull and push to global git repository. That's how we can share our settings with our other team \nmembers. Okay great.",
      "chunk_type": "paragraph",
      "chunk_index": 34,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 131,
      "token_count": 151,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 34
      }
    },
    {
      "chunk_id": "1f3d79424c62008cac3e81a0b7cd2fd1",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nWhat else I wanted to show you before we proceed is example of delivery because it will be important I think that \nyou are interested how we can transport our solution for test and production. You remember version control. \nWorking with git with bunch of files is not so efficient when you want to transport your solution for test and \nproduction. This type of sharing with many files is good for developers and between developer environments in \norder to make delivery to your test and production. You can simply export your package into a file and then I will \nshow you some magic. Now you can see our file was saved here. This one is our file saved seconds ago. And this is \na zip file.",
      "chunk_type": "paragraph",
      "chunk_index": 35,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 129,
      "token_count": 145,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 35
      }
    },
    {
      "chunk_id": "05dd3db7f18b2f329179c8677f31fcef",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nInside of it we can find Gz archive and inside of it we can find a single file with metadata saved here and it's not so \nreadable. And this is a transportable format for creation packages. Okay, so this is metadata of your package fully \nincluding all the package items, including all scripts, including processes, whatever we have and even more including \nfile system package contents from the files folder. Let me show you telescope configuration ekg dev classic. We \nhave some file content as a result of our configurations, so such files also will be saved inside of this zip archive. \nThen we can go. Recently I installed one more environment so it will be test environment d two test hello node test \nso we can run this test environment. Currently I am running my second creation environment on the same PC.",
      "chunk_type": "paragraph",
      "chunk_index": 36,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 146,
      "token_count": 172,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 36
      }
    },
    {
      "chunk_id": "e787884b1b5a24e037cfed2e60d5f993",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nIt will take some ram, some cpu. You see my ram consumption is more than 11gb now, so I can start my second \nenvironment. I will use it as a test environment to check how delivery works and to also make sure that I have no any \ntroubles with changes with transition of my settings between environments. Sometimes it happens. Now I started to \nreceive this attempt when I attempt to login. Then it drops me again to the login page and on the second attempt I \nsuccessfully log in. So it happens quite often. But now I don't know how we can fix it. So okay we logged into our test\n\n--- Page 8 ---\n\nenvironment. I can show you how we can load our changes from zip archive file. This is very easy. We go to settings. \nIt doesn't require any special skills. We only have to be administrators.",
      "chunk_type": "paragraph",
      "chunk_index": 37,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 154,
      "token_count": 185,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 3,
        "position_in_document": 37
      }
    },
    {
      "chunk_id": "cb6a052fab6ef49005a30df4b5d167bb",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo we have to be a member of a sysadmin. Let me show you system users. My supervisor user is a member of \nsystem administrators role. The only condition necessary for us to load packages and here is my application hub on \ntest environment and I can just install the application from file, select file from disk, go to downloads. This is my dev \nclassic package saved several minutes ago. Open it. Normally this loading procedure will finish successfully, but in \nsome cases you may face troubles here. You may face missing data items, you may face foreign key constraints and \nexceptions, some database exceptions. So in some cases you may face errors here. Anyway, you should look at \ninstallation log because it will give you enough technical details about how well our loading was performed. So we \nwill invest several seconds into looking at it.",
      "chunk_type": "paragraph",
      "chunk_index": 38,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 149,
      "token_count": 176,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 38
      }
    },
    {
      "chunk_id": "22a14d4c2633a30f41efd288db5da972",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nLet's see what happened. So 13 seconds we started no visible errors and 31 finished. It looks like maybe 18 seconds \nto install. Very good, very good. Okay, so you see some text, comments and details about installation of the package, \nbut now it's okay. So our package is already loaded. We can find it in configuration section of our test environment. \nBut this package will be not editable. So our package after loading we can find it here. Dev classic as you can see \nthis package is not editable because we loaded it from file. We intend to use it for test or production. So system \ndoes not expect that we will modify it. So when you load package from file it will be read only if you really need to \nmodify it.",
      "chunk_type": "paragraph",
      "chunk_index": 39,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 137,
      "token_count": 167,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 39
      }
    },
    {
      "chunk_id": "a7a5f7474b3b1d24ed2972a5a7cad8ff",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nFor some reasons you can do this by unlock for hotfix temporary thing that helps you to make temporary make your \npackage temporary editable. If you forget to lock it again, system will do it according to the special timeout which \ncan be found in system settings. Now you can see my package was loaded. You see status, no errors. It means all \nSQL scripts or objects were applied successfully. Now let's go to the lookups section of my test environment. As you \ncan see this lookup section doesn't have any column setup which I prefer to do. Okay, we can go back to list view \nand we can start to adjust it to easily find the corresponding new lookup records. Now you can see my realty types. I \nexpect to see four records here, so they were normally loaded. Everything is okay.",
      "chunk_type": "paragraph",
      "chunk_index": 40,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 146,
      "token_count": 174,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 40
      }
    },
    {
      "chunk_id": "8bfaef153cd54c8b37c78d773fe73a19",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nContact age in days as you can see according to my current data on test environment is calculated. Great. So it \nlooks like everything I did was normally loaded and we can use this environment for future checks. Now we can \ntemporarily disable it, but then later we will check our new environments. We will check our new application which \nwe plan to do right now. So you see that delivery is very easy. You can just export your solution to the file. If you have \nmany packages, you can export many packages. You can also do some tricks at the database. For example you can \nput several GZ files into one zip file if you want to make it faster to load.",
      "chunk_type": "paragraph",
      "chunk_index": 41,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 126,
      "token_count": 147,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 41
      }
    },
    {
      "chunk_id": "3109e0337dda73702a12f9825b88eb44",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nAnd today I plan to show you how to make a UI settings how to make new sections not with section wizard because \nit's classic UI, outdated stuff. I will show you how to make new sections, new bake applications made with \nautomations provided by application hub and Freedom UI. So we will focus mainly on Freedom UI. But before doing \nthis I need to explain you what is application hub and how it's intended to be used. So we go to settings, then we go \nto application hub section and open it. Special tab opens for you. And this is a place which is designed to manage \nyour freedom UI customization. And now we need to talk about new functional item of creation that is called \napplication. So I will try to explain you what application is and how you should understand it.\n\n--- Page 9 ---",
      "chunk_type": "paragraph",
      "chunk_index": 42,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 151,
      "token_count": 175,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 2,
        "position_in_document": 42
      }
    },
    {
      "chunk_id": "01f59114131c565371349912b75051b4",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nApplication appeared not so far ago, maybe just a couple of years, and packages were present for more than ten \nyears. So you see that application is generally relatively new to creation and previously we had only packages. So \napplication is a new logical type of items and usually one application means one or several packages. So application \nis a higher level logical setting and it may include so it must include at least one package. But sometimes it can \ninclude more than one package. As example, customer 360 app includes three packages. Only one of them will be \nlike current default package for saving of customizations. But now let's focus on the idea. So customer statistics is \nan app and it has three packages behind it. Application has its own properties like name, version, default page \ndescription, date of creation and so on.",
      "chunk_type": "paragraph",
      "chunk_index": 43,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 147,
      "token_count": 175,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 43
      }
    },
    {
      "chunk_id": "ca7f2b0c0ef469989b484c4b8ccd75b9",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nAlso it has information about its developer. Terrasoft here means that it is a creation company. Terrasoft, as you \nremember from previous sessions is previous name of creature company and creature brand. So application has its \nown properties. Also application has color settings and application has icon. You can find data binding tool, but it's a \nbit artificial. Application just made for compatibility. Previously data binding tool. It was just a package and when we \nloaded it we have this GLB data binding package, we can see its contents and originally data binding tool was not \ndesigned as a freedom UI app. So all customizations we have here are based on classic UI tools. That's why we will \nnot see any pages, any special section data. We have just data items related to different parts of creation \napplication. But it's not actually sections.",
      "chunk_type": "paragraph",
      "chunk_index": 44,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 146,
      "token_count": 182,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 44
      }
    },
    {
      "chunk_id": "2b509a7a09f82ab77f5d304a97326432",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSuch items are data items created for some purpose. Data models means objects. Business processes are like \nautomated business procedures implemented as diagrams. So code in creation. They are called business \nprocesses. No integrations and advanced settings show us all packages for this app or filtered by selected package. \nSo application is a higher level setting or entity which includes one or many packages. The reason why creatio \nneeded applications was caused by shift to so called composable apps approach. I will try to explain what it is. So \noriginally we had no any customizations at our studio environment, so it was just constructor only. Then we installed \nseveral apps like customers 360 like data binding. Also we installed maintenance tools and so on. If necessary we \ncan remove some of installed apps.",
      "chunk_type": "paragraph",
      "chunk_index": 45,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 136,
      "token_count": 168,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 45
      }
    },
    {
      "chunk_id": "de4377366abb6c0a734b52c5bb919206",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nThe system will revert and go back into its original state which was before installation of such tools. So finally, end \nuser system may include only solutions, only applications that user decides to run. And that's why we can call this \nlogic composable app. It's very close. Composable apps, it's very close how you manage your software at your \nsmartphone. So you have platform, let's say Android or iOS, and then you install necessary apps that you use for \nsome certain purpose. If you don't like some app or if it starts to work, not normally, you can remove it easily. And \npreviously, maybe three or five years ago, it was not so easy to do in creature, because creature had out of the box \nfunctionality which cannot be removed from system. So old Kriacia systems included functionality that could not be \nremoved from it.",
      "chunk_type": "paragraph",
      "chunk_index": 46,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 148,
      "token_count": 188,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 46
      }
    },
    {
      "chunk_id": "5b1e3b7934e014dcda0d6f14762aafc8",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo it was not fully composable approach. And we had just simply hard coded part of the system which also was \ncustomizable, but it was not removable from the system. Now developers decided to make constructor only and \nthen to install everything that you need on top of it. And that's why they needed applications, because sometimes \nfunctionality that you want to add includes more than one package. So developers needed applications because \nsome functions were designed as set of packages, not just one package. So application means set of packages \nwhich includes some certain business functionality. And applications can also be imported or exported. So when \nyou export an application, it physically saves set of packages on disk into one zip archive file. So here is a single zip \nfile. If you look inside, you will see set of packages Gz files.\n\n--- Page 10 ---",
      "chunk_type": "paragraph",
      "chunk_index": 47,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 150,
      "token_count": 180,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 2,
        "position_in_document": 47
      }
    },
    {
      "chunk_id": "1acf494c4ccda313d59d25b113f808fc",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nAnd this is pretty standard for creation. So you can use one zip file for many packages inside. It was possible even \nbefore applications appeared. So now developers just improved this idea and made a separate logical level code \napplication. Okay, how safe is creatio? Kind of after you install a package? Like is there a lot of artifacts that are kind \nof left behind or is everything cleaned up except for maybe database entries and stuff like that? You're asking a very \ninteresting question. For example, when you install it and then you decide to remove it, of course we have some \nitems in configuration like SQL scripts, which may do irrevertible change. So some changes in the database can \nhappen that you physically cannot revert.",
      "chunk_type": "paragraph",
      "chunk_index": 48,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 130,
      "token_count": 157,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 48
      }
    },
    {
      "chunk_id": "1b79cfa5b0d6d50580a83d40b9d37d72",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo ideally if you develop a very good app and then you remove it, you can take care for full recovery of your database \noriginal structure after your application was removed. And if really needed, you can create SQL scripts which will do \nthis. Recovery and installation type will be uninstall app. So uninstall app installation type is a special scenario when \nthe script will be started only in case when your package is deleted. So this is kind of recovery steps that you plan to \ndo at the database in order to make everything clean as it was before installation of your app. But in real life, not all \ndevelopers do this.",
      "chunk_type": "paragraph",
      "chunk_index": 49,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 116,
      "token_count": 132,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 49
      }
    },
    {
      "chunk_id": "37ca140cc62b68dc3aa0a57211230547",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo in real life when you remove your app, some traces may remain in the database and usually this is not critical for \napplication because logically such columns or some data leftovers will not be available to see easily unless you go \nto the SQL level, unless you start to make some special queries in order to find them. So in general, when you \nremove some app, it will be logically cleared so it will fully disappear from the system. You will not see anything but \nsome tiny minor database leftovers can be found the same as you have a smartphone. When you install some app, \nthen you remove this app, some application log files, some application technical things may still remain in your \nsmartphone. If you go into smartphone file system with the proper tools, you will probably find it.",
      "chunk_type": "paragraph",
      "chunk_index": 50,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 144,
      "token_count": 166,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 50
      }
    },
    {
      "chunk_id": "ffd32a30073eb1ae08f9fdd52cdfe8b2",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo in general, it was designed to make it easy to install some app and to remove some app. And ideally when app \nwas removed, no visible traces should remain. Beddy is it clear? Brilliant. Thanks million. Okay, great. Thank you for \nyour questions and I encourage all of you to ask any questions if something is not clear. So having such a dialogue \nin our sessions is much better than just a lecture. And I think lectures are boring. So speaking is better. Thank you \nfor asking questions. So let's move on. We need to do some practice, so to do some practical steps to understand it \nbetter. Of course our practice will include creating your app. Now I need to tell you about some, let's say business \nvalue.",
      "chunk_type": "paragraph",
      "chunk_index": 51,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 133,
      "token_count": 164,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 51
      }
    },
    {
      "chunk_id": "607af650f55cfcaa7a841326e54799d1",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nOur plan is to automate realty estate agency and we want to keep list of realty records in freedom UI application. We \nwill have a section for such list of realty records and we can use existing platform customization tools to make it as \nfast as possible, to make it quick and easy. So click new application. We have several different templates here. In my \ncase, probably the best option is records and business processes. For very unique scenarios. You can use custom \napp which will create an app and it will be empty. So you will have to create your own section inside. But if you create \nan app based on records and business processes template, it will start to create a section for you. Section is a data \nentity. So a big data entity which you can use inside your system.",
      "chunk_type": "paragraph",
      "chunk_index": 52,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 146,
      "token_count": 171,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 52
      }
    },
    {
      "chunk_id": "9e82014848fc45578324ee5ce3ec5251",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\n--- Page 11 ---\n\nIn our examples of sections are accounts or contacts and also we have set of system sections like lookups or users \nor system settings. So section in creature, it's like main big entity which usually has a lot of columns and usually has \nsome subordinate items called details. We will study it, you will see. And also if you're just more risky and you're \ninterested in AI tools, it's possible to make a section with the help of AI. And you need to explain in words what \nsection you plan to create, what colors should be there, what details you expect to see. But personally I do not like \nthis approach because if it makes it incorrectly, then you will spend more time to fix than to create from scratch. So \nthat's why I prefer to create from scratch. Okay, let's create new app.",
      "chunk_type": "paragraph",
      "chunk_index": 53,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 151,
      "token_count": 183,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 2,
        "position_in_document": 53
      }
    },
    {
      "chunk_id": "4cae9626a8ee887abb9fa58cc9f37ec8",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nLet's change its color to something more like significant. And we can see, oh, we have some new icons here. So I \nplan to create a real tea section. So possibly I could find some icon representing a house or apartment. Okay, let it be \nlike this. So it will be icon for my new section. Name of the application, it's very important will be caption of our \nsection. It will be title of new created object. So it's important whether it be real t and advanced parameters. You can \nsee we can provide some application code. Code is also very important because this code will be used to create a \npackage, to create a main object, to create some corresponding settings related to object like page or list and page \nfor edits. So forum page we call it. And so this code is really important.",
      "chunk_type": "paragraph",
      "chunk_index": 54,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 149,
      "token_count": 179,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 54
      }
    },
    {
      "chunk_id": "3339f5ecc0552dc27629b4939621f91a",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nYou will not be able to easily change it later. So it's important to provide it correctly from the first time. Also it's \npossible to link so simply to create rhythm UI section based on existing object. But this option is really useful only in \ncase if you already have some created objects in your system. And usually it happens when you already have classic \nUI solution and you want to migrate into freedom UI. In my case I will create everything from scratch. I will not even \nuse my previously created lookup because I planned to use it for Quest SQL. So we have a separate package, \nseparate application and let's create it. Creating will take just several seconds because it will only add some \ntemplate stuff like main entity, page list and that's all. So my app now is called Realty.",
      "chunk_type": "paragraph",
      "chunk_index": 55,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 146,
      "token_count": 171,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 55
      }
    },
    {
      "chunk_id": "5621d3449300c487e292848ce24d42df",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nIt has its main name, version, default page, some description, date of creation developer. This is a string named \ncustomer. If we change our system setting, named publisher to be possible to change developer of this package and \nthis app. Okay, no changes in app properties. We have pages part, we have list and form page, we have navigation \nand section. So it's registering of a realt section. We have main object realty, we have no business processes, no \nintegration so far and we have structure of our packages. Now I need to explain what is shown here. So our app now \nhas only one package. This package has certain properties and the most important is that this package has a \nalmost black colored folder icon which means this package is editable. Let's compare with other customer 360 now \nyou see gray colored icons.",
      "chunk_type": "paragraph",
      "chunk_index": 56,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 147,
      "token_count": 182,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 56
      }
    },
    {
      "chunk_id": "ef34efd152e63a68193d1db1baf8d071",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nIt means such packages are read only. If you want to customize something in customer 360 app system will not be \nable to save anything into such read only packages. So this will automatically create new package for you. And \nunfortunately automatically created package will certainly have an ugly name. I will show you this a bit later and I will \nshow you how you can manage efficiently packages for different apps and how you can connect it. In my case I try \nto keep it simple because I understand you are beginners, you want to make it work first and you do not want to go \ninto unnecessary complex things. So now we have one single app, we have one package for it and system helped us \ncreating main object, creating set of client modules representing page settings and some technical things for pages.",
      "chunk_type": "paragraph",
      "chunk_index": 57,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 148,
      "token_count": 168,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 57
      }
    },
    {
      "chunk_id": "402e76691114c909d799871b72add9a5",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nAnd as you can see it created seven data items representing inserts into some system tables that are necessary to \nmake our application work normally as a section. Let me show you where we can see it. We can also run this app \nbut I prefer to work with main application window and in order to fight with any potential browser cache issues I\n\n--- Page 12 ---\n\nreloaded it. Now we can go to studio and switch to my applications workplace or we can find all apps in all apps. We \nwill see all available sections including our reality section recently created this reality section now has no data. It is \nbased on main entity named realty and we can use edit page to add some data. In this edit page we only have name \ncolumn so no customization so far. Apartment in okay, let it be New Orleans.",
      "chunk_type": "paragraph",
      "chunk_index": 58,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 153,
      "token_count": 174,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 3,
        "position_in_document": 58
      }
    },
    {
      "chunk_id": "02baa5eabe7a6e58cf373038b81e3ebc",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo this is just an example of a reality object that we plan to reality data that we plan to save. Such list and edit page \nwill be used to manually input data, to modify this data and to work with this data. Then of course we need to \ncustomize it to make more columns to make it more useful to work with. But let's make a break and then we will \ncontinue because it looks like I just forgot to have a five minutes break. So let's make a quick refresh and then we \nwill continue with customization of our new section. Now we continue to customize our section. So what we can do \nhere, there are several ways how we can make changes. I will show you which way I prefer the most. So when you go \nto a certain section, for example here is list page.",
      "chunk_type": "paragraph",
      "chunk_index": 59,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 152,
      "token_count": 174,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 59
      }
    },
    {
      "chunk_id": "50aa8f82364c546e4d8e2dd413972c12",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nThen you open edit page. You can also open edit page by clicking on this action, but it takes two clicks quite hard \nand we can just click on this hyperlink. Okay, now we have a so called form page or edit page. We can do \ncustomizations right from here with a small edit page button. It will open corresponding page editor if you have. So if \nyou already passed our customization course, you already know how to use this page editor. I will only show you \nsome quick settings here. So we will not go and reproduce the same customization course because I need this \nsection only as a on the as a basement for our next programming examples. So customization here and no, code \nsettings are not the top priority for us. We will do it just because we need it for future samples.",
      "chunk_type": "paragraph",
      "chunk_index": 60,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 149,
      "token_count": 172,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 60
      }
    },
    {
      "chunk_id": "e290b2a57a1149ab870294094c556ba8",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo I will do it quite fast. Please confirm. Do any of you reproduce the same steps just during the session or you just \nwatch and plan to do your own practical steps separately? Watching videos so please type plus in our chat if you \nfollow me just during this section right now and do the same examples at your environment. In this case I will do \nsomething not so fast and please type minus in our chat which will mean for me that you are only watching and I \ncan do it quite quick. So not waiting for your response, some of you responded that you do practicing along with me. \nThank you Monica and Rakhi. But most of you just watch. Okay, I will not go too fast and I will show you and wait for \nyou to do the same.",
      "chunk_type": "paragraph",
      "chunk_index": 61,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 146,
      "token_count": 166,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 61
      }
    },
    {
      "chunk_id": "6d18ad3f4bb1fdd56c2b586c020c1f1c",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo my plan is to extend a bit our settings and make it more useful. When I select any column we can look at its \nproperties settings. We have some kind of object inspector for settings of a certain selected item. In my case here is \ntitle code, data format, some settings and here I would like to make it copyable. For some unknown reasons, \ndevelopers who made a template made name not copyable. But I think it's very good idea to easily create copies of \nexisting records and copy names as well. Okay, we can change any properties here, not so many. Okay, so what else \nour reality will have? Of course it will have price. So we can use number columns. As you can see we have set of \ncolumns from this list. Add new field set so we can add different data columns to our page.",
      "chunk_type": "paragraph",
      "chunk_index": 62,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 152,
      "token_count": 181,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 62
      }
    },
    {
      "chunk_id": "1a3ecdbd1112f352b86eda560c4caabb",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSimply drag and drop. You see several potential places to land our page. Our column I prefer to put it here nearby \nname. I can name it price. I can also specify the amount so maybe the currency of our price to make it more clear. \nSo let it be price USD if you want to translate it into other languages, you can also put translations here. Code is very \nimportant property and I also need to warn you, a lot of beginners have mistakes at their pages just because of \nmessing with codes. So please take it seriously. I recommend you to set up codes initially just when you design your \ncolumns and do not change it later. So let's set it responsibly. And as you can see, code is one of not so many \ncolumns where we have to confirm our change or reject the change.\n\n--- Page 13 ---",
      "chunk_type": "paragraph",
      "chunk_index": 63,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 155,
      "token_count": 180,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 2,
        "position_in_document": 63
      }
    },
    {
      "chunk_id": "3f5ce287ec8d296908e298cd5811255f",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nIn our case, code will be something like USR because we need prefix for our new columns and technical things, so it \nrequires prefix. USR price USD will be our code and we confirm. Save this change. Okay, the data format will be \ndecimal, two digits, no description, maybe not required and okay, if you want you can make it required. So system \nwill not allow you to save zeros here. No need to make it read only, no need to hide, no need to make custom \nsettings for titles. But what we need here is element code. This is also technical part, but element code may be \nimportant if you plan to search for this column in its settings, like in technical parts in JavaScript and client module. \nSo if you plan to do any kind of programming, then having a good looking friendly code is important.",
      "chunk_type": "paragraph",
      "chunk_index": 64,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 151,
      "token_count": 182,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 64
      }
    },
    {
      "chunk_id": "f4218d09b5e77cb874265cf6e0f69d92",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nIt should be unique so we can name it the same as our own USR price USD and confirm. As you can see, \nconfirmation is provided for the most important properties and columns of our items. So element code seems to be \nimportant because we have this confirmation stuff. Okay, did it. So this is how we can make one more column. \nQuick, let's say another one. Any reality has area. I will do it a bit faster now. I think you already got main idea how to \ndo this. Decimal 200 and also at the end element code will be USR area and confirm. When we click save, our \nchanges will be applied to the object, to the page settings. So we will have our settings saved in our system. Let's do \na bit more drop down type. We need a lookup.",
      "chunk_type": "paragraph",
      "chunk_index": 65,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 146,
      "token_count": 178,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 65
      }
    },
    {
      "chunk_id": "73c180912981d13e1ce5baf5ef16bc6b",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nWe need type what is real t and I will use it based on drop down or lookup. Column drop down and lookup are very \nclose synonyms so it's almost the same. The title for our new lookup column will be type. Inner code will be USR, \ntype and confirm. But lookup is not present here. We do not want to use similar lookup reality type made for query \nCQI purpose. So I plan to make a fully separate solution and that's why we can make new lookup from scratch as \nyou can see system helps us with automation. We can create. We can ask system to create new lookup. It will be \nrealty type and code will be USR reality type.",
      "chunk_type": "paragraph",
      "chunk_index": 66,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 125,
      "token_count": 150,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 66
      }
    },
    {
      "chunk_id": "27709bb6c86a471810466080a323f3d8",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nNo classic UI words here so it will be our freedom usage reality type, title and code are necessary because system \nwill use it to create new lookup object inherited from base lookup. It will also register it as lookup in lookups section. \nIt will provide data items for this registering and the only missing part will be lookup contents. We will do it later. \nOkay, type is clear. One more thing that we will need in our section is offer type because some reality objects will be \noffered as for sale, others for rental. So we will have an offer type lookup to specify exact offer type. Is it sale or \nrental? I will call it offer type. This is a title code will be something like USR offer type and we confirm it.",
      "chunk_type": "paragraph",
      "chunk_index": 67,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 138,
      "token_count": 162,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 67
      }
    },
    {
      "chunk_id": "7ff62f9c1569e7ab10bf6f9e746ac70d",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nNo lookup for this so we can create one from scratch realty offer type I will do some poses for some of you like \nMonica or macho or rakhi who confirmed that you do it just along with me. Okay, save it. And I also just was quite \nquick. Normally by default lookups will be shown as simple drop down list. But in case if you select something \ncomplex like big entity like contacts or accounts, it may be useful to use full scale selection window for the offer \ntype. We will have only two possible values like rental or sale. So that's why drop down will be perfect. We need to \nscroll down and set up element code here. Maybe we will not use USR. So you can just use any unique string here. \nSo offer type will be also quite unique.",
      "chunk_type": "paragraph",
      "chunk_index": 68,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 146,
      "token_count": 174,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 68
      }
    },
    {
      "chunk_id": "e8c491a4ef8ec0f8aef039cc596ec122",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nThis is just to make it more, let's say friendly when we will work with code part. Okay, so what else? Maybe we can\n\n--- Page 14 ---\n\njust practice with a single text column and it will be just a comment 250. Maybe it's enough for us. Okay, checked \neverything. Comment. Okay. And maybe one more example of a more complicated lookup with the selection from \nbig object. So let me show you one more drop down column. I will name this column manager. So it will be some \nmanager person who is responsible for managing data of this realty. Usrmanager will be our code lookup will be \nselecting from contact. And as a contact is a big entity, we may need some additional columns to be displayed, \nsome filters, sort order and so on. So big scale selection window will be good enough for this.",
      "chunk_type": "paragraph",
      "chunk_index": 69,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 150,
      "token_count": 187,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 3,
        "position_in_document": 69
      }
    },
    {
      "chunk_id": "6167fea9c55ee553a6d95e1f172c9800",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nGood, good option for this type of selection. And I can also make unique name here manager as a code. Okay, so I \nonly usually set four parameters, title code, we specify lookup and element code. Okay, for the very beginning this is \nenough. We have some required columns, some not required columns. Unfortunately we cannot use default value \nsetting here. So if you want to extend and make your solution more, let's say well customized, you will need to go to \nobjects anyway. So let's save our changes. Now. You will see what has been changed here. We can track what is \nhappening at application hub part, or we can go to our configuration section, reward it. Maybe we already see here. \nOkay, let's still reward. So you will see your changes in configuration section. Now this page editor will finish its work \nsoon.",
      "chunk_type": "paragraph",
      "chunk_index": 70,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 148,
      "token_count": 189,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 70
      }
    },
    {
      "chunk_id": "5b382b9c64d4b7f43490e1ee07240efb",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nIt takes time because system saves client module. It saves changes to object, it publishes objects, so it takes some \nsignificant time and that's why it takes a while. Okay, everything was saved. We can close this editor. You can check \nwhat's happening with our new package. You can see it here, or if you prefer to manage from application hub you \ncan find your reality application. You can see two pages here and you can see one object. So main object realty offer \ntype and type are created as a supporting lookup. Objects and advanced settings will show us all packages. Here we \nhave only one package and usually I prefer to look at it sorting by descending order of date of modification because \nusually you need to look at the most recent changes first.",
      "chunk_type": "paragraph",
      "chunk_index": 71,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 139,
      "token_count": 164,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 71
      }
    },
    {
      "chunk_id": "8c3147358be548ee4d4d890627c5e5d3",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo you see that just from 20 minutes of our work we have a lot of items already created and including main entity, \nincluding some objects that are used for lookups. You can also check if you go to lookups section, you will see \nrecently registered lookups automatically. So system also made this registering as data items. So it's quite smart. \nAnd when you create lookups with the help of page editor, it will automatically create object for you. It will \nautomatically register this object as lookup and create corresponding data item. The only missing thing is contents \nfor this object. Any questions please? You're welcome. If you so if you have any questions, any notes, I'll be happy to \nhear. Now it's time for us to think about some lookups. Okay, offer type probably is not so difficult. We have only two \npotential offer types.",
      "chunk_type": "paragraph",
      "chunk_index": 72,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 149,
      "token_count": 189,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 72
      }
    },
    {
      "chunk_id": "54099b1e7568d9d128bf0757ac809c31",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nThe most commonly will be using sale offer type and another one will be rental. So we have only two offer types in \nour system and when we have data binding tool it will be extremely easy for us to save all data into our target \npackage. And that's IT system creates thanks to data binding tool it creates corresponding data item automatically, \nhelping us to save our time and do not perform some boring work. So here you can see all the records of our lookup \nwere saved as data item. This is very efficient. One more thing which I wanted to show you is how you can use some \ntools like export and import. Here you can see a lookup made for classic UI. I want to steal its data. Moreover I will \nsteal their ids. Let me show you what I'm planning to do.",
      "chunk_type": "paragraph",
      "chunk_index": 73,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 150,
      "token_count": 173,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 73
      }
    },
    {
      "chunk_id": "08b6ceb71a0fa218e819c0778c40c34b",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo let's do one more column display id. Column. I want to display it. I don't need description at all. Okay, save such \ncolumn settings. So we have four records here for our classic UI, just for the demo purpose. So you should not do \nthis constantly. But. Oh Andrea, no problem. You told me you had some issues with this performance. So if your\n\n--- Page 15 ---\n\ncolleague is still here, we can try to find out the reason why it is slow. Thank you. Thank you Andrea. Ok, so I want to \nshow you a simple quick example how we can use standard tools for export and import of data. Export is very easy. \nWe can do export to excel, any creature list. It will create a file as xls six format and save it to your disk. Great.",
      "chunk_type": "paragraph",
      "chunk_index": 74,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 145,
      "token_count": 181,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 3,
        "position_in_document": 74
      }
    },
    {
      "chunk_id": "b594adc64566645f6a59843870ea2c91",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nThen we go to another lookup realty tape for Freedom UI section. And just for demo purpose I will show you how we \ncan import this data from file. Data import target object is already selected. We need to select file for our import. We \nneed to match columns and provide such column settings. As you can see, we have very similar columns names in \nfile and in our creature data model. That's why it was already automatically matched. Now I need to look. I need to \nshow you what this file looks like. And here you can see this Excel file. So it has first row with column titles. All other \nrows are representing some data. Such files can be easily loaded into creature matching first column titles with \ncreation columns of objects and it will be one to one import.",
      "chunk_type": "paragraph",
      "chunk_index": 75,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 145,
      "token_count": 169,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 75
      }
    },
    {
      "chunk_id": "4709de8369963760bf85aa051e9153ef",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nAnd if we import, we have to specify duplicate search rule. So what column will be used to check presence of data. \nOkay, we can do it very technical way and check by id. In real life, when you import data from excel, you may not have \nthis id. You will need to select some, let's say reliable enough columns which should be quite unique. In my case, id \nwill be the best option for making such checks. And now you can see import was fully done. We can reload this data. \nSo we imported four data rows from file into our rhythm Ui reality type object. We can also use data item data \nbinding, automatic creating of it and data was added successfully. Now you see bound data. All four records were \ncreated correctly and saved it to our target package. Great.",
      "chunk_type": "paragraph",
      "chunk_index": 76,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 146,
      "token_count": 175,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 76
      }
    },
    {
      "chunk_id": "f12c41cb51ec2169c3f475bb96c7444e",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nNow we can do more steps with main object setting because I want to use some additional features available at \nobject model. Let's go to objects and I want to show you default values for our section. Unfortunately we cannot set \nit from page editor, so we can go to object editor. For example, for the manager we can set default value as a special \nsystem variable, current user contact. So if a person creates some reality record, it will be considered, this person \nwill be considered as the manager. Current user contact. Okay then by default. Oh no, it's okay. Everything is okay. \nNo errors. I just thought I have a mistake here. Okay, when we create new record, for example, we think that the most \ncommon, the most frequent scenario will be working with houses.",
      "chunk_type": "paragraph",
      "chunk_index": 77,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 140,
      "token_count": 172,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 77
      }
    },
    {
      "chunk_id": "a9a526cd6f35bce7c5d6598d55d99f72",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo we can make default value for created reality records as a constant. And we can take constant from lookup to be \nhouse. So this will be our house. And when we create new record, this default setting will be done. If we had some \nnumbering we can also use auto number feature, but for reality I just did not use it so far. Offer type we can also set \nas constant. And let's imagine that the most frequent scenario will be sale. So houses for sale is our primary \nbusiness. That's why when we create new record we will have such default settings. And when we finished we can \nclick publish which will make save and publish. Now you may ask me why we do so many of customizations here. \nWe need it for our future examples. And now it's over.",
      "chunk_type": "paragraph",
      "chunk_index": 78,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 145,
      "token_count": 173,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 78
      }
    },
    {
      "chunk_id": "b28fb839e84a594a57481df4623c0e6f",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo we made our section and we can check how it works. Going to our realty section or going to my applications \nrealty and opening its page, you see previous data. We have some price for department, some area, maybe it's in \nsquare feet. So that's why we have such data. It will be an apartment for sale and some default contact. Okay, so \nwhat happens when we create new record new, you see, default value is set for type for offer, type for manager, \nsome settings, test, comment and we can save it. So having default values really helps us to work with it. Oh, takes \ntime. Probably something happened. Let's check. As you can see, browser console is full of some debug messages. \nBut I think in our case it's not so very critical. So let's try to reload data and check. Yeah, it was saved normally.\n\n--- Page 16 ---",
      "chunk_type": "paragraph",
      "chunk_index": 79,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 156,
      "token_count": 199,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 2,
        "position_in_document": 79
      }
    },
    {
      "chunk_id": "fe0c3b1947eba206982a6444ecf20b31",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nHouse in Seattle was saved normally. Okay, we have some kind of basement for our future study. And now I need to \ntell you something that you will consider as boring. So we need to go deeper. Okay, a couple of words for list part \nbefore we go deeper. List pages also can be customized so we can go to edit it. I just found this edit page button \nand list page also can be customized. We can hide unnecessary columns, we can display columns that we need. For \nexample, we need, okay, we already have name, we need price, type, offer type, maybe date of creation here and area \nin the same order such columns will be displayed. And that's it. If necessary, can also use some coloring stuff. You \ncan try to make some customization with setup, lining colors, spacing and so on.",
      "chunk_type": "paragraph",
      "chunk_index": 80,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 148,
      "token_count": 182,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 80
      }
    },
    {
      "chunk_id": "dcbc2b06d33482ca5d74b8ee1947b846",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nBut now I try to keep it simple, everything as is by default. So I only have some set of columns set by default. Reload \nthis page so you will see default column settings for me. Okay, great. Looks very good. If we copy some data, you \nwill see that almost all columns are copied and that's it. So we can easily manage this. So what we have to do now, \nthis is customization level, doesn't require any programming. And of course you probably would like to make much \nmore significant and more, let's say technical things on this client side and the page level. I plan to explain how \ncreation made this user interface and how we can make changes in it using programming. And first of all I need to \nexplain you how client modules are designed and in order to check it out.",
      "chunk_type": "paragraph",
      "chunk_index": 81,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 149,
      "token_count": 177,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 81
      }
    },
    {
      "chunk_id": "c5d21976c7b37b891771a9e5bb316fea",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo let's select our package, select only client modules and for example, let's try to open form page. If you click on the \nform page directly on its title, you will see page editor, not a program code. You can find program code part of it. If \nyou click on this source code, don't save source code will be opened. Then we have to close form page because \nhaving separate editors for the same item opened simultaneously, it's not a good idea. You can accidentally save in \none of the editors and you will lose changes made in another. So it's better to keep only one part at a time, only page \neditor part or on the code part. Now you see quite strange JavaScript code which is really hard to understand what it \nis. And also I can show you how you can open the same code quickly.",
      "chunk_type": "paragraph",
      "chunk_index": 82,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 152,
      "token_count": 181,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 82
      }
    },
    {
      "chunk_id": "4bcf33f0375b777bdf5bfcbf11b13d7c",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nYou can go to write part. This is three dots button called actions. And then you can open source code directly \nwithout opening page editor. So this is some kind of code. And now I need to explain you what we are looking at and \nto explain you some concepts used at creature platform. So the language for this code is JavaScript. But as you may \nguess, this code represents more like settings than executable stuff necessary to build this page. And before we go \nin deeper, I need to explain that creation client side is fully dynamic and generated in runtime. So if you will inspect \nany part of the client side page, it will show you some pieces of HTML.",
      "chunk_type": "paragraph",
      "chunk_index": 83,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 125,
      "token_count": 144,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 83
      }
    },
    {
      "chunk_id": "840191431e83b5523304ab98dc285a78",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nYou see a lot of divs, a lot of some layout settings, a lot of classes, and also you will see plenty of Ng names here \nstanding for angular. So in Freedom UI, its undercover framework which helps us to build and display components is \nangular. So if you have some angular knowledge and experience, you will find it easy to make your own new \ncomponents if you need it for your solution. I prefer to use as much as possible for base product standard \ncomponents because creating new components usually take significantly longer without clear, let's say profitability \nfor end customer. So now you see big complex structure of HTML. It's really hard to make it from scratch and luckily \ncreation is capable to build such pages itself using some settings about how page should be built.",
      "chunk_type": "paragraph",
      "chunk_index": 84,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 141,
      "token_count": 164,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 84
      }
    },
    {
      "chunk_id": "01da4a1ea20da7cf7cf0ea758814efea",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo this is result of work of big number of JavaScript files and such. JavaScript files consume information about\n\n--- Page 17 ---\n\ncontrols, about settings, about what they have to build. And thanks to base product architects, we do not need to \ntype or develop such code ourselves. So creature pages are made dynamically, in this case with the help of angular \nframework and using some page settings. Okay then I need to explain you one more thing about structures and \nabout JavaScript code inside of creation. So as you can see, creatio user site user pages client module client part is \nbuilt by big number of JavaScript files, so we can try to find how many files are used there. So opening any page, go \nto sources, start to investigate structure of sources.",
      "chunk_type": "paragraph",
      "chunk_index": 85,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 138,
      "token_count": 164,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 3,
        "position_in_document": 85
      }
    },
    {
      "chunk_id": "aacd639afccdaa3a425fdbdb31b919bd",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nHere you will see plenty of files and what is really frightening, then you will see a lot of configuration items here. So \nprobably several hundreds, maybe up to 1000. And it's important for you to understand that client side of creature \nconsists of big number of relatively small pieces of code. So quite big number of JavaScript sources. And if anyone \nfrom you has any experience with JavaScript sources and JavaScript apps, of course obviously you understand how \ncomplex to keep this structure to manage it. And of course developers of creation also felt this difficulty and they \ndecided to use some world class standards to manage JavaScript application. In order to make it efficient, \ndevelopers decided to use special concept AMD concept let me try to find you some articles at academy for this. \nLet's search for AMD.",
      "chunk_type": "paragraph",
      "chunk_index": 86,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 143,
      "token_count": 170,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 86
      }
    },
    {
      "chunk_id": "7195429422dd9270aba6048824bed075",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nWe'll find some articles Academy AMD modules module overview yes probably this one is good article explaining \nthis, but also this concept can be found at some common sources like Wikipedia. So AMD stands for asynchronous \nmodule definition. So this is an idea of splitting of all your JavaScript application into parts code modules and make \nsuch modules capable to be loaded separately from other modules and asynchronously. And let's that's how we can \nuse modern browsers, multitasking tools and finally a synchronous load of modules will give you much better \nreceived performance of your JavaScript app. So main ideas of AMD is split of your JavaScript app into parts. Such \nparts are called modules and organize asynchronous load of such modules only when they are necessary. We have \nspecial framework which keeps an eye on this and this framework is require G's.",
      "chunk_type": "paragraph",
      "chunk_index": 87,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 146,
      "token_count": 169,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 87
      }
    },
    {
      "chunk_id": "f9624a81aac63355cb4a1a77370366a0",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nQuite simple and very old framework require G's. You can read more about require G's, probably you can find it, \nrequiregs.org probably can find its original page, explain explanations and so on. And this is quite old framework still \nworking and its main task is to keep in memory such modules, organize loading of modules, organize module \ndependencies and creature users require G's so we can try to find it like this require G's version. Now you can see \nversion 235. So required G's is used in creature and its main purpose is to keep and handle all such client side \nmodule structure in browser memory, providing possibility to load only necessary modules when they are requested \nfor certain page and which makes quite good performance because in total our client side now has probably 1000 of \nmodules, 1000 of small JavaScript files.",
      "chunk_type": "paragraph",
      "chunk_index": 88,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 146,
      "token_count": 179,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 88
      }
    },
    {
      "chunk_id": "4e19fb9c590abef69997b25760d481e0",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nBut when you open any page, system needs only some part from it. For example, it needs only 100 or maybe 200 \nmodules. Required G's helps to load only necessary modules by the help of by the analyzing of definitions of such \nmodules and so generally required J's is main under cover framework for organizing of executable JavaScript code \nin creation client side and required J's has its own requirements for how such JavaScript code should look like and \nthat's why we are coming to answer of why our client module code looks like this. This is a result of use of required \nG's framework and the first command that you see here, it's a function define. This function is calling required \ngsmethod and it transfers some arguments. First argument is very important. This is unique module name \nrepresented just as string by the way.",
      "chunk_type": "paragraph",
      "chunk_index": 89,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 148,
      "token_count": 177,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 89
      }
    },
    {
      "chunk_id": "b84605b0ea812716cb74a9be3a6849f4",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nAlso client module has its own schema properties, so properties of changeable item saved in creation configuration.\n\n--- Page 18 ---\n\nIt has its own code localizable title information about parent client module so it could be used for inheritance and \npackage where this client module is saved. So code of your client module must be matched with the name of the \nclient module in your code. If name will be not the same as code, this will not work. So first argument here is our \nmodule name. This is just a text. Second argument is optional and usually it's empty. But this is an array of other \nmodule names that are necessary to load before starting our module. So that's how we can set up that for this \nmodule we need some else and system will load them 1st 3rd argument here is the most important. This is so called \nfactory function.",
      "chunk_type": "paragraph",
      "chunk_index": 90,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 156,
      "token_count": 186,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 3,
        "position_in_document": 90
      }
    },
    {
      "chunk_id": "6f345b528ddce4ae2dba5d4be4279ac1",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nThis function has a main purpose to return you some data object. As you can see it returns JavaScript object, \nincluding in our case six properties. This JavaScript object represents necessary information which system needs to \nknow about how to build our page. And this information in general was created with the help of automation tools of \npage editor and that's why we did not program this code ourselves. So most of this was done by page editor. But you \nstill need to know and let's say navigate here properly. I will quickly explain what are these properties? And now you \nprobably will not remember this, but it's just for you to like for your reference. So this JavaScript object in general \nrepresents information about page view.",
      "chunk_type": "paragraph",
      "chunk_index": 91,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 130,
      "token_count": 153,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 91
      }
    },
    {
      "chunk_id": "435157d4489d6284f7eccff93a0617b2",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nConfig diff represents visual part of the page and physically this is an array in JavaScript and this array includes set \nof items. In each item represents one control on the page. Let me show you a simple example. This is control for \nname column. So here when we look at this name we have some title and we have input field. So in total it's called \ncontrol. So some tool on the page which we can use for data input and output. And this control has its own settings \nwhich we can provide inside of view config diff array. So this item represents name column. You can see values, \nsettings, some different properties and layout. Config represents position and size, type represents the way the type \nof the component used for input and output.",
      "chunk_type": "paragraph",
      "chunk_index": 92,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 138,
      "token_count": 161,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 92
      }
    },
    {
      "chunk_id": "6341305f25cde05ec154f2e59c12a6cd",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nWe have a label, we have some other properties, parent container, name and that's all. It's interesting to mention that \nhere we have some settings which represent connection between our control and physical data field connected and \nsaved in memory. I will explain this a bit later. Now you should remember that view config represents set of \ninformation set. So it's just array of JavaScript objects. And each JavaScript object represents information about \ncontrol that you want to see on the page. So for price, for name we have one control, for price, another control and \nso on. You can edit it if you want, but you should be very careful keeping syntax, keeping breakage, keeping \neverything correct and if you do something incorrectly it will not work and we have no any intellisense or \nautocomplete tools which will clearly show you where you did some wrong settings.",
      "chunk_type": "paragraph",
      "chunk_index": 93,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 151,
      "token_count": 184,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 93
      }
    },
    {
      "chunk_id": "728cc594951e9730513a507de4c19db6",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nFor example, if I accidentally do something like this, system will notice it and it will not show me where I have a \nmistake. So you should be very careful working with this part and 100% of such settings are now performed with the \npage editor so it's not so hard. Not so difficult to do this customization with page editor and then looking at this \ncode. Okay, in general, view config diff represents UI structure set of user interface items that you plan to see. Okay \ngreat. Let's move on to other items. After view config we have view model configuration. This is a bit more difficult to \nunderstand because viewmodel config is information about so called attributes. Attributes are variables at the page \nlevel. So like storage items, like memory cells.",
      "chunk_type": "paragraph",
      "chunk_index": 94,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 136,
      "token_count": 166,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 94
      }
    },
    {
      "chunk_id": "2a7973374a5bb1b867691b49b48fd380",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nFor page level they have special names generated by application automatically and once I tried to change them, it \nturned out to be hard coded each time you create them. So it's not a good idea to make them better. If it looks a bit \nugly like this, you should not try to change it because it looks like page has also some metadata saved separately\n\n--- Page 19 ---\n\nwhich has corresponding names inside of it. And if you start to beautify with no any part. So if you start to edit your \nattributes, probably your page will not work anymore. So I recommend you not to remain attributes. Each attribute \nrepresents some variable on the page and usually attributes are connected with corresponding data columns. Data \ncolumns are parts of our object and object has its own invisible client side representation in memory.",
      "chunk_type": "paragraph",
      "chunk_index": 95,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 148,
      "token_count": 173,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 3,
        "position_in_document": 95
      }
    },
    {
      "chunk_id": "aa7f5e36a8187dfbac00215c453b7fcc",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo attributes are used to keep some data and connect with controls. Then finally we have model config which \nrepresents set of data objects used with our page. In our case, only one data object is used. Reality reality entity is \nused to work with our page. But why we have so complex settings here is that freedom UI pages can operate with \nmany data objects and many data lists at the same page. Unlikely to classic UI freedom UI page can be quite more \ncomplicated and may include many data objects at it. That's why this model config will be a bit more complex than \nyou expect. Handlers, converters and validators areas where we can do some programming. We can handle some \nexisting events, so we can make own custom handlers for some certain events and make some additional work for \nit.",
      "chunk_type": "paragraph",
      "chunk_index": 96,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 146,
      "token_count": 171,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 96
      }
    },
    {
      "chunk_id": "20aeeddd8252921ed736d7cb08a4fe77",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nWe can do conversion between columns like recalculations, but personally I prefer to do it inside of handlers and \nvalidators are used to perform some checks at client side to ensure that values provided in the columns are correct \nand in case if they are not correct, it's possible to display error messages and prohibit saving of data. We will also do \nsuch examples later. So if you ask me about where we will program here, the most common answer will be we do \nour own handlers. But also please note, you probably noticed special text comments here in this code before and \nafter different settings here and even here. So you can see that we have some special comments. Such comments \nare very important.",
      "chunk_type": "paragraph",
      "chunk_index": 97,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 128,
      "token_count": 149,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 97
      }
    },
    {
      "chunk_id": "b0ff92c0cc67679b933284c834ea522a",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nPlease do not modify do not remove them because they are necessary for page editor it's unusual, but page editor \ndoesn't search for the name of the object here or name of the array. Page editor searches for such system \ncomments and then takes code between and analyzes it and representing page design for you. When finished and \ndata changes are saved, page editor creates new set of items like Div array for example and saves it into this code. \nSo such text comments are used as text markers. They are necessary and they are vital for page editors. So please \ndo not corrupt them, do not change, do not remove. They should be as is okay and possibly you have some \nquestions about strange names view model and model.",
      "chunk_type": "paragraph",
      "chunk_index": 98,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 133,
      "token_count": 154,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 98
      }
    },
    {
      "chunk_id": "7b9c022c85e680435e676135cd2c66ed",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSome of you who studied somewhere at university or who studied yourself with the way how UI can be programmed \nprobably know about architectural patterns and maybe you know a pattern named MVC and here we have a pattern \nnamed Mvvm. Let me explain what it is we can study and we can find some simple articles at Wikipedia about it. So \nMvvm this is an architectural pattern. So like some standard way of implementing things in programming which \nhelps us to make and to solve some typical tasks with the typical way. So we have typical solution for this. We have \na task to manage our client side application in our browser and mainly programmed in JavaScript. And there is a \ngood practice to separate visual part from logical part and from data storage part.",
      "chunk_type": "paragraph",
      "chunk_index": 99,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 139,
      "token_count": 157,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 99
      }
    },
    {
      "chunk_id": "35b97b6c065b4809c036f0258805d825",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nAnd in MVVM pattern it's recommended to separate visual part and code view separately, store data values and call \nit model and also make a separate controller unit which is called view model. And Viewmodel has a lot of \ninformation about view. Viewmodel knows view structure and Viewmodel manages our view. It manages controls \nand also Viewmodel is responsible for handling events that happens with view controls. For example, user clicks on \na button or user inputs some data. The reason why developers used this architectural pattern is to make application \nmore manageable, to make it easy to develop or replace view, to make it easy to extend our model and to make more\n\n--- Page 20 ---\n\nor less structural way to handle all events and make business logic inside of viewmodel some traces of it can be \nfound in this text.",
      "chunk_type": "paragraph",
      "chunk_index": 100,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 146,
      "token_count": 174,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 3,
        "position_in_document": 100
      }
    },
    {
      "chunk_id": "2e60036d36e0bc85aa521072c6764dd5",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nView config diff represents view structure and that's why it's called view config diff, not just diff. By the way, the word \ndiff here is probably shortage from a difference and means that it's information about only some changes. And it \nmakes sense because our module is not made from scratch. Our module was made as inherited item from some \ntabbed pages left area base platform client module. So client modules as objects, they also can be inherited from \neach other. And diff array represents changes in comparison to previous parent item. That's why possibly such items \ncalled diffusion and not just kind of list which represents full set of items. This diff includes only changes and some \nbase template items like buttons, menu items and so on will be not listed here because they are supposed to be \nused by the inheritance.",
      "chunk_type": "paragraph",
      "chunk_index": 101,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 146,
      "token_count": 172,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 101
      }
    },
    {
      "chunk_id": "050c4e18726b36b1e7ada1738b58a920",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo when client side modules will finally form final page structure, they will take base parent one, they will apply child \nitem like this setting, and finally they will analyze base diff child diff and they will make all of the components \naccording to parent and child items. Okay, so view config div represents visual part represents view in mvvm pattern \nmodel, config represents information about data entities used for our page and also view model config. I think partly \nalso works about the same because this is registering of available variables that we can use on the page and \nimplementation of handlers. Implementation of events can be done inside of handlers and also is already performed \nin parent modules. In parent template pages like tab, the page with left area and such pages can be nested. It means \ninheritance can be done many times.",
      "chunk_type": "paragraph",
      "chunk_index": 102,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 148,
      "token_count": 171,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 102
      }
    },
    {
      "chunk_id": "dfd4d464059d0c61b7973eb473ac95a2",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nIt looks like quite boring thing. So let's do some practical step for today and I will show you very simple hello world \ncomplexity level example. So let's do some simple example. But first as we want to make a button, it's better to start \nmaking button with the help of editor. So let me show you how we can make a button to show something simple but \nworking and programmed and go to settings. Edit page edit page I can add a button to my page, scroll down here, \nyou can see a list of existing columns, we can add new columns and we have a lot of components. Button probably \nwas the first component supported in Freedom UI page. So we can put our button somewhere here, change its size, \nchange its color or maybe this.",
      "chunk_type": "paragraph",
      "chunk_index": 103,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 141,
      "token_count": 167,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 103
      }
    },
    {
      "chunk_id": "2ff090c9fbf347ecf48edf475916f0a6",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nYou can make some kind of funny caption like push me and if you want you can translate this title into other \nsupported languages and by default, as you can see we have a lot of supported actions like open records, like saved \ndata, close page run business process and so on. Once I started to count I found 24 supported actions here. So I will \njust randomly select some action and then I will replace it with something else. By the way, what's happening here? \nMy title looks a bit strange. Okay, I want to use icon. Something is wrong with my title here. No, it's okay. Okay, some \nbug period. Okay, push me and let's select some icon that will represent this idea. Okay, would it be like this?",
      "chunk_type": "paragraph",
      "chunk_index": 104,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 134,
      "token_count": 165,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 104
      }
    },
    {
      "chunk_id": "3aa1388bb7f951d31e090727eedddcd8",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo we have more than 60 supported icons here and okay, so and I also set some dummy action. I plan to change it \nlater. I don't have any support. Net menu. No any special conditions. We will study it later. Element code okay, let's \ncall it push me button. Okay that's all. We can save it now. After doing this we can go to the code in order to find our \nbutton. Let's go to the code source code, then we find our button. Let's call search for push me and we'll do control f \noh you see new editor search function here. It was different in previous versions. Okay, would it be like this? Thanks \nto our element code we can easily find push me button by code and this diffuser array item for view config \nrepresents button settings.\n\n--- Page 21 ---",
      "chunk_type": "paragraph",
      "chunk_index": 105,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 148,
      "token_count": 185,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 2,
        "position_in_document": 105
      }
    },
    {
      "chunk_id": "a41425f9b27ab0c9a726cee734614781",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nWe have caption, we have type and also we have clicked setting. Let's remember line number 52 and this is setting \nfor some tenders tender which is already programmed somewhere in parent templates, parent components and \nsystem knows how to implement this. Now we can go to handlers part and make our own handler. I already have \nsome example because making it from scratch is a bit difficult. So I will show you examples for freedom Ui button \nand this is example of a button. I will share it with you in our zoom and also I will put it into my handlers collection \nmanually. So what I do is providing setting here in my handlers collection handlers array. Technically this is an array.",
      "chunk_type": "paragraph",
      "chunk_index": 106,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 127,
      "token_count": 149,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 106
      }
    },
    {
      "chunk_id": "d662fb3b6c0f110f2ecf6c3eb801fc75",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nBy the way, it looks like this editor was seriously changed because previously we had some unnecessary warnings \nrelated to new JavaScript comments and features and now it looks like in this editor there are significant \nimprovements related to the way how code is managed. So thanks developers. Version 813 now had a new type of \neditor here. Okay, this is my handler physically is also JavaScript object with three. Now we have two properties \nrequest and handler. Property. Request property represents the name of my handler so it's kind of identifier which I \ncan use to assign inside of view config items. So it's kind of inner technical name of my procedure and handler itself \nis asynchronous function which can do something useful. For example, we can do console output here we can use \nembedded classic UI front end core JavaScript framework made by creation called Terrasoft.",
      "chunk_type": "paragraph",
      "chunk_index": 107,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 151,
      "token_count": 179,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 107
      }
    },
    {
      "chunk_id": "6ed3a524a56b13d29a886761a9b3c763",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo when you see Terasoft here, you should understand this is a JavaScript core framework, quite old but still \nsupported. You can use true information from it to show some pop up messages. And also I plan to show you how \nyou can manage data, read data and write data. We have a special procedure to get attribute values. Now let's \ncollapse view model con collapse diff part. We already remember line number 52, so let's look at view model \nconfiguration. We have set of attributes and for the price we have this name of the attribute. So copy it, go here and \npaste it. That's how we can correctly get price value inside of our JavaScript code. We can do console output to \ndisplay this price, and we can also work with this price and show how we can set value into it.",
      "chunk_type": "paragraph",
      "chunk_index": 108,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 147,
      "token_count": 177,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 108
      }
    },
    {
      "chunk_id": "a88ff29bef07fd4b7b9bf66393824c1f",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nRequest dollar context attribute name equals and then we will just take 20% of this price and save it again. We have \nto normally analyze our code inside of a synchronous function, allowing other potential handlers to be started. So \nthis is also very typical end of handler code. In your case, you will have to change this line to find corresponding \nprice attribute and also to do it with setting value. So this example will show us message in the console, it will show \nus pop up message, it will take price value and show proof of it in the console. Then it will take some part of it and \nset to the price column again. And that's all we can save this code. Please note, saving is important from this \nmoment. It's better to close this page and then we go to check how it works.",
      "chunk_type": "paragraph",
      "chunk_index": 109,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 151,
      "token_count": 177,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 109
      }
    },
    {
      "chunk_id": "f4df6ef7e06e2ca9d793cd08d93c317d",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nIn most of cases probably it makes sense to reward the page, but in most of cases browser cache doesn't really \nprevent us from working, so it will probably work normally even without revolting the page. So open it again. Now we \nsee our button enable browser developer console f twelve or control shift I. There are plenty of warnings, as you can \nsee here, they are minor warnings, and it's because freedom UI page is not ideal now, so system probably will be \nfixed later. Now it's not a serious issue, so let's try to click on the button, nothing happens or I just do something \nincorrectly. Oh yeah, it was my mistake, sure, because this is my handler, but my button by number 53 still performs \nprevious action for it. Here is push me button. Here is clicked setting. So I just forgot to set it properly.",
      "chunk_type": "paragraph",
      "chunk_index": 110,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 152,
      "token_count": 189,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 110
      }
    },
    {
      "chunk_id": "dbde4074d9a312d4e3e7b264df3061bb",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\n--- Page 22 ---\n\nOkay, here in my button I have clicked property and I have to specify my own custom handler name here. That was \nmy mistake, I just missed it. So I have to save and fix and save it. I will also call copy this piece for you. You config \nprobably I should not copy big part of it, so I only should do something like this. So you will focus only on the most \nimportant thing. Okay? And we can close open probably now it will work. Yes. You see, I did not reload the page, but \nit works well. So buttonworks shows us pop up message, takes original price, takes 20% of it and saves as new price \nhere. And we have no error messages, no errors in network tab, no errors at the console. So everything looks very \nvery good, smooth and no mistakes. Let's check again.",
      "chunk_type": "paragraph",
      "chunk_index": 111,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 156,
      "token_count": 194,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 2,
        "position_in_document": 111
      }
    },
    {
      "chunk_id": "678b82be322ad7b9cc30a7b526cebc78",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSorry for safe I should use push me this one. Yes, you can see now price changed. We have all the proofs here and \nno errors. So it looks like everything works according to the plan. This is example of hello world application. So we \ncan do some own programming inside of creature client side page. And of course later we will do a bit more useful, \nmore meaningful steps. But now this is an example of how you can do your own code, how you can do some display, \nhow you can access data from your page, do something and how you can save data. Please note that access data is \nused with await operator because some code behind this method. It looks like this is something like a method. And \nfinally it runs some asynchronous functions behind it and we need to use a weight operator here.",
      "chunk_type": "paragraph",
      "chunk_index": 112,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 152,
      "token_count": 176,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 112
      }
    },
    {
      "chunk_id": "7e00f951e9e5617218bdaeabe4a93475",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nIf you do not use await, you will have a bit different structure at the end and you will still have to dig into object that \nyou will get from it. So recommended option is like this, await request, doer context and then your attribute name. \nOkay, that's all for today. We sat a bit longer than usual so our session is over. Tomorrow we will do more \nprogramming examples, you will see more useful things with recalculation, with validation, and you will see how \nmore different settings you can program on the page level. Thank you very much for your time and documentation \nabout the frameworks of client side. Yes Adrian, I can show you where you can find this documentation in creature \nacademy guides for developers. You can find front end development in classic UI and then you will see G's classes \nreference.",
      "chunk_type": "paragraph",
      "chunk_index": 113,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 148,
      "token_count": 179,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 113
      }
    },
    {
      "chunk_id": "3f3533b5344e7fbb9bb8b3ead563600b",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nThis is exactly this API for this telescope framework. So you can use some search here for example, we used the \nmethod to show information. So method show information. We can search here, show information and you can see \nexamples of it, you can see source and you can see all the arguments. Show information and probably it's not the \nbest example, but. So finally you can try to get some use of it and you can see some help, stuff that can let you \nunderstand how it works. So Adrian, thank you for your question. And also I heard some more questions, Carlos. Yes, \nyes, about performance. Sorry, no, please, please ask questions, please.",
      "chunk_type": "paragraph",
      "chunk_index": 114,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 118,
      "token_count": 150,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 114
      }
    },
    {
      "chunk_id": "d73cbc1de51303017c3702356a9838e7",
      "document_id": "7c589e42742e",
      "content": "# Speaker 2\n\nMaybe it's about my problem of performance of the application in my laptop.",
      "chunk_type": "paragraph",
      "chunk_index": 115,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 16,
      "token_count": 20,
      "context": {
        "heading": "Speaker 2",
        "paragraph_count": 1,
        "position_in_document": 115
      }
    },
    {
      "chunk_id": "11bc385308467106f5590373a64cd35f",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nOh, yes, we can do this. Would you like to record this part also as part of our training or you prefer to keep it more \npersonal and private so we can start recording if you want.",
      "chunk_type": "paragraph",
      "chunk_index": 116,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 40,
      "token_count": 47,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 116
      }
    },
    {
      "chunk_id": "da3e7febd79dae56e546f99002b5dee3",
      "document_id": "7c589e42742e",
      "content": "# Speaker 2\n\n--- Page 23 ---\n\nYou can. I have no problem to me, no problem.",
      "chunk_type": "paragraph",
      "chunk_index": 117,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 17,
      "token_count": 24,
      "context": {
        "heading": "Speaker 2",
        "paragraph_count": 2,
        "position_in_document": 117
      }
    },
    {
      "chunk_id": "5c025c19229cc87aa774e55491a99782",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nOkay, so I will stop sharing. Our main part of the session is over. Thanks all for your attention. Today we will have \nsome small session, Carlos, to detect potential performance issue problems on their environments. So thanks all for \ntoday's session. I will stop sharing. Recording is still on. So Carlos, please. You're welcome. Show me please your \nenvironment. I will try to help if you have a full zoom client better because you can manage your screen.",
      "chunk_type": "paragraph",
      "chunk_index": 118,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 82,
      "token_count": 104,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 118
      }
    },
    {
      "chunk_id": "1b743a45898b8c65065355c7be253ce9",
      "document_id": "7c589e42742e",
      "content": "# Speaker 2\n\nI share my screen with you?",
      "chunk_type": "paragraph",
      "chunk_index": 119,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 9,
      "token_count": 12,
      "context": {
        "heading": "Speaker 2",
        "paragraph_count": 1,
        "position_in_document": 119
      }
    },
    {
      "chunk_id": "2721b21520fda1ee5aa5bd3c787ebdd1",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nYes, yes, please. Thanks all of you, thanks for all information and your questions. Yes, please show me your screen, \nplease.",
      "chunk_type": "paragraph",
      "chunk_index": 120,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 24,
      "token_count": 35,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 120
      }
    },
    {
      "chunk_id": "116bdd955c66d93b7ebfc1514dc2f4cb",
      "document_id": "7c589e42742e",
      "content": "# Speaker 2\n\nYeah, sorry, I have two.",
      "chunk_type": "paragraph",
      "chunk_index": 121,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 8,
      "token_count": 13,
      "context": {
        "heading": "Speaker 2",
        "paragraph_count": 1,
        "position_in_document": 121
      }
    },
    {
      "chunk_id": "c90af42531b7937f21063051e3519c76",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nYou can show only one, but I. Okay, green share screen button.",
      "chunk_type": "paragraph",
      "chunk_index": 122,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 15,
      "token_count": 21,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 122
      }
    },
    {
      "chunk_id": "289239517783815a6365a1d701b8caeb",
      "document_id": "7c589e42742e",
      "content": "# Speaker 2\n\nIf I have two screens, so I disconnect one.",
      "chunk_type": "paragraph",
      "chunk_index": 123,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 12,
      "token_count": 16,
      "context": {
        "heading": "Speaker 2",
        "paragraph_count": 1,
        "position_in_document": 123
      }
    },
    {
      "chunk_id": "11e66f8514f323f72202aacad6b2a65d",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nYes, please select one. Okay, I can see a screen. Thank you. Nice. So please show me how your creature works and \nmaybe you can agree for request of remote control, so I can manage your screen more efficiently. So yes, you are \nusing the latest version? Yes, yes. We can start to investigate it with the help. By the way, what type of browser you \nare using? It's chrome.",
      "chunk_type": "paragraph",
      "chunk_index": 124,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 73,
      "token_count": 95,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 124
      }
    },
    {
      "chunk_id": "2aaedba396c33f7c92d5a070efe1757f",
      "document_id": "7c589e42742e",
      "content": "# Speaker 2\n\n--- Page 24 ---\n\nYes, it's chrome. Yes.",
      "chunk_type": "paragraph",
      "chunk_index": 125,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 11,
      "token_count": 19,
      "context": {
        "heading": "Speaker 2",
        "paragraph_count": 2,
        "position_in_document": 125
      }
    },
    {
      "chunk_id": "be5be7ae74d41d880b290aedc4f4a0cb",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nOkay, you try to run it once again.",
      "chunk_type": "paragraph",
      "chunk_index": 126,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 11,
      "token_count": 15,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 126
      }
    },
    {
      "chunk_id": "c12176c9552709dacd071756c7b9375e",
      "document_id": "7c589e42742e",
      "content": "# Speaker 2\n\nYes, I restart in many occasions and don't work. Good. So let me show you a little problem. For example, I go in \nadvanced settings, okay. And I create a business process, for example. And that is all. That's it.",
      "chunk_type": "paragraph",
      "chunk_index": 127,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 43,
      "token_count": 59,
      "context": {
        "heading": "Speaker 2",
        "paragraph_count": 1,
        "position_in_document": 127
      }
    },
    {
      "chunk_id": "06cc09390fb4b082c69735318e54eca5",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nOkay, so are you using Windows Pro or Windows home?",
      "chunk_type": "paragraph",
      "chunk_index": 128,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 13,
      "token_count": 17,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 128
      }
    },
    {
      "chunk_id": "afa7d9d93c979122b466818969ab4242",
      "document_id": "7c589e42742e",
      "content": "# Speaker 2\n\nI have windows.",
      "chunk_type": "paragraph",
      "chunk_index": 129,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 6,
      "token_count": 9,
      "context": {
        "heading": "Speaker 2",
        "paragraph_count": 1,
        "position_in_document": 129
      }
    },
    {
      "chunk_id": "843a6d88506016a0feca43cd4e422304",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nYou can find system information?",
      "chunk_type": "paragraph",
      "chunk_index": 130,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 8,
      "token_count": 11,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 130
      }
    },
    {
      "chunk_id": "25b4455973bd5596c4baffdd94e1c101",
      "document_id": "7c589e42742e",
      "content": "# Speaker 2\n\nYes, Windows homes.",
      "chunk_type": "paragraph",
      "chunk_index": 131,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 6,
      "token_count": 10,
      "context": {
        "heading": "Speaker 2",
        "paragraph_count": 1,
        "position_in_document": 131
      }
    },
    {
      "chunk_id": "f0f947ce937a7ba0114673798caea6e9",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nYou will have significant issues. Let me show you how you can fix this. But it will be not full fix, it will be just a \nworkaround which is not fully. Okay, let me show you. So in case, if you work on home, you should close your main \nshell page and sometimes you will need to now you will see, sometimes you need to even close the configuration \npage, but now it looks like you can work with it. So sorry.",
      "chunk_type": "paragraph",
      "chunk_index": 132,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 85,
      "token_count": 103,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 132
      }
    },
    {
      "chunk_id": "36b88f10ffeabd72c4cf46b3186d3f54",
      "document_id": "7c589e42742e",
      "content": "# Speaker 2\n\n--- Page 25 ---\n\nI can see how you do that. You can repeat that, please just close.",
      "chunk_type": "paragraph",
      "chunk_index": 133,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 21,
      "token_count": 28,
      "context": {
        "heading": "Speaker 2",
        "paragraph_count": 2,
        "position_in_document": 133
      }
    },
    {
      "chunk_id": "633bdcc106370908cb200e3a3e4c8bba",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nOther pages, that's the solution. So when you go to configuration section, you should close other main page. \nCreation will work normally. So it cannot work normally on home actually, because we still will face some problems. \nEven if you work with single page, but with for example setting business rules, you will face trouble. So I recommend \nyou to upgrade to Windows Pro. But once you work with Windows home, now I can show you what you can do. You \nshould close all other tabs of creation. In this case, your single tab will work normally. As you can see, you can do \nsomething. You can provide some settings like this, like USR my process, then you can save it. So this will work and \nit works more or less good.",
      "chunk_type": "paragraph",
      "chunk_index": 134,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 135,
      "token_count": 167,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 134
      }
    },
    {
      "chunk_id": "83b549c80556b80b04e8af7a51168223",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nBut when you need to go back to your main configuration section, you will have to use tabs and you will have to \nclose other tabs. This is not comfortable. Okay, I understand this saving will work for you. This works, but not so \nfast. And as far as I know, the problem is number of available websockets. Okay. Yes. In Windows home, I think all of \nissues you have are caused by Windows home. And as you can see, saving is performed. But okay, let's wait till \nsuccessful operation. Also some memory. So we need to look at your memory availability. Could you please click on \nthe performance tab second one after we have processes. Second one is performance. So you have 16gb of ram \nand SSD. So your PC is very good. Your PC is fast, but Windows is not good.",
      "chunk_type": "paragraph",
      "chunk_index": 135,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 146,
      "token_count": 183,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 135
      }
    },
    {
      "chunk_id": "55794eda3aeec03d203e55adb8b2b08b",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo I recommend you to upgrade your windows to pro. In this case it will be. In this case it will better.",
      "chunk_type": "paragraph",
      "chunk_index": 136,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 25,
      "token_count": 30,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 136
      }
    },
    {
      "chunk_id": "b744e64e1c627c571574c1508496bde7",
      "document_id": "7c589e42742e",
      "content": "# Speaker 2\n\nAndrea is my colleague, he takes the code the course too. So he asked me, okay, so I save, socially save, I cancel \nand I.",
      "chunk_type": "paragraph",
      "chunk_index": 137,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 28,
      "token_count": 39,
      "context": {
        "heading": "Speaker 2",
        "paragraph_count": 1,
        "position_in_document": 137
      }
    },
    {
      "chunk_id": "40127c79f0afcdef3b76ab7d114ccbf5",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nYou can, you can just open another tab with your, you can recover previous page. Yes. Now you can see your process \nis saved and you can export, you can do everything.",
      "chunk_type": "paragraph",
      "chunk_index": 138,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 35,
      "token_count": 44,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 138
      }
    },
    {
      "chunk_id": "05a3fd6c42116a44acac87d5f8bf6a7c",
      "document_id": "7c589e42742e",
      "content": "# Speaker 2\n\nSo it's work. Oh, it is so simple. Yeah.",
      "chunk_type": "paragraph",
      "chunk_index": 139,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 12,
      "token_count": 19,
      "context": {
        "heading": "Speaker 2",
        "paragraph_count": 1,
        "position_in_document": 139
      }
    },
    {
      "chunk_id": "35ce0831b1d5b02d404f06e4953cb5c4",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nYes. And it's. Unfortunately this is caused by limited number of Websocket connections allowed for IIs web server \nrunning in Windows home. So Windows Home is like very mini, little limited version of windows and it's not designed\n\n--- Page 26 ---\n\nto be used for serious development. So you probably should think of upgrading it to Windows Pro.",
      "chunk_type": "paragraph",
      "chunk_index": 140,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 62,
      "token_count": 78,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 3,
        "position_in_document": 140
      }
    },
    {
      "chunk_id": "11531a2fcaaeec41ffbf9f431d903be9",
      "document_id": "7c589e42742e",
      "content": "# Speaker 2\n\nOkay, thank you. Thank you very much, Dmitry.",
      "chunk_type": "paragraph",
      "chunk_index": 141,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 11,
      "token_count": 17,
      "context": {
        "heading": "Speaker 2",
        "paragraph_count": 1,
        "position_in_document": 141
      }
    },
    {
      "chunk_id": "6a1c0c88a608bb299758237f7f98f747",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nThank you Karim.",
      "chunk_type": "paragraph",
      "chunk_index": 142,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 6,
      "token_count": 10,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 142
      }
    },
    {
      "chunk_id": "4825fa55a5a90bbdb69ea31197600d01",
      "document_id": "7c589e42742e",
      "content": "# Speaker 2\n\nYou saved me. My boss is over me all day and it's difficult forwarding to the course. Thank you very much.",
      "chunk_type": "paragraph",
      "chunk_index": 143,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 24,
      "token_count": 30,
      "context": {
        "heading": "Speaker 2",
        "paragraph_count": 1,
        "position_in_document": 143
      }
    },
    {
      "chunk_id": "335e1b495a1d7b084cc250b5ab024cee",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nNo problem. Thank you, thank you.",
      "chunk_type": "paragraph",
      "chunk_index": 144,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 9,
      "token_count": 14,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 144
      }
    },
    {
      "chunk_id": "1725294dca61a96b978bcdc4dd5b12c5",
      "document_id": "7c589e42742e",
      "content": "# Speaker 2\n\nSee you tomorrow.",
      "chunk_type": "paragraph",
      "chunk_index": 145,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 6,
      "token_count": 9,
      "context": {
        "heading": "Speaker 2",
        "paragraph_count": 1,
        "position_in_document": 145
      }
    },
    {
      "chunk_id": "5299aa359d8f84194a4fc53efac10164",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nYes, so our session is over. If any other questions? Hi, Vikrat Alpha is sorry. Hi Dmitry. Yes please. Yes, the compiler \nis successful, but give me a message, can I share that with you? Okay, I will stop sharing, so please Basil, start \nsharing. You see. Yes, it's a warning message. This warning message does not prevent you from next steps. So \nwhen you do some server side coding, possibly previously you. So in your previous experience, maybe you also \nfaced some warning messages and unfortunately for me, it's not clear how to get rid of it easily. It looks like some \nleftovers made by base product developers. Maybe we can also see it at my own environment. Surprisingly, I \nprobably so maybe which version currently you're running.",
      "chunk_type": "paragraph",
      "chunk_index": 146,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 132,
      "token_count": 175,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 146
      }
    },
    {
      "chunk_id": "d4010f30a007bbed59c412299d7185bb",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\nSo maybe you have just a bit older version than I do because I recently switched to the latest one and your version \nmaybe not the same latest, but this is not critical. So you can just see this compilation result. But I can complete. \nYeah, in general it's not ideal, but it's something that is satisfactory. So you can continue your work. Okay, I can go to \nthe system mode next, right? So you can do next examples, next steps of our videos so you can work normally? Yes. \nOkay. Okay, thank you. But last question, if I download the window eleven Pro, do I have to repeat the old step in the \nfirst lecture or it's installed by default? Unfortunately I have no experience of upgrading windows from home to pro.",
      "chunk_type": "paragraph",
      "chunk_index": 147,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 136,
      "token_count": 167,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 1,
        "position_in_document": 147
      }
    },
    {
      "chunk_id": "3f15e2d3e80deaf96cdc5fbd164796ef",
      "document_id": "7c589e42742e",
      "content": "# Speaker 1\n\n--- Page 27 ---\n\nI believe it should only change some files on your windows and it will not be like clean environment. So you should \nhave the same IIs website, you should have the same stuff. And I did not check it by my own, so I have no \ninformation, no practical experience with it. So my company gave me a laptop with Windows Pro and I never tried to \nrun on Windows home and upgrade it. Yeah. Thank you. Thank you very much dmitry. Thank you too. Pes. So our \nsession is over. Thanks all of you who watched this video till the end, see you tomorrow. Goodbye. Goodbye.",
      "chunk_type": "paragraph",
      "chunk_index": 148,
      "metadata": {
        "source_type": "pdf_transcript",
        "pdf_file": "Creatio-Developer-3.pdf"
      },
      "word_count": 114,
      "token_count": 144,
      "context": {
        "heading": "Speaker 1",
        "paragraph_count": 2,
        "position_in_document": 148
      }
    }
  ],
  "processing_timestamp": "2025-07-23T16:41:48.423855"
}