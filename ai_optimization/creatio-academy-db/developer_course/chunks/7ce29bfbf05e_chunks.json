[
  {
    "chunk_id": "a2e9306f095be4a82d2907fb3d572f79",
    "document_id": "7ce29bfbf05e",
    "content": "--- Page 1 ---",
    "chunk_type": "paragraph",
    "chunk_index": 0,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 4,
    "token_count": 5,
    "context": {
      "heading": null,
      "paragraph_count": 1,
      "position_in_document": 0
    }
  },
  {
    "chunk_id": "7886429597defc74198467467795a213",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nToday is session number six of our development on Creature Platform Guided Learning. Today I want you to see \nsome additional materials related to Classic UI and Freedom UI and migration. And then we will fully switch to work \nwith server side. So recently we managed to create a fully separate Classic UI solution. And this was a Classic UI \nsection and list inside of this is called also it's called a section list. So we have a set of data records here. When you \nopen edit page, you see Classic UI edit page with columns components. And we decided not to focus too much on \nClassic UI because this platform will be like deprecated probably somewhere in future. Currently it's supported, \ncurrently it's working.",
    "chunk_type": "paragraph",
    "chunk_index": 1,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 128,
    "token_count": 151,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 1
    }
  },
  {
    "chunk_id": "3eecdcf906722bd33f98c65881369f39",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nBut in future so it will be not developed, it will be not improved, you will not see new tools or components for the \nClassic ui. And most development is focused on Freedom ui. And you also remember some interesting feature, \nsome feature for voice recognition, you remember we still missed it in Freedom ui. And you also can do details, you \ncan program buttons or actions. Everything is explained at Academy. So if you ever need it, you can look at it. Also if \nyou go to client module part for Classic UI you will see that code in Classic UI in general is I think a bit more simple \nthan in Freedom ui. Because in Classic UI you can also make your items in diff array for example like a button. We \nwill do it later.",
    "chunk_type": "paragraph",
    "chunk_index": 2,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 141,
    "token_count": 164,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 2
    }
  },
  {
    "chunk_id": "6ce89e760edaa329904c3d9ab032b5f9",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nThen you can create a handler as a function add methods section. And in general I think it's easier because more \ntransparent work with object model, more transparent operation with view model data. I will show you more \nexamples later. And this is just a quick brief introduction for you. If you will work with some Freedom Classic UI \npages in this case, this possibly can help you. So what I want to show today, this will be a very typical task for future \nI think. And this typical task is your customer who already runs some Classic UI section successfully. And customer \nunderstands the future is in Freedom ui. Customer wants to use some Freedom UI features, tools, components and \npretty look and user interface. So customer asks you to migrate some existing solutions from Classic UI to Freedom \nui.",
    "chunk_type": "paragraph",
    "chunk_index": 3,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 144,
    "token_count": 170,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 3
    }
  },
  {
    "chunk_id": "1b60452f1e407b09a620bc4f83ef702c",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nUnfortunately we don't have any automated procedures for this. And especially this becomes additionally complex if \nyou have some programmed code in Classic ui. So I will show you the most practical way how you can switch from \nClassic UI to Freedom ui. I will also show you some settings and system settings for this which impact on how you \nsee your system. So you'll be like more expert in it how to make this migration. So as my example I have realty \nClassic section implemented as Classic UI and I will show you how we can switch it in Freedom UI and what we have \nto do for this. So Freedom UI or Classic ui, the only difference is at client side. So we have different types of client \nmodules.",
    "chunk_type": "paragraph",
    "chunk_index": 4,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 134,
    "token_count": 154,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 4
    }
  },
  {
    "chunk_id": "d05932e7db16ef087c9f533f4ce5f631",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSuch items which have section in their name or page in their name, they usually designed as Classic ui. If you look at \nthe pages and you see form page or list page, it's a Freedom ui. Of course, physically they are totally different. When \nyou go to list page, you will see Page editor like this, it's a Freedom UI page. And when you will go for example to a \nsection page, you will see only code because it's Classic UI and you can configure Classic UI sections only when you \ngo to corresponding section and run Section wizard in it. That's how you can get to Page Editor in Classic ui. But \nnow our task is to make an example of migration.",
    "chunk_type": "paragraph",
    "chunk_index": 5,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 127,
    "token_count": 151,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 5
    }
  },
  {
    "chunk_id": "4ff30650b1cd6401b6c40b63968a2fc1",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\n--- Page 2 ---\n\nAt the source part we have Classic section, this one and as expected result, we would like to make one more section, \nbut showing the same data in Freedom UI server side part, for example, we have objects, we have maybe some \nserver side logic, maybe we have some business processes. So server side part will remain the same. Data, items, \nlookup contents, everything will be the same. The only change we expect to do will be our user interface area. So set \nof client modules and related code that is behind such items. So I will show you how to migrate from Quest CQI \nsection to a Freedom UI section. Please note that it will not it will be not necessary to forever forget about Quest ui. \nIt's still possible and different users may define themselves which type of user interface they want to run.",
    "chunk_type": "paragraph",
    "chunk_index": 6,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 153,
    "token_count": 184,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 2,
      "position_in_document": 6
    }
  },
  {
    "chunk_id": "78556f395b42dfdf22d2289e873a7640",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo it will be possible to switch. First of all, I need to tell you about some important settings related to such view. And \nI would like you to see this background like frame. You see this name which shows you some funny, some fancy \nbackground image, some kind of item which is called desktop and you can select and edit it. At the left part you see \nset of sections workplaces, you see for different workplaces, different contents and you also can see some image \nbackground and the top line here also use set of buttons items which are designed in angular and they are items of \nFreedom ui. So this left and top area is managed by Freedom UI and we can switch this background frame setting to \nClassic UI if we want to.",
    "chunk_type": "paragraph",
    "chunk_index": 7,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 139,
    "token_count": 158,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 7
    }
  },
  {
    "chunk_id": "9f191356cc3b918c0c487e16d5831f27",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo let me show you system settings and this system setting is called like Freedom use Freedom UI interface. This \nsetting generally turns on or off this background frame stuff. And if we just for test purpose want to turn it off so use \nFreedom UI interface was originally on we turned it off and it's cached. So in order to apply this we will need to log \nout and log in again. Now you will see how system will look like with the Classic UI set of section and the top search \nbar. Now you see system how it looked when we had no Freedom ui. You see a bit difference. Here you see that we \nstill have different works workplaces. It looks like we totally miss Workplace which is based on Freedom UI. We miss \nworkplace with customer360 from here as you can see.",
    "chunk_type": "paragraph",
    "chunk_index": 8,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 149,
    "token_count": 170,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 8
    }
  },
  {
    "chunk_id": "e6b8104f3df013e18837671baf250a79",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nAnd we can also go to Workplace Management System Designer. This page go to Workplace System Setup. Let's \ncheck our customer 360 workplace and you see use only in shell in like in usual words. If we want to translate it into \nsomething that you can easily understand, it means that use only in Freedom UI background settings. Now it's not \nFreedom ui, it's Classic ui. That's why this workplace disappeared. Okay, so you can manage how you would like to \nsee background which is a Classic or Freedom ui. Okay, so we can go back because we're interested in migration \nnow.",
    "chunk_type": "paragraph",
    "chunk_index": 9,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 105,
    "token_count": 130,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 9
    }
  },
  {
    "chunk_id": "6bd0ce65cd132b3eb4fb5c5a7d206da6",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo we need to enable Freedom UI back, use Freedom UI Interface, open it, set it again, save it, close it and yes, let's \nlog out and log in again to see back our background Freedom UI setting, which is default setting now and which is \nrecommended to work with Freedom UI sections and also with some Classic sections. It's still supported. You see, \nwe have Freedom UI background, but we have Classic UI stuff inside of it. What I wanted you to know next is Special \nsection designed to simplify such transition between Classic UI and Freedom UI sections and user interface. Now \nyou see special section special setting for page which is called UI Management. And we can specify setting for \nFreedom UI for different roles or users, which makes possible to do it quite flexibly.",
    "chunk_type": "paragraph",
    "chunk_index": 10,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 141,
    "token_count": 168,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 10
    }
  },
  {
    "chunk_id": "da5c4b9b114090e75db6a88ed590df2a",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nFor example, some users are really stick to some Classic UI solutions. They are not ready to switch to Freedom ui. \nThey work with some basic UI sections and it's critically important for them. So you can manage this stuff for\n\n--- Page 3 ---\n\ndifferent users. And also we have Form Page Preferences which is also designed to simplify the selection between \nFreedom UI and Classic UI and only in case if both options are enabled for a section. So in this case you see by \ndefault Freedom UI uses Freedom Pages, Classic UI uses Classic Pages by default and we have some exceptions for \nthis. But personally I consider this stuff as over complicated. And once you started to migrate from Classic UI to \nFreedom ui, I think that it's better to finish this Migration and then do not use Classic UI and only invest into Freedom \nui.",
    "chunk_type": "paragraph",
    "chunk_index": 11,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 153,
    "token_count": 177,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 3,
      "position_in_document": 11
    }
  },
  {
    "chunk_id": "57fa7914c5ab4d4284d1c9f5817c39ad",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo this is a page which will be temporary important for you, so it will be not forever for you. And finally you will \nswitch to Freedom UI all your necessary business sections and then you will feel quite okay with it. So you will not \nreally need to switch back to Classic ui And that's how I recommend you to follow this personally. In our Inner \nAcademy department in Croatia company, we still use some Classic UI solutions, but our plan is to migrate to \nFreedom UI and then to use only Freedom UI sections. So and this stuff like page for settings will be temporary \nuseful for you I think. Okay, let's go back. So finally we have currently for Classic section, we only have classic user \ninterface, so we have no option to display Freedom UI pages.",
    "chunk_type": "paragraph",
    "chunk_index": 12,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 143,
    "token_count": 169,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 12
    }
  },
  {
    "chunk_id": "29679a4590372aead75b5d5d43730d19",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo how we do this, how we can make a migration, I will explain it right now, I will show you, I think the easiest way. \nSo let's go to Settings, then go to Application Hub so we can create new app. As you remember, application is like a \nnew top level setting or like application entity which may include one or several packages inside. We already have \nFreedom UI reality section, but we don't have any classical representation for it. So when we create new application, \nsystem will create new package to create. If we ask, it will create new section for us. So now I will show you how we \ncan create new application. We can call it, we can make it based on records and business processes, but we will \nname it Realty Migration. So it means that we migrate from Classic UI to Freedom ui.",
    "chunk_type": "paragraph",
    "chunk_index": 13,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 152,
    "token_count": 182,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 13
    }
  },
  {
    "chunk_id": "8d628405337c20661a2736f6dc01b369",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nWe can compose kind of icon for it. And we will use this very important feature link to an existing object. This is very \nimportant. So this is a key feature of all this migration idea. We will use existing realty Classic UI main realty classic \nentity. This one will be main and it will mean that system will not create new object for us. It will use existing object, \nit will create a new package, it will save all our application information into a new package. It will make dependency \nfrom real to classic existing dev classic package. And finally we'll have new app but based on existing object. And \nlet's try, let's create it. Icon color is okay for me. So let's move it. This will be not so hard because system didn't \ncreate new objects for us.",
    "chunk_type": "paragraph",
    "chunk_index": 14,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 143,
    "token_count": 174,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 14
    }
  },
  {
    "chunk_id": "0254d9425f2c70225fb00a99e68fcc1f",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nIt only uses existing object and then creates several client module. So I don't expect it to last longer than 20 \nseconds. So let's see how it works for us. And then you will see the main idea of migration. So Generally it's pretty \nsimple. You will have a new app, you will have template for list and or edit page. And then we will have to manually \nset it up according to our expectations. So you can see there is almost no automation such migration unfortunately \nand a lot of hand work is expected here. So let me show you how we can do this. So we have data models. Our data \nmodel has no new objects, but it definitely has an existing object because it's based on this reality. Okay, let's go to \neasy part. List page I think is easy part and it shows some columns.",
    "chunk_type": "paragraph",
    "chunk_index": 15,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 152,
    "token_count": 182,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 15
    }
  },
  {
    "chunk_id": "ab298392864cf8665fb6a81f98de9094",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nWe can hide unnecessary columns. We can add the columns that we need you. Now you see all our classic object \ncolumns are here. So we can specify say okay, we want to see name, price, type, offer type and comment and then \ndate of creation. Order of selection is important here. And we can hide this column. We can also hide this, we can \nshrink, we can move something if necessary. We can swap columns positions if you want. So now this is easy part. \nWe only made our list settings for freedom UI page. Physically this page is saved. Let me show you this page. Page.\n\n--- Page 4 ---\n\nPage here is saved into new package and its parent page is somewhere in template code and title is quite good. So \nwe can save it, no problem.",
    "chunk_type": "paragraph",
    "chunk_index": 16,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 143,
    "token_count": 176,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 3,
      "position_in_document": 16
    }
  },
  {
    "chunk_id": "1fe607117336870f3b248cce54f292cc",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nI prefer to control what's going on at configuration section because probably I'm too stick to development and I don't \nreally trust only no code tools. So I always want to check what is going on there. And that's why we go to \ncorresponding new created package. You see this package must have dependency from dev Classic. Yes, has it. And \nthis package now includes no owner objects. So it uses existing object from parent package from dev Classic. And \nyou see no created objects here. So we did not customize our object model so far. So we use 100% of all existing \ncolumns from classic object. So data model is the same. User interface part is the only change here and we have list \npage changes. Now I will work with form page. So list change is okay. Now let's work with form page.",
    "chunk_type": "paragraph",
    "chunk_index": 17,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 148,
    "token_count": 181,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 17
    }
  },
  {
    "chunk_id": "44db13351afa55c75c5086799b7c97c7",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nForm page is Freedom UI edit page for a section for an object. And as you can see it has its own properties in our \npackage code title. Great. And we can specify columns as we wish. We already have all the classic UI columns, so \nwe only can just drag them at its place where we expect it to work with. So let's go and display types. This is list of \nexisting columns. So such columns were already added at this stage where we created in classic UI we have \ncomment, we don't have any Other columns that could be useful. Also, it's interesting to mention that you see such \nnotes here representing that colon was already added to the page.",
    "chunk_type": "paragraph",
    "chunk_index": 18,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 125,
    "token_count": 147,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 18
    }
  },
  {
    "chunk_id": "9304511228b81d3aff0ba749fc10e8f1",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo you will see such node if colon was already shown somewhere and you will not see it if colon is present in your \nobject model but was not shown on the page here notes for example, the colon which is designed to work with \nattachments and that's why it was not shown as a separate component here and I do not plan to show it. Okay, so in \ngeneral it looks like this. We can also try to specify drop down for types. Drop down for offer types. Okay, great. We \ndid not create manager for this object and when we finished we can just click save. As you can see, even if we had \nsome business logic in Classic ui, this business logic is not automatically migrated into Freedom ui.",
    "chunk_type": "paragraph",
    "chunk_index": 19,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 135,
    "token_count": 155,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 19
    }
  },
  {
    "chunk_id": "f21a65e727f4ad61df240ec7666bfd56",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nThere is so big difference between such platforms and code that now developers did not implement any kind of \nautomation and transition or business logic that is designed in Classic UI and you want to see the same in Freedom \nui. So if such logic exists, you will have to reprogram it Working at code source code part of the client module. So I \nalready saved it. You can close it. Now you see some changes. We can control what's going on at our package and \nthat's how we can test how it works. So I expect to see new section somewhere here Migration section. Now you see \nthe data which previously was shown in Classic UI also available in Freedom UI user interface. You can try to add the \nnew data record. But now you see still you see Classic UI page.",
    "chunk_type": "paragraph",
    "chunk_index": 20,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 146,
    "token_count": 168,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 20
    }
  },
  {
    "chunk_id": "3bc99e88c217f169f59a43c569fd2707",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nThis is a result of some browser cache issues. Okay, let's cancel this log out, log in, go to Freedom UI section. Also I \nwould like it to be present in my. Let me show you in my studio Workplace. So let's go to Workplace Studio. I'd like to \nadd my migration migrated section. We will find it Realty Migration Only sections which were not present here are \nshown. That's why only realty migration is shown, because Realty and Realty Classic are already done. Okay, \nmigrations is somewhere at the end. So let's rearrange this as usual and move it upper just below the classic. We \ncan also bind this workplace and save it to the same package where we originally saved it. And system creates \ncorresponding three different data items for us. Okay, we trust that everything saved correctly. So we have three \nsections.",
    "chunk_type": "paragraph",
    "chunk_index": 21,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 148,
    "token_count": 187,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 21
    }
  },
  {
    "chunk_id": "6b552f0319926070ddf0f8f26f9296a0",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\n--- Page 5 ---\n\nNow let's go to Studio Realty Classic and Migration is somewhere at the Antifa world. I expect to see my sections on \ntheir places. Yes, Realty is our new Freedom UI original setting Classic is our Classic UI original stuff. And migration \nis our Classic UI data shown in Freedom UI user interface. Trying to open the edit page shows us Freedom UI page \nfor migrated stuff. So now we made our example with migration and we successfully implemented it's in user \ninterface. So you see that this is a simple and quite straightforward way of how you can do this migration. You will \nhave more difficulties with transferring of business logic making your own filters. Again if you made some filters for \ndropdowns. For example, in Classic UI it's possible to use programming or to use business rules. And business rules \nare not migrated automatically.",
    "chunk_type": "paragraph",
    "chunk_index": 22,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 153,
    "token_count": 182,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 2,
      "position_in_document": 22
    }
  },
  {
    "chunk_id": "0e821e38309e0765cde0c68ce131bbb5",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo you will have to implement the same settings that you made for Classic UI again manually at Freedom UI pages. \nBut having the data stuff the same. It's so doesn't take too much time because your data is data model is ready. And \nwhat is interesting, we have special parts of section like folders like tags and notes. So nodes will be taken correctly \nfrom Classic UI part. You will see attachments here. And notes is a special component which is missing here and \nthat's why you do not see it. But files will be shown here. So in Classic UI special component to show your files is \ncode. So this detail. Oh, now it's failed. Yeah, because we probably. So as you can see, it's quite hard to make it work \nat the same time where you work with Classic UI and Freedom ui.",
    "chunk_type": "paragraph",
    "chunk_index": 23,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 149,
    "token_count": 179,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 23
    }
  },
  {
    "chunk_id": "c9382de37689ab02c13e08af0b6044d9",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo it's really hard to. Now we switched to Freedom UI and that's why Classic UI edit page is not working normally. \nBut for different users it's possible to set up. So Classic UI open the page. As you can see in Classic UI I open the \npage and I see Freedom UI edit page. Because my current setting is to show Freedom UI page and because of \nFreedom UI shell is activated. So you see this background, top panel and left panel are in Freedom ui. And because \nwe see some background here and because it's made on Angular. So Edit page was chosen to be shown in Freedom \nUI even though we opened it from a section which is in Classic ui. So I understand this is kind of messing with \ndifferent types of ui.",
    "chunk_type": "paragraph",
    "chunk_index": 24,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 140,
    "token_count": 163,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 24
    }
  },
  {
    "chunk_id": "70fc30df0336345dd233c11c59f86e71",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo finally when you do migration, you will use this help of Application Hub. You will get new package for your \nmigrated stuff. From Classic to Freedom we will have set of client modules and all logic that you miss. You can \nimplement with the help of business rules, with the help of components that are available as no code tools at \nFreedom UI and not available as no code tools in Classic ui. And also you Will be able to write your code for migrated \npages to implement the same functionality that you needed and that you previously used in classic sections. So if \nyou have any questions about this migration, please tell me. Server side part like business processes, like web \nservices, like some C Sharp code, it's the same, so it operates with data model, it doesn't really depend on the type of \nuser interface.",
    "chunk_type": "paragraph",
    "chunk_index": 25,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 151,
    "token_count": 178,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 25
    }
  },
  {
    "chunk_id": "91b600fe8866106b0ddd59a0d99ab064",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo server side part of your migrated stuff will be the same and you just need to check that it still works as expected. \nIn case of any questions, I would be happy to hear. As usual, video recording is performed. So if you missed some \npart or if you so just watch this later, all the videos will be available. Peggy? Yes. Questions please.",
    "chunk_type": "paragraph",
    "chunk_index": 26,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 68,
    "token_count": 82,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 26
    }
  },
  {
    "chunk_id": "31020d02dfb9b17615d665bdefd8dd4b",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 2\n\n--- Page 6 ---\n\nYeah, I have a question. Is realty. Sorry, not realty. Is Classic UI ever. Would it still be deployed to new customers or is \nit just mainly targeted towards legacy customers?",
    "chunk_type": "paragraph",
    "chunk_index": 27,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 38,
    "token_count": 52,
    "context": {
      "heading": "Speaker 2",
      "paragraph_count": 2,
      "position_in_document": 27
    }
  },
  {
    "chunk_id": "a16c615630f12d755f1ce2b18e2177ec",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nCurrently we position Classic UI as still like working tool, but we do not recommend to create new solutions on it. So \nit's like you have an old PC and new PC and you think about installing some program. Of course it makes sense to \ninstall it on UPC unless you have very serious reasons to use Classic UI for it. For example, you already have some \nmarketplace add on which is very useful for your business, but implemented in Classic UI and is expected to be used \nin some Classic UI sections. So if you have some strong reasons like you stuck with some quasiQL solutions, then it \nmakes sense to continue its development, to improve it, to advertise to your customers. But if you have equal \nchances and new customer and new project, of course it makes sense to look at Freedom UI first.",
    "chunk_type": "paragraph",
    "chunk_index": 28,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 149,
    "token_count": 174,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 28
    }
  },
  {
    "chunk_id": "31c8461ee8361e8d46293da2adcd5a60",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nBecause in Freedom UI you have in like in several times more available. No code, controls, components and \nFreedom UI will be developed in future and it supports or is going on. Classic UI is now supported only for existing \ncomponents. No new components are created for Classic ui. We still have thousands of customers with running \nClassic UI solutions and it is quite good. So customers are happy with running what they have. But it's about future, \nit's about development and improvements in future. So if you have choice, of course it's better to select Freedom ui. \nIf you don't have choice because of existing circumstances, then you can decide yourself and choose Classic UI if \nyou do some customizations. That's brilliant.",
    "chunk_type": "paragraph",
    "chunk_index": 29,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 126,
    "token_count": 155,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 29
    }
  },
  {
    "chunk_id": "67042c9a0568b25fb9fc9aa29dc318dd",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 2\n\nThanks Amelia.",
    "chunk_type": "paragraph",
    "chunk_index": 30,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 5,
    "token_count": 8,
    "context": {
      "heading": "Speaker 2",
      "paragraph_count": 1,
      "position_in_document": 30
    }
  },
  {
    "chunk_id": "e906152d6af038b28d17723385321b68",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nThank you Paddy. Thank you for your question. Okay, so now you know how to do first steps. Actually we also face \nthe same stuff in our inside like team work and automation. Inside of Creatio we have several big creature based \nsolutions inside of Creature company and it's also so we also like face as most of our customers we face such \nupgrade needs because Freedom UI is now like primary user interface and we still have a lot of Classic UI legacy. So \nwe do some planned work on improvements from Classic UI to Freedom UI and we still work with some sections in \nClassic UI because of too many systems, too many changes to be performed. And one day we plan to switch from \nClassic UI to Freedom UI in most of our currently used sections.",
    "chunk_type": "paragraph",
    "chunk_index": 31,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 142,
    "token_count": 163,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 31
    }
  },
  {
    "chunk_id": "57f64e8dc2daa6fc717e456135538bd3",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nAnd we have some tools as I showed you that intended to help you with it. But personally I think that once you \nstarted to switch, it's better to make it quick and then to continue improvements already in Freedom ui. So not to be \ntoo long in this intermediate stage where some users are working in Classic, others are working in Freedom. You will \nhave double time for support of this intermediate stage. So it's better to try to make it shorter and to implement \nsomething like minimum value product in your Freedom ui, move your users there and then improve quickly, improve \nall necessary remaining things that will make your users fully happy. So not to stay long in this intermediate step.",
    "chunk_type": "paragraph",
    "chunk_index": 32,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 127,
    "token_count": 146,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 32
    }
  },
  {
    "chunk_id": "334959e57b4e4fc1b5b148e7785a58b8",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nOkay, so if you have some real life examples, some kind of like practical interest and practical experience with the \nmigration also tell me, it's interesting what you think of it, what unexpected outcome you have. Probably so anyone I\n\n--- Page 7 ---\n\nthink may have something unusual and expected and even in creation we sometimes can't implement all possible \nscenarios. So if you will have something unusual, just tell me, I will try to help with it. So we have to switch from our \nclient side, probably already get tired of it to some server side features. I will try to explain and to make this \ntransition coordinate quite smooth. And now we will talk about more developer oriented things and more related to \nprogramming at Creature server side in C using dotnet framework and talking about compilation libraries, file system \nand so on.",
    "chunk_type": "paragraph",
    "chunk_index": 33,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 149,
    "token_count": 178,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 3,
      "position_in_document": 33
    }
  },
  {
    "chunk_id": "2537c4ebc064d233f182692d1f33bf3e",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo probably I have to start that in any package now we see we have some set of items of different types. So we have \nitems with different types. If you try to add an item manually, you now will see we have objects and we also studied \nwhat is replacing object. We have pages, so client modules of different types. And also we have replacing if model \nwhich means replacing client module specially designed to extend and modify existing pages. And we already \nstudied this one, we did not study source code, we will do it a bit later. And we slightly touched the question of \nmaking business processes. So I need to show you some items and explain where they are actually stored and how \nthey actually work. So when you Operate with objects. We already know that it doesn't.",
    "chunk_type": "paragraph",
    "chunk_index": 34,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 145,
    "token_count": 170,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 34
    }
  },
  {
    "chunk_id": "9fb1c2f47e0e8dad0501ba6bd483a1af",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo object is a server side item, but its changes are applied easily without need to compile. So generally C Sharp code \nis not so let's say heavily used for objects and replacing objects. Of course, C Sharp source codes, if you design it \nseparately in source code item will definitely require some configuration. So it means that when you develop \nsomething inside of item name source code, you will not be able to immediately start it. You need to run a special \nprocedure called compilation and physically it means that creation handles some C Sharp sources at server side and \nwhen you want to apply them and when you want to implement and apply changes. So you will need to compile and \ncreature is capable to collect C Sharp sources of its compilable part.",
    "chunk_type": "paragraph",
    "chunk_index": 35,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 138,
    "token_count": 160,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 35
    }
  },
  {
    "chunk_id": "6fac0976620b2815b53b8bcadb1d125d",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nFinally to compile and get executable DLL libraries and then use such libraries at its website. So C Sharp sources \ndefinitely require compilation. All JavaScript part this all this JavaScript part obviously does not require compilation \nbecause it's a set of JavaScript files. They are executed as interpreted code at browser side. So when you save and \napply any change in JavaScript part in client module part, it also does not require any compilation. So this is \ninterpreted part fully. Business processes in general, such items as business process it's designed as interpreted \nsetting. But for some processes you can add the C Sharp code and make it compilable. So in some processes, let's \nsay we have plus minus. It means that some processes can include compilable code and we can run it and we can \nuse such advantage of compilation and very fast execution, but it's not mandatory.",
    "chunk_type": "paragraph",
    "chunk_index": 36,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 152,
    "token_count": 182,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 36
    }
  },
  {
    "chunk_id": "721f7d6d28c37c5e83d854857afadce1",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nIn general, it's recommended to have as less as possible for code in your processes. Because processes are \noriginally designed to be a no code tool and possibility to code into it. It's not its primary purpose. The primary \npurpose of a process is to make your business logic a set of steps that you can easily construct with using of your \nmouse and which will not require programming and then you can get your business work done. But you can also use \nC Sharp code inside of it. And that's why we can call business processes as partly compilable. So I will show you \nexample rest and swap services. They do not require compilation because mainly they are metadata used inside of \nbusiness processes and user task is a C Sharp programmed item that requires compilation. So now SQL scripts \nobviously are not compiled items.",
    "chunk_type": "paragraph",
    "chunk_index": 37,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 149,
    "token_count": 174,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 37
    }
  },
  {
    "chunk_id": "b9e0cc855ffd3dd0302f37eb1f4ad9ad",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nData is also metadata, not compiled and import. We can import dll items if they are written in.net and add them to \nour packages and use them in Our compile bot stuff. So if in general such DLLs if we import them are included into \ncompilation, so we can consider this stuff as involved in compilation. Now you see only four types of items that\n\n--- Page 8 ---\n\nsomehow touch the compilation and in general that's how we can say that creation has compilable server set. Also \nprobably also need to tell you that objects can potentially include its compilable part. But now it's not recommended \nto be used. And in general this is feature that's still supported but probably will not use it. We will talk about object \nprogramming and possibility to use C Sharp compatible code there when we will talk about event handling at object \nlevel.",
    "chunk_type": "paragraph",
    "chunk_index": 38,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 153,
    "token_count": 183,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 3,
      "position_in_document": 38
    }
  },
  {
    "chunk_id": "c9c1220c7f41ace90e95b575cc8f4c45",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo in general C Sharp sources for sure some business processes and user tasks they are compiled and finally they \nare turned into. Let me show you what they are turned into DLLs that you can find in Bin folder here. Or you can also \nfind DLLs as a result of compilation in many packages. For example, we made dev classic package files bin and here \nis our DLO of a package compiled as separate assembly. So why you need to understand such files, DLLs and so on. \nBecause now we will talk about server side functionality and you need to know how it turns into something that \nsystem can execute where you have to search for some sources and you need to like understand it in very general \nthings so you will know where to find some parts of execution executable stuff of creation.",
    "chunk_type": "paragraph",
    "chunk_index": 39,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 148,
    "token_count": 168,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 39
    }
  },
  {
    "chunk_id": "3087fb40b4cfd618bff1d7317dfd1e66",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nWe will make an example now and I think that the easiest possible way to demonstrate how you can write and run C \nSharp code at creation platform is to make a business process which will execute C Sharp script task into it. I \nintentionally avoid making our own C Sharp sources at the beginning. So first I plan to show you how we can make \nprocess with some piece of programming inside of it. We need some package for this. I prefer to do it in my realty \npackage. This is Freedom UI solution. So one of our main packages here in total. Now you see we have three \npackages in our solution and it's not the end. So possibly we may have more if you want. You can also minimize \nnumber of packages if you play with you remember we studied it with the search rack setting.",
    "chunk_type": "paragraph",
    "chunk_index": 40,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 152,
    "token_count": 174,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 40
    }
  },
  {
    "chunk_id": "d9ba93aa5c1b931a91a64b165ef7e505",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nOr maybe it's better to say lookup package installed application. It's possible to minimize number of existing \npackages for you if you connect all your editable applications with some packages that you already have. And we \nalready did it avoiding creating one more package for Customer360 customization. So this is something that we \nalready studied. You know how to find it just to find and register an object named package installed application as a \nlookup at lookup section. Then you will be able to handle all your applications, all your packages included there. And \nyou can replace current package for some apps making system saving your application customization into a certain \npackage. Okay, so what I plan to do now select my Freedom UI USR realty package, add the business process.",
    "chunk_type": "paragraph",
    "chunk_index": 41,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 134,
    "token_count": 158,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 41
    }
  },
  {
    "chunk_id": "5849a32c0e45d02f0cd7874b52beea6c",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nI need to explain that what business process is because some of you probably already have experience with \ncustomizations and some of you probably already know that business process is a server side functionality which is \ndesigned to automate some business steps that you expect to be performed by system. And in general business \nprocesses are interpreted. It means you construct such kind of diagram and then ask system to run it. System will \nread your diagram structure step by step and it will execute your diagram step by step. So in general business \nprocess is saved as set of metadata settings. Technically it's a text with all necessary information about its \nstructure.",
    "chunk_type": "paragraph",
    "chunk_index": 42,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 116,
    "token_count": 135,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 42
    }
  },
  {
    "chunk_id": "cbc94ce20257047943872da8b51014f7",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nAnd we have a special process engine, so it's a backend server side item quite important and very big which is \ncapable to get such metadata and execute it step by step according to the diagram items. Okay, let's start. So I need \nto provide a code usr and I need to explain the business sense of my future process. My business sense will include \nsome calculations and also I will work with database. So I also plan to connect and to use one example for different \npurpose. And this example will be used not only to demonstrate how you can run C sharp code in creatio but also to \ndemonstrate how you can write some a code that operates with the creature database and which operates with the\n\n--- Page 9 ---\n\ncreature data model using its own native tools. For this I will explain it later.",
    "chunk_type": "paragraph",
    "chunk_index": 43,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 151,
    "token_count": 176,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 3,
      "position_in_document": 43
    }
  },
  {
    "chunk_id": "de15c7e08d7266a47a30212b981065fd",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo my business sense is to make a process which will do some calculation at server side. And my calculation will \ninclude selecting some data and calculating average price for realty record. So my process name will be something \nlike Coke Average Realty Price process and the title of the process will be Calculate Average Realty price. Please \nconfirm do any of you follow me directly at the session or you just watch it as video and then you plan to do your \nown steps? It's important for me to know how long delays I should provide for you and how I should say make poses \nor not. So if you follow me just live during the session, please click Please type plus in our chat it will let me \nunderstand that I have to make poses for you to do the same during the session.",
    "chunk_type": "paragraph",
    "chunk_index": 44,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 149,
    "token_count": 167,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 44
    }
  },
  {
    "chunk_id": "b77cc2a2fd8834bbbe0ed7a90f91496d",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nIf not just type Minus which means you are only watching and I can do it faster. Okay, thank you. Thank you. Monica, \nAdrian, Eddie. Thank you to share. Okay, it looks like someone from you also following me. So I will not go too fast. \nNow I made a process with a title and the code. No any other changes and plan to save it in my USR realty package \nwhich is used for Freedom UI example. It also makes sense to name my beginning of the process. I call it like start. \nAnd here we will have successful finish. So normal end of the process. Okay, save it. As you can see, first time it \ntakes a while to save it. But in general, now our process represents a diagram which has a starting point. Generally \nprocess will start from all items which have no incoming flows.",
    "chunk_type": "paragraph",
    "chunk_index": 45,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 152,
    "token_count": 188,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 45
    }
  },
  {
    "chunk_id": "96c52975a727464ff34edaf3a7328d74",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo if your process has no incoming flow, it means it's the start of your process. So take care. If you accidentally drop \nitems on your diagram without incoming flows, it will be treated as a beginning. So please be careful. Okay? So my \nplan is to show you not all the process engine tools, but only developer part of it. So part where it makes sense to \nwrite code and include some, let's say developer skills into your product. Because also Business Process Engine and \nGeneral Process Editor has a lot of no code tools which we will also use but without explaining all the possible \nfunctions. So I will show you only major things that we will need for our example. So my main focus today is to show \nyou items that are included in development.",
    "chunk_type": "paragraph",
    "chunk_index": 46,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 141,
    "token_count": 165,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 46
    }
  },
  {
    "chunk_id": "1d1460d137adfc8db76f2385961c9776",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nIn general, you know that Business Process Editor has two types of items that you can add. System actions which \nare executed quite quick, they do not require user feedback and they are executed automatically at server side. And \nwe have items called user actions. User actions are designed to show some page for a user, usually waiting for \nsome feedback after it. And user actions are designed to stop your process execution for some time till user will \nrespond something till user will provide some input or will confirm that user gets some output. So user actions will \nmake your process much more interactive. Okay, we have some other types of items like starting events, \nintermediate events, finishing event and logical gateways. So I will show you on the developer part of it which you \nneed to know if you're really interested in like becoming a process expert.",
    "chunk_type": "paragraph",
    "chunk_index": 47,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 152,
    "token_count": 178,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 47
    }
  },
  {
    "chunk_id": "12511b747689ccbe13bbe466c4799d9b",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nYou can also consider going to our customization course where my colleagues teach how to manage processes. So \nwhat my plan is I user. I use system action script task, the only item in all business process which requires coding in \nthis diagram. So this item should be carefully put on the diagram. I can intentionally show you how you can do it \nincorrectly. Like this. Then you move it like this and then it looks like you added this item to the diagram. But in \nreality this is not correct. I will show you that this item does not say connect to this flow. And if you do it like this \nitem has no incoming flow. So it will be started at the process beginning, not as you plan. And that's why you should \ntake care of it and put it properly.\n\n--- Page 10 ---",
    "chunk_type": "paragraph",
    "chunk_index": 48,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 150,
    "token_count": 176,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 2,
      "position_in_document": 48
    }
  },
  {
    "chunk_id": "ecf502d02036fb04543fa4d6fe359800",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nNow you see when you slightly move it then you correctly put it on the flow. So you should practice a bit with placing \nitems on the diagram and making sure that you do it correctly. Now this item has incoming flow, it has its own C \nsharp body. And we have some notes here, but it's only for long lasting operation. And then we have finish item. So \nwhat we can do here, this is a C script that physically will turn into a method of automatically generated class. \nCreature is capable to generate such some C sharp sources for it and then it's capable to compile them.",
    "chunk_type": "paragraph",
    "chunk_index": 49,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 112,
    "token_count": 130,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 49
    }
  },
  {
    "chunk_id": "8a5ae16b324cffd54397fc4e3dcd1d23",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo now you will see that we can write some C sharp code here and then save apply changes for our process and it \nwill turn into automatically generated class and our code here in this C sharp script will turn into a method. It will not \ntake too much time for us because I already have some pre developed examples for you and it will be server side \nNDPTS schema query for calculation. So I already have some example which will work for us. Probably I should \npaste it into our chat and paste it for you because it's quite big. I will put it into parts because Zoom has some \nlimitations on chat messages size so we can take chat messages. Probably we will slightly need to replace names \nhere like this, but you will see it.",
    "chunk_type": "paragraph",
    "chunk_index": 50,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 142,
    "token_count": 159,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 50
    }
  },
  {
    "chunk_id": "b2c8e1278a051ff6a647f853350d319a",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nOkay, so I copy and paste this code to the editor. We can also expand this editor to see like in more comfortable \nways. And if you ask me about is it possible to use modern powerful editors like Visual Studio or Visual Studio code \nto type code like this. Unfortunately for business processes it's not intended to be used so it's not supported. And for \nbusiness processes writing a short code here in this editor in general it's okay. So you will not suffer too much by \nwriting just 10 or 20 lines of such code. But if your plan includes to run very complex calculations, including different \nclasses, including a lot of other things, libraries and tools, it makes sense to implement complicated logic \nseparately. You can use C sharp source code for it and then just to create corresponding instances of your classes.",
    "chunk_type": "paragraph",
    "chunk_index": 51,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 149,
    "token_count": 177,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 51
    }
  },
  {
    "chunk_id": "5636306bb68116d497e09afea371b015",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nProbably also using a tool called class Factory and you may create instances of classes that will Work as helpers for \nyou. Then you can just make corresponding setting and run corresponding methods. That's how you may keep this \ncode quite small sized and do not need to create very complicated logic just here. So it was not intended to be used \nfor complicated logic. It was created with ideas of using of existing classes and making this code not so big. So if \nyou need big logic, please implement it separately as normal classes with source codes where you will be able to \nuse Visual Studio to develop so you will have comfortable conditions for it. And here it's not so comfortable. I agree \nthis editor is not so powerful, but you can bypass this disadvantage because of not writing too much code here.",
    "chunk_type": "paragraph",
    "chunk_index": 52,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 148,
    "token_count": 168,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 52
    }
  },
  {
    "chunk_id": "304f726713834af8d99dd493f73ce4b8",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nOkay, so I will save my code example. It's not finished yet. I will just show you what happens if you try to save. So if \nyou have a changes in your script task and you save, your process system asks you to compile here publish means \nstart compilation and I do not plan to do it right now because my code needs some improvement and I need to \nexplain what is going on and explain you step by step what is happening here. So in general I need to explain you like \ncommon idea of what we are doing. The common idea is to run a business process which will accept some \narguments at the beginning and then we will do calculation of average realty price based on our existing data. But as \nyou may guess working with realty data, we have different types of data records.",
    "chunk_type": "paragraph",
    "chunk_index": 53,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 151,
    "token_count": 172,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 53
    }
  },
  {
    "chunk_id": "91911573cb82151d4385408ac3a9269b",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nLet me show you a bit more examples like apartment in will be an apartment for sale. Okay. And yeah, it should be \nreloaded probably. I just feel okay, it's apartment and this also is an apartment for sale. So what I wanted to show \nyou we have different types of realty like houses and apartment. They have different pricing values, they have\n\n--- Page 11 ---\n\ndifferent pricing models. So it's not good in general to mix apartments and houses. Also we have different offer \ntypes like sale and rental which are totally different. So it's totally incorrect to mix values for rental, monthly \npayments and full cost of some realty records. So it's not correct to mix them and try to calculate some average \nprice because between it. So we have to do quite smart filtering.",
    "chunk_type": "paragraph",
    "chunk_index": 54,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 141,
    "token_count": 173,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 3,
      "position_in_document": 54
    }
  },
  {
    "chunk_id": "b60d35754b6cac1d42f5c1a7e8200eb2",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nWe need to take into consideration only records with a certain type in order to split apartments from houses. And \ndefinitely we have to filter data according to offer type splitting sales from rentals. So when we do this average price \ncalculation we will need to have filters or offer type to include only rentals or only sales and general realty type to \ninclude only apartments or only houses. And then we will calculate total Amount of all selected records, total price. \nThen we will divide by total area of them in order to include and consider different areas for different objects. So \nwe'll count, in general, we will count like average price of a real to per square foot of the area. And that's how we will \nfinally get our result. So the real sense is just counting similar objects and getting average price per area.",
    "chunk_type": "paragraph",
    "chunk_index": 55,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 150,
    "token_count": 174,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 55
    }
  },
  {
    "chunk_id": "5db8137618cf66b67af58bcd2ff3448b",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nAnd physically how we do this is the C Sharp code written in this editor. And yes, I agree that if you don't know C \nSharp, it could be quite hard for you to write it without mistakes. So if you type some code here, if it has mistakes, \nsystem will not show it immediately for you. For example, if you write something like this with a missing name of \nyour method, so if you do some mistake with spelling, then you will note about it. So you will know about this \nmistake only when you start to compile. So unfortunately there is no background syntax check that will show you \nwith a red color that you have some mistakes here in this text. But it's designed to be quite small and it should be \nquite obvious. So we do not think that it's a real issue.",
    "chunk_type": "paragraph",
    "chunk_index": 56,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 150,
    "token_count": 177,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 56
    }
  },
  {
    "chunk_id": "e04d23b97b8c7c33649cd055198a28d5",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nOkay, so let me explain in general what is happening here. I plan to operate with creation database. We have two \ndifferent ways to operate with the database. And now I'm using the approach which supports entity data model. \nSimply speaking, IT supports items like objects and respects object structure, object columns and references and \neverything that we design at creature orm Object relational model ORM of creation is based on objects and we can \ndesign them when we save and publish. Object structure is applied to the real database tables and columns. So \nthat's how it works and working with this class entity schema query Class means making selections of data records \nfrom creation data model, respecting objects, respecting all their column structures. So using this information.",
    "chunk_type": "paragraph",
    "chunk_index": 57,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 131,
    "token_count": 154,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 57
    }
  },
  {
    "chunk_id": "b260a39d95b5e689c7ba966fb3ef64cf",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nAnother approach which we will study a bit later is based on direct database selection from its tables without use of \nobject model. So we will be able to write down our own selects some columns from some tables where some \nconditions without taking care of support of object model. But now this approach shows you this possibility with \nsupport of object model. And this is one of two major approaches to get data. There are some advantages of using \nsuch approach and it supports access rights restrictions. So if this code is running under single user credentials, it's \npossible that user will have no enough access rights to operate with data. So if you run your data selection with \nentity level with support of object model, so it will restrictions, it will read no data if such Data is not available \naccording to access rights.",
    "chunk_type": "paragraph",
    "chunk_index": 58,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 149,
    "token_count": 169,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 58
    }
  },
  {
    "chunk_id": "f7ac5621940c01f9294d7bc80961f988",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nAlso Entity schema query supports caching at server side. If the same data is obtained too many times at the server \nside, it's possible to organize your code in the way that this data was first obtained from the database and all second \ntimes it maybe will update will be taken from the server side application cache and that's how you may do your \nselections more efficient. So entity schema query supports caching. Also it supports paging when you need to \nprocess a very big set of data records and you prefer to do it by parts working with portions of data pages and entity \nschema query also supports complex query structures including hierarchical queries. That makes sense when you\n\n--- Page 12 ---\n\noperate some data which can be displayed in tree view. Okay, let's not go too hard and too deep. So currently simple \nanswer.",
    "chunk_type": "paragraph",
    "chunk_index": 59,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 150,
    "token_count": 174,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 3,
      "position_in_document": 59
    }
  },
  {
    "chunk_id": "11e2d33740c3e763c12bb258f0b6acd4",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nEntity schema query is a class which supports object model and it has only one single purpose select list of records \nfrom the database. It has some arguments when we run its constructor. We have several overloaded constructors \nfor this class and it has arguments. One of them is quite standard so you will always use it. And second argument is \na text representing our object code. As you remember our code is USR realty so we have to correspondingly modify \nthis one. So you should do this at your own. I will also note it in chat and this is how we can create an instance of our \nclass which will be used for data selection of our entity schema query. We have to specify its settings, we have to \nmake it work properly for us. So we need first to select columns.",
    "chunk_type": "paragraph",
    "chunk_index": 60,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 147,
    "token_count": 169,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 60
    }
  },
  {
    "chunk_id": "ecdb3a4de43660eb42e3a4d56406f6b5",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nAlso you may ask me if we type this code like this how we know about present functions, methods properties and so \non. We have some Academy server side documentation. Let me show you backend development.net classes \nReference Go here and we have set of cluster libraries for creation. Server side you can search for entity schema \nquery class. Here you will see all of its definitions structures so you will see all of its constructors 1, 2, 3, 4 four \ndifferent overloaded constructors. I'm using this 1/3 one and we have a lot of public properties. A bit below you will \nsee public methods and so on. So if interested you may find this SDK information at Academy website and we'll go \nback to our code. I agree. Currently it looks like a bit boring stuff so I try to go through it quite quickly.",
    "chunk_type": "paragraph",
    "chunk_index": 61,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 149,
    "token_count": 181,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 61
    }
  },
  {
    "chunk_id": "b094ac9a9074be91377e61af12a6c879",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nWe only make sure that we have the same columns as we plan to work with and we don't have any obvious rude \nmistakes here. So let's look at our reality Object just to match our columns we need to select price and area. Here we \nhave USR price USD column and USR area. Okay, so it looks like the same. We can add columns to our query. You \nmay also face a method named addall schema columns. But I strongly warn you from using this method because \nwhen you add all schema columns may happen that you are working with a quite big entity with hundreds of \ncolumns and without thinking you can add a lot of columns which you will never use later in your code. So it's better \nto save system resources and do not add all the columns until you really need it.",
    "chunk_type": "paragraph",
    "chunk_index": 62,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 150,
    "token_count": 174,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 62
    }
  },
  {
    "chunk_id": "321f8276c5ff0360014d5b1105a94efa",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo it's better to always add only columns into your selection which you really need to analyze later. In my case I need \ntwo columns, price and area and making such methods to our entity schema query will result into adding couple of \ncolumns. So the part of our selection statement that we will finally start at the database overcrowc select then set of \ncolumns that we do from our realty table. From this table is called root entity which is the first one which will be \nused for construction of our query. It's possible to use joins and add other columns to our selection. But in my case I \nneed just very simple example. I will use the only one table. In general it's possible to make joins with other entities \nand in my case it's just not necessary.",
    "chunk_type": "paragraph",
    "chunk_index": 63,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 143,
    "token_count": 166,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 63
    }
  },
  {
    "chunk_id": "ac4cf330a64024342f3e70c6f84c62b9",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nBut it's possible you can use this argument as a special column path expression. Column path may include joins if \nyou use lookup columns of your main entity. In this case it's called direct join or if you use lookup columns of join the \nentity. In this case construction will be a bit more complicated and it's called reverse joins. If interested I can show \nyou where I can get more information about this ORM programming. So let me show you database tools. No, no, no. \nIt's about architecture probably second no, it's about architecture, Object events, data operations, Direct access, \nORM overview. Yes, somewhere here.",
    "chunk_type": "paragraph",
    "chunk_index": 64,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 109,
    "token_count": 138,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 64
    }
  },
  {
    "chunk_id": "f5383757b1ba1dea9880dc14b97dc74a",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\n--- Page 13 ---\n\nSo we have root schema which is the main from table of our select statement and it's possible to add connections \nto other entities and using direct connections when you select city, you can join to the sanctuary countries to get its \nname or you can use reverse connections when you have account and you would like to. Or in this case it looks like \nyou select cities and you would like to join all accounts from this city. And this article will let you know more about it. \nSomething like theoretical stuff. In my case it's pretty simple so I will select only one Table one Couple of columns \nfrom this table, no joins at all. And here is how I do this. But then I will need filters because my plan is to select only \ndata for a certain realty type and certain offer type.",
    "chunk_type": "paragraph",
    "chunk_index": 65,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 154,
    "token_count": 176,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 2,
      "position_in_document": 65
    }
  },
  {
    "chunk_id": "8d5f6aa6940c59316a524c079b584318",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nI plan to get corresponding values for my filters with the help of no code tools. So I expect to get such values. I will \nshow you how to operators process parameters a bit later. Now we consider we getting it with a special get \ncommands from process parameters. So we get couple of guids type and offer type and then we make filters. Such \nfilters are made with the create filter with parameters method, which is I think the most popular method for building \nfilters for entity schema query. And this filter condition is pretty simple. Column equals value and finally our where \nstatement will look like this column equals one value and another column equals another vote. By default, a logical \ncondition to join all the filters we have in filters collection is logical and that's why we do not modify it.",
    "chunk_type": "paragraph",
    "chunk_index": 66,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 147,
    "token_count": 168,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 66
    }
  },
  {
    "chunk_id": "479d944086f6a31b1ac35b0479f96e8d",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nBecause we know for sure that by default our ESQ filters has end logical connection logical conjunction operator. \nThat's why we have it without any special setting. So if you want only for debugging purpose, you can get SQL text \nfrom your query, so it's possible it's supported. You can get SQL text and we can save it and then to use it for some \ndisplay, but only for debugging purpose, especially in like especially highlight this for you because for real execution \nyou do not actually need this SQL text. It will work even without your asking of SQL. And this is just for your better \nunderstanding of how selection is performed. So this will be necessary only for debugging for us.",
    "chunk_type": "paragraph",
    "chunk_index": 67,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 126,
    "token_count": 149,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 67
    }
  },
  {
    "chunk_id": "f110bfa51e94835d6c6bd807e7ac3bc9",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo when we finished with building entity schema query, adding columns and adding filters, we can consider at as it's \ndone and we can run the main function for selecting data. This is getentity collection method, which finally returns \nas some collection. Also you may notice that we use special arguments here and here. And this argument is called \nuser connection. This is very important instance of a class which represents current user connection context. So \nuser connection is unique for each user session. Even if you have supervisor user and you started your system \ntwice, for example in two different browsers, you will have two different user connection instances for this. So user \nconnection has a lot of useful properties like current username, current user id, current user contact and some \nsystem stuff like information about database connection, some security stuff which is also important to know.",
    "chunk_type": "paragraph",
    "chunk_index": 68,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 151,
    "token_count": 179,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 68
    }
  },
  {
    "chunk_id": "51983a9d9cb83fc347067151cf38f31f",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo generally when we user connection in our code it represents current user context and this is mandatory to \noperate with creature database. So each time when you will run any kind of query that you want to be finally \noperating with your database, you will have to provide user connection because this one is like in general what you \nplan to select. But user connection is an important argument which tells the system who exactly is running this \nquery. System will include access rights permissions if necessary if this user is not an administrator. So user \nconnection is a very important context information for system and it's mandatory for any database related \noperation. Okay, we finally got our collection as a result, this result is set of records. Each one represents an entity \nclass entity represents one single data row of a certain object.",
    "chunk_type": "paragraph",
    "chunk_index": 69,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 148,
    "token_count": 169,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 69
    }
  },
  {
    "chunk_id": "2f8e0ba542aa3188a2e8d21bfe4619f3",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\n--- Page 14 ---\n\nAnd as we get this collection, we have to process it line by line. So we can use for each statement or there are other \nways to process collection. In my case I prefer to use for each and we use it for each row or as many rows we have \nin collection. We will have as many runs of our cycle body inside of our cycle. We can have this entity reference \nwhich implements just one data row of the collection and we can run. So this entity record is actually a supports an \ninterface called Entity I entity and that's why it has methods. So we can run methods like get typed column value. \nGet typed column value lets us to get certain value of a certain column from our data row.",
    "chunk_type": "paragraph",
    "chunk_index": 70,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 141,
    "token_count": 160,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 2,
      "position_in_document": 70
    }
  },
  {
    "chunk_id": "3be08f8798b730e82bd94156ba81ddcf",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo simply speaking, this is the line how we get exact decimal price from our data. And next line is getting the same \napproach for getting decimal area. We have some counters here which we use to collect all the prices and all the \nareas. This example is pretty simple and so I'm just going into so many details only for those of you who probably \nhave not so much experience of C Sharp. So you will understand in general how it works and you'll be able to \nreproduce it and fix it if something goes wrong. Finally, when we finished we'll have counter for prices and for areas \nand then total result will be a result of division of all the prices by all the areas and we will have a final result and we \nwill save it into a certain parameter.",
    "chunk_type": "paragraph",
    "chunk_index": 71,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 146,
    "token_count": 167,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 71
    }
  },
  {
    "chunk_id": "63cfb77dbbe6da062369905d062cbf02",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nCurrently it looks like our code is ready. We don't have corresponding parameters so far, so possibly we have to \nimplement it and then save and publish. But it looks like we need some like say five or ten minutes or break. So let's \nmake it break and then we will continue this stuff and you will see that finally it's not so boring. And I will also show \nyou how to debug such code today. So let's make a break. If you have any questions in the break also please note \nplease Type them or just ask. I will come back in less than 10 minutes. Thank you for waiting. Let's move on. And \nnow we have to think of how to actually use this code into our process. So we have this part and we fixed all the \nitems here. Now we have to think of parameters.",
    "chunk_type": "paragraph",
    "chunk_index": 72,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 152,
    "token_count": 180,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 72
    }
  },
  {
    "chunk_id": "d395a37b5b7fc3a0110d6d93e988438b",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nC Sharp sources inside of business processes can get some data from process interpreted part and then return \nsome data into processes interpreted part. The best way to do this is to use parameters. So parameters can be \nconsidered as a variable for the process and process. Items also may have their own parameters. So in general we \ncan think of parameters as global variables for the process or for certain values of process items. I plan to work with \nglobal process parameters and we need some of them like reality type id. So we plan to register such parameter as \nunique identifier. Code is used inside of programming title can be used for user interface settings in process \ndiagram. That's why I use popular so title and code I copied it from the code. So here I used this one.",
    "chunk_type": "paragraph",
    "chunk_index": 73,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 144,
    "token_count": 165,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 73
    }
  },
  {
    "chunk_id": "74565120c58ea62a00af75d91542d9d1",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nAnd when we use get generic expression on getting grid value and this parameter as an argument we ask system to \nread corresponding parameter value from the process and also we will do with the offer type. So I copy its name \nshow it for you Go to process parameters. Also I need to explain if you click on some process item it will show you \nselected item properties. If you click on the blank or if you click on this green button you will see process from \nproperties. I prefer to click on the blank because it's easier and parameters add unique identifier offer type id we \nneed it as arguments for our code. Okay, couple of arguments are ready. Then I plan to return back debug sqltext \nparameter so it will be text 500.",
    "chunk_type": "paragraph",
    "chunk_index": 74,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 139,
    "token_count": 158,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 74
    }
  },
  {
    "chunk_id": "80f02e4612abfff21b1bec4479508214",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo creating parameters you like declare variables for your process and the final result will be my average price \nparameter and it will be decimal. So add decimal parameter and I will do it like this. Okay, I hope you are quite good \nin doing it. So my question is for Monica and Paddy. Please confirm when you finish this part. We create couple of \nGuids unique identifier, 1 text 501 decimal. Monica and Paddy, please confirm when you're ready with this. Thank\n\n--- Page 15 ---\n\nyou Monica. Thanks Paddy. Okay, great. So we can move on. So we plan to use such parameters, but also I will tell \nyou that unfortunately we have so fortunately we have possibility to run process as a no code tool with no \nprogramming from section list or section page in Freedom UI and unfortunately we can only pass one single value \nas an argument.",
    "chunk_type": "paragraph",
    "chunk_index": 75,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 155,
    "token_count": 190,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 3,
      "position_in_document": 75
    }
  },
  {
    "chunk_id": "c7c1bdd842a15146640640c121ce9c13",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo my plan is to Use as much as possible of no code here. And for example we can select a source certain record or \nwe can open certain page. Then I plan to make a button which will run the process, but unfortunately we can only \npass one single data value as argument when running no code parameter processes. So in no code mode we can \nonly pass ID of the currently selected record argument. And I plan to use it in my process. So my plan is to get this id, \nthen to use no code tools to select corresponding data values from the database and then to provide corresponding \nparameter set. So as example in my case in my parameters I plan to get an input process parameter and we can \nname it reality id.",
    "chunk_type": "paragraph",
    "chunk_index": 76,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 141,
    "token_count": 158,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 76
    }
  },
  {
    "chunk_id": "f2115cf893683c03ff3187d5bef7b0df",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nIt will be also unique identifier so we can call it realty ID parameter and here its title will be reality id. Title is \nimportant for user display and code is important for programming. Okay, and we can set this parameter as input \nparameter. Input parameter will be designed as read only. So process expects this data to be set at the beginning of \nthe process when process is called and it's not expected to be changed it. So input parameters will be treated as \nread only. You will not be able to save its changes. We have no initial value, so we expect this data to be provided \nfrom input. You can see that input parameters only one single green colored arrow and the directional parameters \nare used with two sides arrows and green and red. Okay, so we expect to get this reality id.",
    "chunk_type": "paragraph",
    "chunk_index": 77,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 149,
    "token_count": 172,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 77
    }
  },
  {
    "chunk_id": "af080900762c259d65d0bcebaa788a82",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nWhat we will do with this id, I will use a bit of no code tools. Read read data item carefully placing it on my diagram. \nYou see there is a special display when you put it properly. Okay, my read data item will be used to get ID of type and \noffer type. So read first record of separate selection. Okay, what object? Reality object which is a Freedom UI \nexample. In reading one single record, it makes sense to make filtering. Otherwise we will randomly get some data \nrecord and we want to get a corresponding proper one. So I will make a filter, click here, add condition type ID for \ncomparison equals with parameter and I will select my process parameter realty id. This is and then click select or \ndouble click here. That's how I will make this filter.",
    "chunk_type": "paragraph",
    "chunk_index": 78,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 146,
    "token_count": 174,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 78
    }
  },
  {
    "chunk_id": "3c011304dcba206c95174735264b3d85",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nThis filter will be enough to make read data to select just single record from my database and we can name it read \nreality. Read reality will be its title and it will be also shown here. In general, it's good idea to provide corresponding \ntitles for all of your items and no need to sort if you have just one record and reading all columns. I do not \nrecommend you to use this option. So reading all Columns means you don't care how many columns will be there. \nAnd in some cases it can happen that you will have too many columns. So it will mean that you unnecessarily load \nyour system with querying of all the data you have. So it's much better to set read data only for selected columns \nonly. And we can specify what columns we are interested at.",
    "chunk_type": "paragraph",
    "chunk_index": 79,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 147,
    "token_count": 169,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 79
    }
  },
  {
    "chunk_id": "579cca14f5b79d5a9755537ff6099393",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nWe are interested in type and offer type. So originally we expect to get only ID of the certain reality record. Then we \nwill look into database to get its type and offer type and then we will use read data item to get such type and offer \ntype. Once we obtain it when process is started, results of such data records will be saved somewhere inside of this \nread data item. It turned out to be not very easy to get it outside from it with programming. So I decided to have a \nseparate two parameters at process level. So I have specially designed parameters for type and author type and \nwhen the parameters are at the process level makes it not so hard to get and from the C sharp code.\n\n--- Page 16 ---",
    "chunk_type": "paragraph",
    "chunk_index": 80,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 140,
    "token_count": 157,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 2,
      "position_in_document": 80
    }
  },
  {
    "chunk_id": "40e79af3418b1a5200d58c6f4d9379fb",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo we will use getting data from read data into process level parameters and we can do it easily with formula. \nFormula is simply just an assigning operator for a left part of it will be your parameter that you want to set formal \nvalue to. This is for example type ID and right part is formula expression value which will be used now just to get \nsome data out from deeps of read realty parameter and offer and type. When I click double click here you see a \nspecial macro which displays formula expression and this expression will be interpreted in runtime and replaced by \ncorresponding value in runtime. Formula is an interpreter tool so it will be started and run according to its settings.",
    "chunk_type": "paragraph",
    "chunk_index": 81,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 129,
    "token_count": 145,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 81
    }
  },
  {
    "chunk_id": "54940407d4680418e7099b5e8de200c3",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nMy process will be started Set type it this is our formula title the same approach another formula drag and drop it \ncarefully will be used to set offer type id. So parameter target parameter is offer type ID and form of value takes data \nfrom process elements. Read data offer type double click and then we have this macro save it. That's how we save \nthis offer type ID here this item. We can call it calculate average price or calculate AVG price. This is our calculation \npart. Now it looks like we prepared with the set of no code tools parameters that we use for filtering. And now it's \ntime for us to save our process. But first of all I want you. I want Monica and Padik to confirm that you are good at \nthis stage.",
    "chunk_type": "paragraph",
    "chunk_index": 82,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 142,
    "token_count": 164,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 82
    }
  },
  {
    "chunk_id": "0fc9fa95e053a29fd062eb025f5b5c0c",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo if anything should be shown or explained, tell me please if it's not clear what we are doing also please ask thanks, \nBetty. Thanks Monica. If you have any questions, don't. Don't be shy, don't hesitate to ask. I'm here to help you \nunderstand that listening and doing examples at the same time, it's really harder than just listening. So if any \nquestions or some misunderstanding, tell me please. I will be happy to assist. So our recent steps included taking ID \nthat we expect to get at the beginning of the process reading corresponding ID of reality. I read only two columns, \ntype and offer type. Then I used two formulas to get it out from results of read realty. And then that's how we get \nsuch parameters and then pass this data at our script task part.",
    "chunk_type": "paragraph",
    "chunk_index": 83,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 143,
    "token_count": 179,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 83
    }
  },
  {
    "chunk_id": "2daf430ed1cb69d95601ce7889306253",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo Monica, if any assistance needed, just tell me that we know. Now. You see, I saved my process and I did not \nexplain what is happening here. So when I saved it system. Oh, thank you, Monica. Thank you. So system told me \nthat oh, you changed your C sharp part so it requires compilation. And now it saved my metadata and then started to \ndo publishing, which physically means compilation. We can check what's going on at our application server side. We \ncan see who exactly consumes most of our system resources. Now we can also look at memory consumption and \npossibly I looked here too late because I already do not see any traces of compilation. But CPU high volt CPU is quite \nloaded, so possibly we will see. Oh yeah, we see it here. We saw dotnet Exe at the top of consumption of cpu.",
    "chunk_type": "paragraph",
    "chunk_index": 84,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 152,
    "token_count": 186,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 84
    }
  },
  {
    "chunk_id": "eee025ad810a8d446e028fa17a80ebd7",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nYou saw dotnet Xeno you see. So here we have parts of. NET core framework which is used for creation and it's \ncompiling our assembly in a dot NET library. As a result, we extract expect to get set of DLLs and our package is set \nto be compiled as a separate assembly. Let me explain now, probably I will be not happy. No, I will not be able to look \nat it the property of my package. So when we designed our package, it was automatically set compile as separate \nassembly while compilation is going on. Unfortunately, our system will be not response it will not display some data. \nSo we will see forever hanging requests. And this will happen until our compilation finishes. When it's successfully \nfinished, then we will see unfreeze of all pending queries.",
    "chunk_type": "paragraph",
    "chunk_index": 85,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 141,
    "token_count": 173,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 85
    }
  },
  {
    "chunk_id": "0e88c31092365b237b1ec19f20e2dd2f",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo now you see our realty package has initial setting compiled into a separate smart. This option means that our\n\n--- Page 17 ---\n\ncontents that we did design in our. Oh Monica, you have to leave. Thank you. Thank you. Thank you very much for \nthis. Well, soon we will finish very soon. Thank you. Okay, so our package is compiled to separate assembly. So it \nmeans special mode when package compilable Part is saved separately and compiled separately into a library that \nwill be saved somewhere on disk nearby to our package stuff. So here we have USR realty. Here we have auto \ngenerated code. This code was generated by creatio according to the process structure. You see class definition. \nClass name is designed as name of our process plus process methods wrapper suffix. So we have class name as \ncombined stuff from process name and some suffix.",
    "chunk_type": "paragraph",
    "chunk_index": 86,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 153,
    "token_count": 188,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 3,
      "position_in_document": 86
    }
  },
  {
    "chunk_id": "60ea7061e2c95f8c904a3b81730c2d64",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nThen we have method inside of it and you can see oh, this method is a constructor. Okay, not so interesting. This \nmethod is implementation of our script task. As we did not name our script task into something useful, then this \nscript task has named Script Task 1. Let me show you our process. This script task has parameters and this is just \nname Script Task 1. That's why inside of our code we saw Script Task 1 execute. The text for 8 is exactly the same \nas we typed and saved. And finally this class will be used into compilation to get final result of compilation which is \nsaved into files bin. And this is our DLL which includes results of our logic. Probably if we look here we may find \nsome code.",
    "chunk_type": "paragraph",
    "chunk_index": 87,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 138,
    "token_count": 165,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 87
    }
  },
  {
    "chunk_id": "4b97c10450c19b569210cf891565fee2",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nBut until we are not using any like reverse engineering tools, we probably will not be really successful with analyzing \nthis code. But you may just trust me that finally this code includes business logic and our class stuff here. Okay, so \nfinally we compiled our solution. It turned out into a DLL saved on disk. This DLL is used as part of our application \nwebsite. We have approximately 200 of similar DLLs and if our package for example was not compiled a separate \nassembly. So if you disable this option for a package, then it will turn to much longer compilation. Because a lot of \nbase product packages, they have no such option. Compile a separate assembly. So they all compile into one big \nDLL which is saved here in terms of configuration auto generated folder.",
    "chunk_type": "paragraph",
    "chunk_index": 88,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 140,
    "token_count": 164,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 88
    }
  },
  {
    "chunk_id": "4a7c1ecaa7e730a19e2fbc63b594c3b0",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo we have this set of C files and bin folder here turns into this DLL. So now you see 11 megabytes of executable \ncode, which is quite a lot. And this is result of compilation of big number of base product packages that finally form \nthis dll. So recompilation of such DLL takes much longer, probably three or four times longer than compiling of \nseparate assembly. Adrian is asking what the difference of setting parameter value formula and by directly selecting \nthe withered parameters section by process elements. Oh, Adrian, probably you are asking about this. We have a \nparameter, we have value for it. So we could provide value into this parameter and saving it directly from read data.",
    "chunk_type": "paragraph",
    "chunk_index": 89,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 124,
    "token_count": 150,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 89
    }
  },
  {
    "chunk_id": "545f70ac86a679f95898bc2dd34d8594",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nYes, I understand this idea, but I Do not like this, because it will be not clear for me at what moment of time this \nparameter will initialize its value and at what moment of time this parameter will change its value. So possibly we \ncan do this. You can try. And each time when your read data changes or it gets new results, your parameters should \nhave corresponding mapped values from read data. But I prefer to make it clear and obvious according to the \nmoments when we have some changes. So this is read data. As we finished with this item, it will have its own \nparameters and some results of selection will be saved somewhere here. Then we have formulas to get data from \nthis and put it into parameters here. And it looks like quite exact moment when we change parameter values.",
    "chunk_type": "paragraph",
    "chunk_index": 90,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 149,
    "token_count": 172,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 90
    }
  },
  {
    "chunk_id": "96000178a2855f2429c3b7b24c7ec4ee",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nWith this formula, if we use parameters directly mapped to read realty, it will be not clear for me when exactly \nparameter will be changed. And so I think that our example will lack obviousness and lack visibility of what is going \non. And is it more secure to use formula? Oh, I think it's the same. So it should work when you map parameter \ndirectly, but mapping parameter directly. So it's something that we can do like this, we can map it to process element \nlike type like this. Mapping it directly makes it harder to analyze. So personally I do not like this, but I think it's\n\n--- Page 18 ---\n\nsupported on the platform, so you can do this. Thank you Adrian for your very interesting question. And let's move \non. So now our simple example is ready.",
    "chunk_type": "paragraph",
    "chunk_index": 91,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 144,
    "token_count": 179,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 3,
      "position_in_document": 91
    }
  },
  {
    "chunk_id": "07d99206a1db40c4be32434cdab5f4aa",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 2\n\nI have a quick question about the.",
    "chunk_type": "paragraph",
    "chunk_index": 92,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 10,
    "token_count": 13,
    "context": {
      "heading": "Speaker 2",
      "paragraph_count": 1,
      "position_in_document": 92
    }
  },
  {
    "chunk_id": "7779b1a2b488da7e59501ce525845f08",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nDLLs, if that's okay. I do.",
    "chunk_type": "paragraph",
    "chunk_index": 93,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 9,
    "token_count": 16,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 93
    }
  },
  {
    "chunk_id": "0e4430caf3322a2fd5de23c36e3f3a74",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 2\n\nIs it possible when we're creating them this way that we can call other DLLs maybe outside of this package?",
    "chunk_type": "paragraph",
    "chunk_index": 94,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 23,
    "token_count": 28,
    "context": {
      "heading": "Speaker 2",
      "paragraph_count": 1,
      "position_in_document": 94
    }
  },
  {
    "chunk_id": "18741c7b6c09e3d86b40ab8a95888a2e",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nOkay, we can. Sure it's possible. Let me show you. We have also process level methods. This is kind of a method \nthat is inside of script task, but we have also process level methods which can be used globally on the process level. \nFor example, if you make a big logic and you finally realize that you do the same steps from different parts of your \nprocess, maybe you can implement it once in methods area and then call it many times with different script tasks in \nyour process. So it makes it more organized and better constructed, so you make it easier to support in future. Also \nwe have usings and you can include additional DLLs and namespaces here. So you can include necessary DLL \nnecessary namespaces from DLLs from other parts of your system and that's how new namespaces will be \navailable.",
    "chunk_type": "paragraph",
    "chunk_index": 95,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 148,
    "token_count": 176,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 95
    }
  },
  {
    "chunk_id": "f9697bc163eb891bf9306df71c2e8b95",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nAnd this will be normally compiled and executed. So it's quite common thing how you can add other libraries and \nnamespaces with usings and these usings will form into Let me show you pkg configuration pkg Then your package, \nthen your source automatically generated source. Here you can see on this table standard set of usings. If you add \nyour own, it will be added into this list. So that's how sometimes developers really need to use for example \nnewtonsoft JSON library to make it simple with serializing or deserializing values and maybe other libraries. So you \ncan add it here by providing using in process methods part okay, so we successfully saved and published our \nprocess and you saw it was no problems with compilation.",
    "chunk_type": "paragraph",
    "chunk_index": 96,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 129,
    "token_count": 157,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 96
    }
  },
  {
    "chunk_id": "9d3c561e4288474b6fb4067834e552d8",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nBut in real life when you do development of your own solution, of course you will get compilation issues, you will get \nerror messages, so you will have to go to your code, find corresponding lines, fix it, save again, publish again, and \nfinally you'll have to make your process work normally. Please note if your system is saved in a state, that means you \nhave compilation errors. You will not be able to apply any changes in compilable area until you fully fix your issue \nwith compilation. So it's better and it's like strong advice for you. It's better to keep your system always in fully \ncompilable mode. I mean making your solution. If you try to compile, it always compiles successfully. Because if you \nkeep your solution with compilation errors, you will never know that something is working good or not.\n\n--- Page 19 ---",
    "chunk_type": "paragraph",
    "chunk_index": 97,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 150,
    "token_count": 186,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 2,
      "position_in_document": 97
    }
  },
  {
    "chunk_id": "3b9d9ae88b32497b3d6474cc6d33e836",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nAnd you will not be able to easily apply changes in your compilable stuff because each time you try to compile you \nwill get the same errors. So it's recommended to keep your system to be saved in a healthy state when any \ncompilation finishes successfully. So we already have some part of our process which finally performs some \ncalculation. We can register our process at our section. I will show you how we can do this. So we can run a process \nas a action in our list, or we can run a process by action or a button in edit page. From edit page it looks a bit easier. \nSo let's start from this opening our Freedom UI edit page, then go to its editor. We will finish soon today's session, so \ndon't worry.",
    "chunk_type": "paragraph",
    "chunk_index": 98,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 139,
    "token_count": 166,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 98
    }
  },
  {
    "chunk_id": "26134f668f95a03b0cda92203ba5b114",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nI understand we are going a bit behind with the schedule and today we will spend maybe 10 or 15 minutes more. So \nthis is our page design. My plan is to run my process by a button, but I predict that I will have a bit more different \nactions, so possibly I can use a button with sub menu. Let me show you how we can do this. For example, we can \nPut a button somewhere here, modify its size, style and title like actions. And we can also provide some kind of \ntypical icon used for actions. Something like this. This is very typical for creation no its own action. But we will have \nmenu items. Let's make a subordinate menu items like calculate average price.",
    "chunk_type": "paragraph",
    "chunk_index": 99,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 131,
    "token_count": 157,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 99
    }
  },
  {
    "chunk_id": "8d35ecd4f322ab857b4c7e221ee7987a",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nThis will be our action title Action value will be run business profile process this one run process which process to \nrun calculate average reality price. And we have different modes to start our process regardless of the page means \nwith no parameters for selected page means for edit page data and it means we can only pass record ID as \nargument. This is good for us. And also we have new mode which appeared recently the selected records in list it \nwill get list argument. It's not for our case here, but this is feature which appeared just recently in 8.1.2. I guess so \njust very recently. Okay, select the page and we have process where the record ID is passed. We have only three \nsuitable parameters. Thanks developers for filtering this.",
    "chunk_type": "paragraph",
    "chunk_index": 100,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 136,
    "token_count": 162,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 100
    }
  },
  {
    "chunk_id": "35c9e2cf8ea3aa5f12949b8e63cfc9cd",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nIn previous versions this drop down showed all the columns or I mean all the parameters and generally it's not good \nbecause all parameters included integers included decimals so not suitable for grid and we only now see some \nfiltered stuff. So realty will be recipient of our ID of currently edited record. And as you can see this is a no code \nsetting so it doesn't require any special coding for us. So we can do it with no code tools by passing this data. Okay, \ngreat. We can also use this icon for this stuff. We can do some calculation icon that will demonstrate make it a bit \nmore attractive menu item.",
    "chunk_type": "paragraph",
    "chunk_index": 101,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 117,
    "token_count": 135,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 101
    }
  },
  {
    "chunk_id": "35dc7f3389d4c27d9f0ded230a8ad19a",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nWe can rename it so menu item cog average price just to make it easy to find if we ever needed to find in our view \nconfig diff so as you can see this action is quite easy to do. Let's go back to actions list and we can check how it \nworks. So action will be always available. We can just save this page. Also in recent version we had an unique option \nto run processes by for list for selected records in the list. Let's do this. Let's go back to list page. We can also make \ncustomization here. Now we can make an action it will be started for list. We have a special settings here Filter \nelement bulk actions Such bulk actions is called by so we can call it. We can find it here when we start to select \ndata.",
    "chunk_type": "paragraph",
    "chunk_index": 102,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 148,
    "token_count": 171,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 102
    }
  },
  {
    "chunk_id": "3a2a2ab95b3f0cdd7a488d8b86eb0e64",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo let's make one more bulk action like cultivate average price Our action will be again run process where. Oh, it's my \nfault, I do it incorrectly. Sorry for this. Not. Not this Way. Okay, let's go back. So it was not correct approach. I need to \nmake a. But instead. Okay, let's make a button. Let's put it somewhere here. Size. Okay. Action run process which\n\n--- Page 20 ---\n\nprocess to run? Calculate average realty price for selected records in list. And we have the unrestrictable list here \nData table this one. Okay. No subordinate items. So it will be just an example for you how you can run process in \nlists. This feature supports is supported only starting from version 8.1.2. So quite recently only for recent months. I \nthink if you have a bit older version, you will not be able to implement this easily. Okay, save it.",
    "chunk_type": "paragraph",
    "chunk_index": 103,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 155,
    "token_count": 207,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 3,
      "position_in_document": 103
    }
  },
  {
    "chunk_id": "ab569bc2c346fd81f3a1759370d8c013",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nLet's just start to test it. So we can close the editor. You can also close this one. Maybe let's reload just to fight with \nany possible occasion of browser cache. So let's calculate something for houses for sale. For example, for this \nrecord calculate average price. Something was started with name undefined. Not found something is not good here. \nOkay, we can also check process log. Did we have any start of the process day? No, means that we faced something \nwrong. I did not start. Okay, and let's go to reality edit page. Okay. Apartments for sale. Opening it. So as an \nargument we have this ID Actions calculate average price successfully started. Now we have no visual output. So we \nonly know that process started. We can go to process log. We can see that process successfully completed. We can \nopen history execution of this item.",
    "chunk_type": "paragraph",
    "chunk_index": 104,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 152,
    "token_count": 191,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 104
    }
  },
  {
    "chunk_id": "e9cd9cb87d8be1d60edf2cf7adef45a1",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSort by date of start. Read set formulas, calculation finish. It looks like everything went correctly here. We do not \nknow exact values, exact numbers. We will study debugging of it tomorrow. Now we just make sure that the process \nstarts and normally finishes. Okay, now let's fix our stuff with the list. Looks like I missed something very simple. So \nlet's go to customize list again. Here is our button that runs process this process. How to run the process? Oh yeah, I \njust missed very important parameter where the record is passed. Real TID parameter. So it was my fault. I \noverlooked it. Okay, save it. Save this stuff and then we see how it goes. Okay, close probably to work. No, we have \nto reward it Houses for sale. No, no. We wanted to run it in list.",
    "chunk_type": "paragraph",
    "chunk_index": 105,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 144,
    "token_count": 186,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 105
    }
  },
  {
    "chunk_id": "2653a8ff85e50e257bd7bbeb3ad669f2",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nOkay, so this one is our list Selected data Calculate average price successfully started. I expect to run only one \ninstance of a process here. Yes, it was correctly started seconds ago. We can see all the steps were done. We can \nalso see execution diagram which will show us these steps executed. And tomorrow when Monica returns and you \nwill be not so tired. So we will move on with. We will move on with debugging this code and also making it visible \nvisual. So today we made only part of the work. Today we implement the main calculation part of the process. We \ngot some result data, but we do not know how to actually see it. So tomorrow I will show you. Today we only \nfocused on C sharp part.",
    "chunk_type": "paragraph",
    "chunk_index": 106,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 136,
    "token_count": 160,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 106
    }
  },
  {
    "chunk_id": "b90de714ae84204ab10ae332bbe27a47",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nBut in order to make this example fully working, we need some more items and we need debugging to make sure \nthat our code works accordingly our expectations. I just wanted you to see how we can run this calculation for \nmultiple scenarios. For example, houses for sale, houses for rental and apartments for sale. We have three selected \nrecords. We can run this process and I expect to run three instances of processes. Let's check out. Yes. Now you \nsee the last minute we have three instances of processes started and each one with its own input arguments. So \nhow many records you run? The same number of records you will see here in calculate average price Process log \nrecord Process log shows you history of all started processes in your system. And for each process started you see \nits elements.",
    "chunk_type": "paragraph",
    "chunk_index": 107,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 145,
    "token_count": 169,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 107
    }
  },
  {
    "chunk_id": "3c36df3b97b00015266834128e3014c3",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nYou see start and end date is status. We will see how you can how we can debug this especially C sharp part and \nalso how to check its performance. So today's session is over. The most interesting part will be tomorrow when we \nwill run this process and display some data and also how we will debug this process. Thank you very much for your \ntoday attention and education case. In case of any questions, please ask and we'll see each other tomorrow. Thank \nyou very much. Adrian, Paddy Kratz, Francisco Rakhi and others. Thank you.\n\n--- Page 21 ---",
    "chunk_type": "paragraph",
    "chunk_index": 108,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 104,
    "token_count": 128,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 2,
      "position_in_document": 108
    }
  },
  {
    "chunk_id": "0337e4f28dc720bfdcb517f83e79d5cd",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 2\n\nI have a quick question, if that's okay.",
    "chunk_type": "paragraph",
    "chunk_index": 109,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 11,
    "token_count": 16,
    "context": {
      "heading": "Speaker 2",
      "paragraph_count": 1,
      "position_in_document": 109
    }
  },
  {
    "chunk_id": "a4096114baf56d6e42998ca1c19e7c3c",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nYes, yes, please.",
    "chunk_type": "paragraph",
    "chunk_index": 110,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 6,
    "token_count": 11,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 110
    }
  },
  {
    "chunk_id": "9b2bbbafb1922afda9ab30d2eb1eb746",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 2\n\nIt's just about business processes. So at the moment we're tying them to. We're binding them to buttons. But like \nwhat can we bind them to? Like how robust is this? Can we bind them to like objects or can we bind them to \nwhenever a data is changed on a certain object or something like that?",
    "chunk_type": "paragraph",
    "chunk_index": 111,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 60,
    "token_count": 74,
    "context": {
      "heading": "Speaker 2",
      "paragraph_count": 1,
      "position_in_document": 111
    }
  },
  {
    "chunk_id": "f71538e1c2377d3487ba3782417515f5",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nIt's possible, sure. But I try to keep it simple and use it as possible of no code. That's perfect.",
    "chunk_type": "paragraph",
    "chunk_index": 112,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 23,
    "token_count": 31,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 112
    }
  },
  {
    "chunk_id": "30c0c6e27e30f47c95797dbbfc057d98",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 2\n\nI understand.",
    "chunk_type": "paragraph",
    "chunk_index": 113,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 5,
    "token_count": 8,
    "context": {
      "heading": "Speaker 2",
      "paragraph_count": 1,
      "position_in_document": 113
    }
  },
  {
    "chunk_id": "5f83e8afec10ebb3ce6af5732ae48ce3",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nI'm just curious manually. But yes. Later I will show you how we can trust trigger some business logic that will start \naccording to data change. So we will do data change and for example insert of new reality. And then we can run \nsome business process that will start only in certain conditions. And for example, only if house or apartment for \nreality was added. I will show traitor. It's not so difficult. So we are looking only at small part of available tools that \nwe have on board on business process platform. So I'm trying to show it simply. But in general it could be much \nmore complicated and also processes can be more complicated. We have a sub process item which makes it \npossible to develop big processes that contain smaller processes inside.",
    "chunk_type": "paragraph",
    "chunk_index": 114,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 139,
    "token_count": 165,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 114
    }
  },
  {
    "chunk_id": "c8b461f3bc4dc709d45f2517e635aaa4",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nSo you can do it in much more complicated way and trying to keep it simple. Because we are studying. We need to \nsee some simple examples, understand how it works, understand how you can control it, and then go further with \nmore complicated scenarios and topics. Thank you. Brilliant.",
    "chunk_type": "paragraph",
    "chunk_index": 115,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 53,
    "token_count": 65,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 115
    }
  },
  {
    "chunk_id": "cf99d5bd9ef8bd2fa02cf226ac9c7606",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 2\n\n--- Page 22 ---\n\nThanks a million.",
    "chunk_type": "paragraph",
    "chunk_index": 116,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 10,
    "token_count": 15,
    "context": {
      "heading": "Speaker 2",
      "paragraph_count": 2,
      "position_in_document": 116
    }
  },
  {
    "chunk_id": "eeaf22867d67fbde85804f093de746ff",
    "document_id": "7ce29bfbf05e",
    "content": "# Speaker 1\n\nThank you. See you soon. See you tomorrow. As usual, you will receive video recording very soon. Thank you. \nGoodbye.",
    "chunk_type": "paragraph",
    "chunk_index": 117,
    "metadata": {
      "source_type": "pdf_transcript",
      "pdf_file": "Creatio-Developer-6.pdf"
    },
    "word_count": 23,
    "token_count": 34,
    "context": {
      "heading": "Speaker 1",
      "paragraph_count": 1,
      "position_in_document": 117
    }
  }
]