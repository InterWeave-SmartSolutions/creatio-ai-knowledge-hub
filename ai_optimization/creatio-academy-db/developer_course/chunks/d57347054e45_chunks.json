[
  {
    "chunk_id": "238c11e430d6f818c0f04814992696f8",
    "document_id": "d57347054e45",
    "content": "So today's session number three of our development on creation platform guided learning. So we started development questions. We already set up our environment. We need some simple changes there. We practice with objects and with data items. I just forgot to note that you need some additional permissions. And when you place your environment, your app into some like protected folders like C and NetPub or C program files or somewhere in users. So it means that such folders are protected. In this case, you may need some special permissions. I already did it. Some were here. So let me show you what special permissions you may need. No, not here. Let me find probably this one. Yes. So this is important. If your experience some problems with your app and if you start to get other messages about some files are not, cannot be written or you have some file system access issues, especially you can face it during compilation. You can create separate settings and you can find your app folder, the rest of the web folder and add special role. I, I, S underscore I users and you should provide modified permission for this role for all of your application folder, the rest of the web folder. This will grant unlimited file system access to creation application. So you will not have troubles with saving files. You will not have troubles with application errors about some file system, file system issues. In case if you will find errors like we had with Basel that system tries to save some data somewhere and fails, you can also make sure that such permission is granted. So I, I, S, I users, it's a local role which includes set of automatically created users made by creation, sorry, made by I, I, S when you create your application pool system makes automatic creation of application pool identity and such identity actually it's a multiple generated user. I can show you something in my C users. You see I have a lot of such automatically generated users created previously. So I probably showed you move most of them, but this is something that you need to know that system runs under such privilege. If you have local administrator privilege, you can also look at your task manager and you can see who exactly runs W3, WP process. In my case, this is some user which I can't see unless I will start something with my local administrator privilege, but currently my regular user has no such privilege because of corporate restrictions which I have with my environment. So let's move on. So this is something that may help you with troubleshooting of your, of your access issues of your application. Now let's move on with next topic. So I just wanted to show you some interesting things with virtual objects and with connecting objects to a database view. Because previously we worked on the regular normal objects. When you created it makes the same database table in your real database. So we added some data. Now you see the same data records physically, but you can create very interesting situation when object can be connected with something in database, not created by creation. For example, we can make our own view in database. So we can use some SQL scripting and then we can make an object named the same as this view and we will have the same columns in our object the same as available in view. And finally it will show you some interesting trick how you can use creation objects to read data from sources, not created by creation system. For example, such sources may be created by developer or can be used for integration purpose to connect with other systems. So let me show you some simple example which implements this idea. And first of all, I need to tell you something about business. So here we have a context section. Contacts were installed here because we recently, yesterday we installed customer 360 app and we used application hub for this. Here we used application hub and we installed it from marketplace. So this customer 360 was installed from creation marketplace. And 360 codes, contacts and accounts. So now we have context section. And what I want to show you is that contact by default already has birth date column and also contact entity has integer age column representing current age which is recalculated every day automatically according to birth date and current date. Let's make a bit more examples with age calculation. So we can click on supervisor, we can provide some birth date somewhere in like this. Where it is safe. Close. So now you can see we have provided some birth date and we have dramatically recalculated age. So this is age in years and everything looks good. But let's imagine we have some unusual task to calculate age of a contact but not in years. We want to calculate it in days. So just to see how many days certain person lived and what is his current age in days. We can do it easily at the date base level. So let me show you. I already have some examples how we can do this. So I will do it quick and I will provide you necessary scripts for this. SQL DUR. So let me show you how we can do this example. So first of all I will show you an example which makes corresponding calculation like this. This is Microsoft SQL Server query which selects ID, name, birth date and we use some SQL functions like date, diff function to make some kind of calculation here. Now we do a calculation of a difference between birth date and get date. So actually it's better to say difference between get date which represents current date and birth date. And it makes a difference in days and shows us some integer bug. So if we run such query we will see list of our contacts and we will see age in days. This is a very very simple example. It is made specially so simple so you easily understand it. In real life such approach by making your own selections from the database can be much more complicated using some aggregations, using joints, using sub-curies, using having operators, using group by and a lot of other things. So you can do it unlimited complex if necessary. My example shows you that you can do some queries, you can use some functions from SQL, you can do the same in post-gray. And this is example of how we can do some special selection from the database which is not normally available if you want to use just only creation tools. So creation supports three types of databases, it doesn't support some specific database dependent features like date, defunction. And also we have not so much of flexibility building queries in our creating queries in our creation. So as we have flexibility to build queries from directly from SQL. So now you can see we have an example of signature queries. So what else we do? Now I will show you how we can make a database view based on this query. We can use SQL script. And of course I could run this SQL script directly at my SQL Server Management Studio. But my plan is to make it transportable to other solutions to other environments. So I will share example of a script for creating view for SQL version. And some of you are running post-gray. For example, you may run post-gray at cloud instances like demo websites or maybe trial websites that are usually based on cloud on post-gray. So this is example of post-gray for the same stuff. Okay, so these such scripts, of course, obviously are database dependent. Now I plan to use my SQL version. But I will not run it directly in this editor. I know it will work for me. But I can show you how we can make a SQL script in our package. So let's go to configuration. Now a system, then settings, then advanced settings. That's how we go to advanced settings part. Or we can also go here by typing the URL of our website, 0. Then that's how we go to configuration section. Find our package that we decided to use at the SQL script. I can name my SQL script whatever I want. For example, you are create contact age days view. And for instance, it could be anything when we create this script, when we start the script in a process of package load. It could be before package because at the very beginning of the package load procedure. Now back what compatibility, just apply. And I have my script here in the clipboard. So this script creates or modifies database view with a certain name. This name should start with you as R. Then you can do whatever you want and you can name it. But there are some conventions agreed with developers. And if you make a view, it makes sense to name it VW. Just to make clear that your object is not a simple table, you plan to make a view. So this view name should be the same as our future object that we will create. That's why this view has such a strange name. This view will work as select statement, selecting set of columns. And as you can see, I have to use LSS for columns with view as our prefix because of requirements when we design our object in creation configuration. It asks us not forces us to use us for column prefixes. Yes, here. So you can see we select ID, name, birth date, which includes day, month and year, and date diff as an integer value, which will represent age in days. So this simple view will return for columns for us. And we can register so we can set it up as a S code script. We can save this S code script. Obviously, if you work with was green database, you should use was green version for this. When you create a S code script, you can decide what type of database you are focusing. So close it. And we can also run this script. So of course, I could run it in my S code server management studio. But here, this is example of how you can run as code script from your configuration section. OK, I'm trying to install it means run this script now. If it has some errors, we can go to properties find last error message text. So we can see what went wrong here. In my case, everything looks good. So nothing special. I already have my view. And I can check this view presence running something like this select something. So select everything from and here is my name of the view. So if I select successfully, yes, now it looks like my view is present. It has four columns and my database web of work is ready. So I have a database item as a view which returns some data if I selected. If something is not clear, if something you do not fully understand why I'm doing this, please don't be shy. Ask questions that will be happy to answer you. And now this database part is ready. But now we have to join it with creation. In creation, we can create an object and we can provide the same code for the object as our database view name here. I will also paste it for you. Don't forget. We can also make some title. Something like that. H and days, something like this. And the most important property here. So now I will show you and explain some of the hair settings. We must set up represent structure of database view. This is very important property which tells creation that system should not try to create corresponding table or find existing table. If we create an object with represent structure of database view on, it means developer took care about database part themselves. So everything is already okay in the database. So creation will just not interfere with the database to not try to create a table or modify existing table. So creation simply doesn't know what is in database for you or the corresponding object. But when you will try to use this object, for example, ask creation to select data from it. It will try to do it and treat it as a table with a set of columns and column information will be provided in this object. So it will try to use it as a regular object, but it will not try to modify its structure of the database. This helps us to make anything at the database level including views or self-canned made tables or in some cases we can use like materialized views in Oracle or indexed views in Microsoft Tesco. So you can use anything that can be used for selection from the database and turning on this option represent structure of database view makes this trick possible. So when we design our object, we will not use parent object because we do not need any kind of inheritance here. All we have to do is set of columns which matches with set of columns of a real database view. First column is usrid and the type is unique identifier. So we have to represent it. Type is unique identifier. Some code is usrid and title could be just id. Okay, this column is done. Next one is usrname. Text 250. Text 250. You can name name and it's okay. Third one is usrbirthdate which is a date only. The last one is integer usrhdase. The most interesting column for us integer usrhdase. Okay, so we got it. The last change that we have to do is the only required property for an object is an id. I don't like this title. I would like to see here key, column or key filled. So our key column is id, column. We created it especially. It has usrid code and it has id title. So this is the most important part. And that's all. We can save and publish our object. As you remember, we can just click publish because it performs save anyway. And luckily for us publishing such object which is not, which is represented as a database view does not make any changes in the database. So it will be really quick. Such publishing will be faster than creating new table and say the publishing regular object. So we made an object with a special property, special behavior and our object is ready now. So we can start to use it. We can go to the lookups. And as you already remember, lookups is the easiest way to see what is inside your object. So you can register our object age in days. You can register this object as a lookup. By the way, you probably noticed we have a new button here. Sorry for this alignment, but it's not a big deal. This button appeared as a result of data binding tool. It helps us to automate creation of data items and for many different scenarios. In our case, we need data item for register object as a lookup. If I click bind lookup here, I ask system to automatically create data item for me. I need only to select target package. And system will do automatic creation of data item without my manual action. So I can see what happened here, what actually was done. You see that this data item was created automatically on the age in days. So we can close it. It is saved into our package now. And it's okay. Let's open created object. Now you can see we have name column, we have birthday and we have age in days. So you can see this calculation works. Rasmus side effects because of this is editable list and our object is not inherited from base entity. We have some side effects caused by it like this. So you see it's not working fully as expected. But when we review data, at least reading data is working right, working correctly. So you see that calculation of contact in days, age of contact in days is performed well. And you see this calculation works well. In real life, you may use this approach to perform some long lasting calculations like turnover, finance, calculations, like some debt calculations or other things that usually take time. So you may do such calculations at the database level with kind of views and the subcuries. Then you can create an object representing your data structure and with the same name and same columns set. And if you mark this object as represent structure of database view, system will not modify data tables. It will trust you and it will try to read data from sources that you specify. So it will try to read data from the table or view with the same name as your code. So this trick can be also useful and I would like you to see how we can connect such object to existing contacts section. In order to make connections between objects, we must use lookup columns. In our case, it's harder to make a lookup column from contact to our new entity. So it's better to use our new entity and then use reverse joints to connect with contacts. Now I will show you how we can do this. But first of all, we need to modify our s-tilt script. Let's go to our s-tilt script and add one more column. We can add one more column. It will be ID as contact ID. So I will use new, no, not the contact. New sr contact ID. Yeah, so I will do this. It will be one more column and I plan to use this column as a basis for my future lookup column. Of course, I need to run this query. This will be very quick. We can check out in the database that our new column appeared. Great. It's important to name it exactly as is. Usr contact ID. Okay. Then we will modify our object. So our script is okay. Let's go to modify our object. We can add lookup column named contact. Not contact ID. We will name it usr contact title can be contact. And there are some architecture of my peculiarities when we have a code something. Then on database system works with code plus ID suffix. So I named my column in the object level. Usr contact and system will work with usr contact ID when it reads data. From the physical database. This happens not only for this object. It happens for all objects with lookups. So let me show you. Like account. For example, account column, account entity has an industry lookup column. And at the database level, we have industry ID. It has type at the object. And at the database, we have type ID, CTID, region ID. And other lookups saved in the database. So when we have a usr contact column system will work and search for usr contact ID at the database. We have to specify lookup property to be a contact obviously. And it looks like that's it. So we don't need anything else. Let's save and publish, click publish, make saving and publishing. Now you will see how we can use this object. So we can add connected, oh, probably we need to reload the page because of some client side issues, cash and issues may prevent us from working normally. So our main entity is contact. Now I plan to join my contact age object as a joint entity using reverse joins. Let me show you how you can do this and columns related objects. Now I have to find contact age in days object. And then I will use age in days. For example, it will be maximum value. No matter which one I will use, I can even use first record value. So it would be just maximum value. For one contact we always have just one data row in our connected entity. So maximum will work for us. And I can just name this column age in days. No need to use any additional filters, save it. So now you can see that age in days was successfully joined to exist in context section. We did not customize anything with contacts at all. We used our own artificial objects. We made an artificial look up column and that's how are able to connect to different entities and display corresponding data. I hope this is interesting example for you. You probably have your own experience with use of column settings, related column settings. Some of you probably visited our customization course provided by my colleagues. So possibly this is not very difficult for you. And if you have more questions about it, just tell me. So it was an example of how you can use additional tricks with objects and to connect it using database view. There are some other properties here like virtual connected to the portal, wife update and so on. So I only have to tell you a couple of words about virtual. So virtual means that object will be not connected to database at all. Virtual objects are usually created for the purpose of providing some template structure and then to be inherited. Or for the purpose of managing data without actual read from the database operations inside of object model. If we will search in our configuration for objects, search for something with the name base, we'll find a lot of objects like base address, base entity, base folder and so on. I will open base lookup as example. You will see this object is virtual. So it has no its own table. So you see object base lookup. But if you go to the database, you will not find the database table named base lookup. So you see we have some base value lookup something. There is a specials and interesting and I will look at it later. But base lookup is not found here because this is a base object which is virtual and mainly it exists only to provide inheritance. We have set of columns, business columns, we have inherited system columns. And when we create new object inherited from base lookup, it will be a true new real object. But you will inherit a lot of properties and even events, settings and behavior from base lookup. And that's how this object can be really useful because you can so base architects can program lookups behavior once in base lookup project. Then you create your own lookups inherited from it. We did it actually. And so that's how you can use one template for many parts of functionality. It's quite efficient. So we have a lot of base objects. Most of them are virtual. I only interested with this strange example base value lookup. So let's search base value lookup. Base lookup is value. It's very strange. Why we have table for it? Oh, because it's not virtual. Someone needs this object and someone keeps some data into it properly. It's interesting. Let's check. I never faced it previously. Base value lookup. Let's see what it's empty. Transitions are also empty. OK, no problems. Everything is OK. So that's it about lookups, about objects. And I only wanted to show you one more thing, final think about objects. And let's look at our real-to-type classic object as example. So I wanted to tell you about support of translations. So for you already know that create your support translation of user interface, you already found we have a languages section. We have set of active languages so you can easily switch your environment into other languages. In your profile, you can switch languages if necessary. But what you probably know so far is that creation does not only support your UI language change. It also supports translation of some data records. And inside of the objects, you can specify what columns will support this translation. And what columns will not support translation. By default, name and description text columns are turned on with this option, localizable text. It means that if you want, you can save translations of name and description column into other languages. And this translation was already done at base product lookups. So if we read some data from some standard lookup like count type, you will see six standard records in English. But if you will look further and find out that we have a translation tables or a, they usually have c's prefix, then main entity name, and then L, c that suffix. You will see translations for such data into other languages. So you can order by this culture. You will see translations into other languages. Here is Russian translation. Here is probably what else. I don't know what is the language here. This seems to be Italian. Maybe a portable. And so on probably, I don't know, it's hard for me to guess. I can join and so on the code is such cultures. Okay, let's do this. So difficult c's count type. So this is our localizable. We can join c's culture. And we will read data. Now from this culture and then culture name as language. So now you will see corresponding language. So this one was Russian. This one is Dutch language, so never one language. This is Portuguese. This is Spanish, Vietnam language, French, Italian, and others recently added Hungarian language. Czech Republic, Arabian, right to left. By the way, there is a right to have support. This is what's hidden probably. Hebrew, Romanian, Japanese. So you can see translations of the same records that you get from your main table are saved into different languages in out of the box lookups. That is because name and description are supported with a co-izable text. You can turn this option off if you don't like it or you can keep it on by default because it was inherited from base lookup. It was inherited and that's why we did not change it. So we also have the ability to save translations of name and description into this separate table. This separate table automatically is automatically created for our lookup. So if you enable at least one column, it will be this separate table will be named C's, then your object code, then else is that. So in my case, this information is empty. C's, U S R, real T type, else is that. My table is empty, real T type classic. Yes, you see my table is empty because I did not provide any translation. But once you will support several languages, if you want to keep your lookups translated into other languages, so you can start to use it. The best way to transport and make such translation is to register one more user with another language and then log in at this user, go to lookups and there when you will go to corresponding lookup, then you will start to edit data. If you edit it with other language, so you will provide translations and this translation will be saved properly into corresponding tables. I hope this is interesting enough. So if you're interested and really need such translation support, create your ready for this, so you will not face any troubles. Okay, so finally we finished playing games with contact service, our age. We should be saved on disk, of course. We will remember now about our visuals to your code and git client to share our settings with our imagined team members. Now you see some items created. So we can commit something like contact age view, example added. This will be our comment for the comment that we do with these recent changes. As you can see, we did not forget about registering of this lookup as of this object as lookup in lookup section and made a data item with the help of data binding tool. Okay, we can submit everything to our local git repository, then pull and push to global git repository, that's how we can share our settings with our other team members. Okay, great. What else I wanted to show you before we proceed is example of delivery. Because it will be important, I think that you are interested. How we can transport our solution for test and production. You remember, version control, working with git with bunch of files is not so efficient when you want to transport your solution for test and production. This type of sharing with many files is good for developers only and between developer environments. In order to make delivery to your test and production, you can simply export your package into a file and then I will show you some magic. Now you can see our file was saved here, here, this one is our file saved seconds ago. And this is a zip file. Inside of it, we can find GZ archive. And inside of it, we can find the same go file with metadata saved here and it's not so readable. And this is a transportable format for creation packages. So this is metadata of your package fully, including all the package items, including all scripts, including processes, whatever we have. And even more, including file system, file system package contents from the files folder, like Meshoyo, RISOQ, Configuration, EKG, DefClassic, we have some file content as a result of our compilation. So such files also disaved inside of this GZ archive. Then we can go, recently, I installed one more environment, so it will be test environment due to test. I don't know, test. So we can run this test environment. Currently, I am running my second creation environment on the same PC. It will take some RAM, some CPU. You see my RAM consumption is more than 11 gigabytes now. So I can start my second environment. I will use it as a test environment to check how delivery works and to also make sure that I have no troubles with changes with transitional settings between environments. Sometimes it happens. Now I started to receive this attempt to log in. And it drops me again to the login page. And on the second attempt, I successfully log in. So it happens quite often, but now I don't know how I can fix it. So we log in into our test environment. I can show you how we can load our changes from ZIP archive file. This is very easy. We go to settings. It doesn't require any special skills. We only have to be administrators. So we have to be a member of a system administrator. My supervisor user is a member of system administrator's role. The only condition necessary for us to load packages. And here is my application hub on test environment. And I can just install the application from file. Select file from disk. Go to downloads. This is my dev classic package saved several minutes ago. Open it. Normally this loading procedure will finish successfully. But in some cases, you may face troubles here. You may face missing data items. You may face foreign key constraints and exceptions, some database exceptions. So in some cases, you may face errors here. Anyway, you should look at installation wrong, because it will give you enough technical details about how well our loading was performed. So we will invest several seconds into looking at it. Let's see what happens. So 13 seconds we started. No visible errors and 31 finished. It looks like maybe 18 seconds to install. Very good. Very good. OK. So you see some text, comments, and details about installation of the package. But now it's OK. So our package is already loaded. We can find it in configuration section of our test environment. But this package will be not editable. So our package after loading, we can find it here, dev classic. As you can see, this package is not editable. Because we loaded it from file, we intend to use it for test for production. So system does not expect that we will modify it. So when you load package from file, it will be redundant. If you really need to modify it for some reasons, you can do this by unlock for hot fix. Temporary thing that helps you to make temporary, make your package temporary editable. If you forget to lock it against a system of doing, according to the special timeout, which can be found in system settings. Now you can see my package was loaded. You see status, no errors. It means all ask-girl scripts or objects were applied successfully. Now let's go to the look-ups section of my test environment. As you can see, this look-up section doesn't have any column setup, which I prefer to do. OK. We can go back to list view. And we can start to adjust it to easily find the corresponding new look-up records. Now you can see my reality types. I expect to see four records here. So they were normally loaded. Everything is OK. Contact age in days. As you can see, according to my current data on test environment is calculated. Great. So it looks like everything I did was normally loaded. And we can use this environment for future checks. Now we can temporarily disable it. But then later we will check our new environments. We will check our new application, which we plan to do right now. So you see that delivery is very easy. You can just export your solution to the file. If you have many packages, you can export many packages. You can also do some tricks at the database. For example, you can put several GZ files into one zip file. If you want to make it faster to go, and today I'm going to show you how to make a UI settings, how to make new sections, not with section wizard, because it's quasi-QI outdated stuff. I will show you how to make new sections, new big applications, made with the automations provided by Application Hub, and Freedom UI. So we will focus mainly on Freedom UI, but before doing this, I need to explain you what is Application Hub, and how it's intended to be used. So we go to settings, then we go to Application Hub section, and open it. Special tab opens for you. And this is a place which is designed to manage your Freedom UI customization. And now we need to talk about new functional item of creation that is called Application. So I will try to explain what application is, and how you should understand it. Application appeared not so far ago, maybe just a couple of years, and packages were present for more than 10 years. So you see that Application is generally quite relatively new to creation. And previously we had only packages. So Application is a new logical type of items, and usually one application means one or several packages. So Application is a higher level logical setting, and it may include, so it must include at least one package, but sometimes it can include more than one package. As example, Customer C60 app includes three packages, and one of them will be like current default package for saving of customizations. But now let's focus on the idea. So Customer C60 is an app, and it has three packages, the kind of it. Application has its own properties, like name, version, default page, description, date of creation, and so on. Also it has information about its developer. Cherasalt here means that it is a creation, creation company. Cherasalt, as you remember from previous sessions, is a previous name of creation company and creation brand. So Application has its own properties. Also Application has color settings, and Application has icon. You can find Data Binding tool, but it's a bit artificial application just made for compatibility. Previously, Data Binding tool, it was just a package. And when we loaded it, we have this GLB Data Binding Package. We can see its contents. And the originally Data Binding tool was not designed as a 3D UI app. So all customizations we have here are based on classic UI tools. That's why we will not see any pages, any special section data. We have just Data Items related to different parts of creation application, but it's not actually a section. Such items are Data Items created for some purpose. Data Models means Object Business Processes are automated business procedures implemented as diagrams. So code in creation, they are code business processes. No integrations and advanced settings show us all packages for this app or filtered by selected package. So Application is a higher level setting, or entity, which includes one or many packages. The reason why creation needed applications was caused by shift to so-called composable apps approach. I will try to explain what it is. So originally, we had no any customizations at our studio environment, so it was just a constructor only. Then we installed several apps like Customers to Six, Data, Biting, also installed maintenance tools, and so on. If necessary, we can remove some of installed apps. The system will revert and go back into its original state, which was before installation of such tools. So finally, and user system may include only solutions, only applications that user decides to run. And that's why we can call this Vodjic Composable Apps. It's very close, composable apps. It's very close how you manage your software at your smartphone. So you have Platform, let's say Android or iOS, and then you install necessary apps that you use for some certain purpose. You can don't like some app, or if it starts to work, not normally, you can remove it easily. And previously, maybe three or five years ago, it was not so easy to do in creation, because creation had out-of-the-box functionality, which cannot be removed from system. So old creation systems included functionality that could not be removed from it. So it was not fully composable app approach, and we had just simply hard-coded part of the system, which also was customizable, but it was not removable from the system. Now, developers decided to make constructor only, and then to install everything that you need on top of it. And that's why they needed applications, because sometimes functionality that you want to add includes more than one package. So developers needed applications, because some functions were designed as set of packages, not just one package. So application means set of packages, which includes some certain business functionality. And applications can also be imported or exported. So when you export an application, it physically saves set of packages on disk into one zip archive file. So here is a single zip file. If you look inside, you will see set of packages, GZ files. And this is pretty standard for creation, so you can use one zip file for many packages inside. It was possible even before applications appeared. So now, developers just improved this idea and made a separate logical level called application. OK. How safe is creation after you install a package? Like, is there a lot of artifacts that are left behind or is everything cleaned up except for maybe database and some stuff that you're asking very interesting question? For example, when you install it, and then you decide to remove it, of course, we have some items in configuration like SQL scripts, which may do irreverteable change. So some changes in the database can happen that you physically cannot revert. So ideally, if you develop a very good app and then you remove it, you can take care for full recovery of your database original structure after your application was removed. And if really needed, you can create SQL scripts, which will do this recovery and installation type will be uninstall app. So uninstall app installation type is a special scenario when the script will be started only in case when your package is deleted. So this is kind of recovery steps that you plan to do at the database in order to make everything clean as it was before installation of your app. But in real life, not all developers do this. So in real life, when you remove your app, some traces may remain in the database. And usually, this is not critical for application because logically, such columns or some data leftovers will not be available to see easily unless you go to the SQL web and where to start to make some special queries and in order to find them. So in general, when you remove some app, it will be logically cleared so it will fully disappear from your system. You will not see anything, but some tiny minor database leftovers can be found. The same as you have a smartphone, when you install some app, then you remove this app, some application log files, some application technical things may still remain in your smartphone. If you go into smartphone file system, there's a proper tools, you will probably find it. So in general, it was designed to make it easy to install some app and to remove some app. And ideally, when app was removed, no visible traces should remain. Ready? Is it clear? Thanks, Brilliant. Thanks, Amelia. OK, great. Thank you for your questions. And I encourage all of you to ask any questions. If something is not clear, so having such a dialogs in our sessions is much better than just lecture and they think lectures are boring. So speaking is better. Thank you for asking questions. So let's move on. We need to do some practice. So to do some practical steps to understand it better. Of course, our practice will include create in your app. Now I need to tell you about some, but a business value. Our plan is to automate reality estate agency. And we want to keep a list of reality records in Freedom UI application. We will have a section for such lists of reality records. And we can use existing platform optimization tools to make it as fast as possible, to make it quick and easy. So click New Application. We have several different templates here. In my case, probably the best option is records and business processes. For very unique scenarios, you can use custom app, which will create an app and will be empty. So you will have to create your own section inside. But if you create a app based on records and business processes template, it will start to create a section for you. Section is a data entity. So a big data entity, which you can use inside your system, in our examples of sections are accounts or contacts. And also we have set of system sections like lookups or users or system settings. So section in Creature is the main big entity, which usually has a lot of columns. And usually has some subordinate items called details. We will study it using. And also if you're just more risky and you're interested in AI tools, it's possible to make a section by with the help of AI. And you need to explain in words what section you plan to create, what course should be there, what details you expect to see. But personally, I do not like this approach because if it makes it incorrectly, then you will spend more time to fix than to create from scratch. So that's why I prefer to create from scratch. OK, let's create a new app. Let's change its color to something more. Significant and we can see, oh, we have some new icons here. So I plan to create a real T section. So possibly I could find some icon representing a house or apartment. OK, well, we like this. So it will be icon for my new section. Name of the application is a very important will be caption of our section. It will be title of new created object. So it's important whether it be a real T and advanced parameters. You can see we can provide some application code. Code is also very important because this code will be used to create a package. To create a main object. To create some corresponding settings related to object like page or list and page for edit, so form page, we call it. And so this code is really, really important. You will not be able to easily change it a waiter. So it's important to provide it correctly from the first time. Also, it's possible to link, so simply, to create a freedom UI section based on existing object. But this option is really useful only in case if you already have some created objects in your system. And usually it happens when you already have classic UI solution. And you want to migrate into freedom UI. In my case, I will create everything from scratch. I will not even use my previously created lookup because I planned to use it for classic UI. So we have a separate package, separate application. And let's create it. Creating will take just several seconds because it will only add some template, software, main entity, page, list, and let's all. So my app now is called reality. It has its main properties, name, version, default page, some description, date of creation, developer. This is a string named customer. If we change our system setting, named publisher, it will be possible to change developer of this package and this app. OK, no changes in app properties. We have pages part, we have list, and form page. We have navigation and section, so to register in of the reality section. We have main object, reality. We have no business processes, no integration so far. And we have structure of our packages. Now I need to explain what is shown here. So our app now has only one package. This package has certain properties and the most important is that this package has a almost black colored folder icon, which means this package is editable. Let's compare with other customers 60. Now you see gray colored icons. It means such packages are redone. If you want to customize something in customers 60 app, system will not be able to save anything into such redone packages. Those system will automatically create new package for you. And unfortunately, automatically created package will certainly have an ugly name. I will show you this a bit later. And I will show you how you can manage efficiently packages for different apps and how you can connect it. In my case, I tried to keep it simple, because I understand you are beginners. You want to make it work first. And you do not want to go into unnecessary complex things. So now we have one single app. We have one package for it. And system helped us creating main object, creating set of client modules, the presenting page settings, and some technical things for pages. And as you can see, it created seven data items. But representing inserts into some system tables that are necessary to make our application work normally as a section. But let me show you where we can see it. We can also run this app. But I prefer to work with main application window and in order to fight with any potential browser cache issues, I reloaded it. Now we can go to studio and switch to my applications work place. Or we can find all apps. In all apps, we will see all available sections, including our real dissection recently created. This real dissection now has no data. It is based on main entity named reality. And we can use edit page to add some data. In this edit page, we only have name columns or no customization so far. Apartment N, OK. Where did B new or links? So this is just an example, an example of a reality object that we plan to build the data that we plan to save. Such lists and edit page will be used to manually input data to modify this data and to work with this data. Then of course, we need to customize it to make more columns, to make it more useful to work with. But let's make a break. And then we will continue because it looks like I just forgot to have a five minutes break. Well, let's make a quicker fresh. And then we will continue with customization of our new section. Now, we continue to customize our section. So what we can do here, address it with a ways how we can make changes. I will show you which way I prefer the most. So when you go to a certain section, for example, here is list page, then open edit page. You can also open edit page by clicking on this section. But it takes two clicks, who quite hard. And we can just click on this hyperlink. Now we have a so-called form page or edit page. We can do customizations right from here with a small edit page button. It will open corresponding page editor. If you have, so if you already passed our customization course, you already know how to use this page editor, I will only show you some quick settings here. So we will not go and reproduce the same customization course because I need this section only as a basement for our next programming examples. So customization here and no code settings are not the top priority for us. We will do it just because we need it for future samples. So I will do it quite fast. Please confirm, do any of you reproduce the same steps just during the session or you just watch and that went to do your own practical steps separately, watching videos. So please take a plus in our chat. If you follow me just during the section right now and do the same examples at your environment. In this case, I will do something not so fast. And please type minus in our chat, which will mean for me that you are only watching and I can do it quite quick. So not waiting for your response. Some of you responded that you do practicing. I want to with me thank you Monika and Raqqi. But most of you are just watch. OK, I will not go too fast. And I will show you and wait for you to do the same. So my plan is to extend a bit our settings and make it more useful. When I select any column, you can look at its properties, settings. We have some kind of object inspector for settings of a certain selected item. In my case, here is title, code, data format, some settings. And here, I'd like to make it copyable. For some unknown reasons, the verbers who made a template made the name not copyable. But I think it's a very good idea to easily create copies of existing records and copy names as well. OK, we can change any properties here. Not so many. So what else our reality will have? Of course, it will have price. So we can use number columns. As you can see, we have set of columns from this list and new field set. So we can add different data columns to our page. Simply drag and drop. You see several potential places to land our page, our column. I prefer to put it here nearby name. Make and name it price. I can also specify the amount, so maybe the currency of our price to make it more clear. So it'd be price USD. If you want to translate it into other languages, you can also put translations here. Code is very important, property. And I also need to warn you, a lot of beginners have mistakes at their pages. Just because of messing with codes. So please take it seriously. I recommend you to set up codes initially, just when you design your columns and do not change it later. So let's set it responsibly. And as you can see, code is one of not so many columns where we have to confirm our change or reject the change. In our case, code will be something like usr, because we need prefix for our new columns and the technical thing. So it requires prefix. usr price USD will be our code, and we confirm save this change. The data format will be decimal, who digits. No description, maybe not required. And OK, if you want, you can make it required. So system will not allow you to save zeros here. No need to make it redone, no need to hide. No need to make custom settings for titles. But what we need here is element code. This is also technical part. But element code may be important if you plan to search for this column in its settings, in technical parts, in JavaScript, and client module. So if you plan to do any kind of programming, then having a good looking friendly code is important. It should be unique. So we can name it the same as our own usr price USD. And confirm. As you can see, confirmation is provided for the most important properties and columns of our item. So element code seems to be important, because we have this confirmation stuff. OK, did it. So this is how we can make one more column. Let's say another one. Any reality has area. Area, I will do it a bit faster. Now I think you already got main idea how to do this. This amount 200. And also at the end, element code will be usr area and confirm. When we click save, our changes will be applied to the object, to the page settings. So we will have our settings saved in our system. Let's do a bit more. Dropdown type. We need type for this reality. And I will use it based on dropdown or look at column. Dropdown and look up are very close synonyms. So it's almost the same. The title for our new look up column will be type. In our code will be usr type and confirm. But look up is not present here. We do not want to use similar look up reality type made for query security purpose. So I plan to make a fully separate solution. That's why we can make new look up from scratch. As you can see, the system helps us with automation. We can create, we can ask system to create new look up. It will be real, tea type. And code will be usr real tea type. No class if you are words here. So it will be our freedom of your assumption. Reality type title and code are necessary. Because system will use it to create new look up object inherited from base look up. It will also register it as look up in look up section. It will provide data items for this registering. And the only missing part will be look up contents. We'll do it later. OK, type is clear. One more thing that we will need in our section is offer type. Because some reality objects will be offered as for sale. Others for rental. So we will have an offer type look up. To specify exact offer type is it sale or rental. I will call it offer type. This is a title code will be something like usr offer type. And we confirm it. Now look up for this so we can create one from scratch. Reality offer type. I will do some poses for some of you like Monica or Marchal or Raqui who confirm that you do it just along with me. OK, save it. And I also just was quite quick. Normally by default look ups will be shown as simple drop down list. But in case if you select something complex like big entity, with context or accounts, it may be useful to use full scale selection window for the offer type. We will have only two possible values like rent or sale. So that's why drop down will be perfect. We need to scroll down and set up element code. Here you should maybe we will not use usr. So you can just use any unique string here. So offer type will be also quite unique. This is just to make it more, let's say, friendly when we will work with code part. OK. So what else? Maybe we can just practice with a single text column. And it will be just a comment. 250. Maybe it's not for us. OK. Checked everything. Comments. OK. And maybe one more example of a more complicated look up with the selection from big object. So let me show you one more drop down column. I will name this column manager. So it will be some manager person who is responsible for managing data of this reality. USR manager will be our code. Look up will be selecting from contact. And as a contact is a big entity, we may need some additional columns to be displayed, some filters, sort order. And so once all big scale selection window will be good enough for this good option for this type of selection. And I can also make unique name here manager as a code. OK. So I only usually set for parameter title code, specify look up and element code. OK. For the very beginning, this is enough. We have some required columns, some not required columns. Unfortunately, we cannot use default value setting here. So if you want to extend and make your solution more, let's say, well, customize, you will need to go to objects anyway. So let's save our changes. Now you will see what has been changed here. We can track what is happening at application hub part or we can go to our configuration section rewarded. Oh, maybe we'll just see here. OK. It's still rewarded. So you will see your changes in configuration section. Now this page editor will finish its work. So it takes time because system saves client module. It saves changes to object. It publishes objects. So it takes some significant time. And that's why it takes a while. OK. Everything was saved. We can close this editor. You can check what's happening with our new package. You can see it here or if you prefer to manage from application hub, you can find your reality application. You can see two pages here. And you can see one object. So main object, reality, offer type and type are created as a support and book of objects. And advanced settings will show us all packages. Here we have only one package. And usually I prefer to look at it sorting by descending order of date of modification. Because usually you need to look at the most recent changes first. So you see that just from 20 minutes of our work, we have a lot of items already created and including main entity, including some objects that are used for lookups. You can also check if you go to lookups section. You will see recently registered lookups automatically. So system also made this registering as data items. So it's quite smart. And when you create lookups with the help of page editor, it will automatically create object for you. It will automatically register this object as lookup and create corresponding data item. The only missing thing is contents for these objects. Any questions? Please, you're welcome. If you have any questions, any notes, I will be happy to hear. Now it's time for us to think about some lookups. Okay, offer type probably is not so difficult. We have only two potential offer types. The most commonly will be using sale offer type. And another one will be rental. So we have only two offer types in our system. And when we have data binding to, it will be extremely easy for us to save all data. Into our target package. And that's it. System creates thanks to data binding tool. It creates corresponding data item automatically helping us to save our time and do not perform some boring work. So here I can see all the records of our lookup were saved as data item. This is very efficient. One more thing which I wanted to show you is how you can use some tools like export and import. Here you can see I look up made for classic UI. I want to steal its data. Moreover, I will steal their IDs. Let me show you what I'm planning to do. So let's do one more column display ID column. I want to display it. I don't need description at all. Okay, save such column settings. So we have four records here for our classic UI. Just for the demo purpose. So you should not do this constantly but oh, Andre, no problem. You told me you had some issues with your performance. So if your colleague is still here, we can try to find out the reason why it is slow. Thank you. Thank you, Andre. Okay, so I want to show you a simple quick example how we can use standard tools for export and import of data. Export is very easy. We can do export to excel any creation list. It will create a file as excel sx format and save it to you. Great. And we go to another real estate for free. UI section. And just for demo purpose, I will show you how we can import this data from file. Data import target object is already selected. We need to select file for our import. We need to match columns and provide such column settings. As you can see, we have very similar columns names in file and in our creation data model. That's why it was already automatically matched. Now I need to show you what this file looks like. And here you can see this excel file. So it has first row with column titles or other rows representing some data. Such files can be easily loaded into creation. Matching first column titles with creation columns of objects. And it will be one to one import. And if we import, we have to specify duplicate search rule. So what column will be used to check presence of data. OK, we can do it very technical way and check by ID. In real life, when you import data from excel, you may not have this ID. You will need to select some, let's say, reliable enough columns, which would be quite unique. In my case, ID will be the best option for making such checks. And now you can see import was fully done. You can draw all this data. So we imported four data rows from file into our RIDOM UI reality type object. You can also use data item, data binding, arithmetic creating of it. And data was added successfully. Now you see bound data, all four records were created correctly and saved to our target page. Great. Now we can do more steps with main object setting. Because I want to use some additional features available at object model. Let's go to objects. And I want to show you default values for our section. Unfortunately, we cannot set it from page editor. So we can go to object editor. For example, for the manager, we can set default value as a special. System variable, current, user, contact. So if a person creates some real-ter record, it will be considered. This person will be considered as a manager, current user contact. Then by default, oh, no, it's OK. Everything is OK. No errors. I just thought I have a mistake here. OK, when we create new record, for example, we think that the most common, the most frequent scenario will be working with houses. So we can make default value for created real-ter records as a constant. And we can take constant from lookup to be house. So this will be our house. And when we create new record, this default setting will be done. If we had some numbering, we can also use auto number feature, but for real-ter, I just didn't use it so far. Offer type, we can also set as constant. And let's imagine that the most frequent scenario will be sale. So houses for sale is our primary business. That's why when we create new record, we will have such default settings. And when we finished, we can click publish, which will make save and publish now. You may ask me why we do so many of customizations here. We need it for our future examples. And now it's over. So we made our section and we can check how it works, go into our real-ter section or go into my applications, real-ter, and open in its page. You see previous data, we have some price for the department, some area, maybe it's in square feet. So that's why we have such data. It will be an apartment for sale. And some default contact. OK, so what happens when we create your record? You. You see default value is set for type or offer type or manager. Some settings, test comment, and we can save it. So having default values really helps us to work with it. Oh, takes time. Probably something happened. What's the problem? Oh, takes time. Probably something happened. Let's check. As you can see, browser console is full of some debug messages. But I think it now, in case it's not so very critical. So let's try to remove data and check. Yeah, it was saved normally. House and Seattle was saved normally. OK, we have some kind of basement. For our future study. And now I need to tell you something that you will consider as boring. So we need to go deeper. OK, couple of words for a list part before we go deeper. List pages also can be customized. So we can go to edit it. I just found this edit page button. And list page also can be customized. We can hide unnecessary columns. We can display columns that we need. For example, we need OK, where do you have name? We need bright type, overtype. Maybe date of creation here and area. In the same order, such columns will be displayed. That's it. If mystery can also use some coloring stuff, you can try to make some customization with setup, lining, colors, spacing, and so on. But now I try to keep it simple. Everything is by default. So I only have some set of columns set by default, reload this page. So you will see default column settings for me. OK, great. It looks very, very good. If we copy some data, you will see that almost all columns, all columns are copied. And that's it. So we can easily manage this. So what we have to do now, this is customization level. Doesn't require any programming. Of course, you probably would like to make much more significant and more technical things on this client side of the page level. I plan to explain how creation made this user interface and how we can make changes in it using programming. And first of all, I need to explain how client modules are designed and in order to check it out. So let's select our package. Select only client modules. And for example, let's try to open form page. If you click on the form page directly on its title, you will see page editor, not a problem code. You can find program code part of it. If you click on this source code, don't save source code, will be opened. Then we have to close form page because having separate editors for the same item opened simultaneously, it's not a good idea. You can accidentally save in one of the editors and you will lose changes made in another. So it's better to keep only one part at a time, only page editor part or only code part. Now you see quite strange JavaScript code, which is really hard to understand what it is. And also I can show you how you can open the same code quickly. You can go to right part. This is three dots button code actions. And then you can open source code directly without opening page editor. So this is some kind of code. And now I need to explain you what we are looking at and explaining some concepts used at creation platform. So the language for this code is JavaScript. But as you may guess, this code represents more like settings than exactly ChableStuff necessary to build this page. And before we go in deeper, I need to explain that creation client side is fully dynamic and generated in runtime. So if you will inspect any part of the client side page to show you some pieces of HTML, you see a lot of divs, a lot of some layout settings, a lot of classes. And also you will see plenty of ng names here, standing for Angular. So in Freedom UI, it's undercover framework which helps us to build and display components is Angular. So if you have some Angular knowledge and experience, you will find it easy to make your own new components if you made it for your solution. I prefer to use as much as possible for base and a product standard components because creating new components usually takes significantly longer without clear, let's say, profitability for end customer. So now you see a big, complex structure of HTML. It's really hard to make it from scratch. And to actually create this capable to build such pages, it's self using some settings about how page should be built. So this is result of work of big number of JavaScript files and such JavaScript files consume information about controls, about settings, about what they have to build and thanks to base product architects, we do not need to type or develop such code ourselves. So, Croatia pages are made dynamically. In this case, with the help of Angular framework and using some page settings. Okay, then I need to explain you one more thing about structures and about JavaScript code inside of Croatia. So as you can see, Croatia user site, user pages, client module, client part is built by big number of JavaScript files. So we can try to find how many files are used there. So opening any page, go to sources, start to investigate structure of sources here. You will see plenty of files and what is really frightening. Then you will see a world of configuration items here. So probably several hundreds, maybe up to one thousand. And it's important for you to understand that client side of Croatia consists of big number of relatively small pieces of code. So quite big number of JavaScript sources. And if anyone from you had any experience with JavaScript sources and JavaScript apps, of course, obviously you understand how complex to keep this structure, to manage it. And of course, developers of Croatia also out this difficulty and they decided to use some world class standards to manage JavaScript application. In order to make it efficient, developers decided to use special concept, AMD concept. Let me try to find you some articles at Academy for this. Let's search for AMD. We'll find some articles. What Academy? AMD modules, module overview. Yes, probably this one is a good article explaining this, but also this concept can be found at some common sources like Wikipedia. So AMD stands for asynchronous module definition. So this is an idea of splitting of all your JavaScript application into parts, called modules and make such modules capable to be loaded separately from other modules and asynchronously. And that's how we can use modern browsers, multi-task intools. And finally asynchronous world of modules will give you much better received performance of your JavaScript app. So main ideas of AMD is split of your JavaScript app into parts, such parts are called modules and organized asynchronous world of such modules only when they are necessary. We have special framework which keeps an eye on this and this framework is required GS. Quite simple and very old framework require GS. You can read more about require GS probably. You can find it require GS.org probably can find its original page, explain explanations and so on. And this is quite all the frameworks still working and its main task is to keep in memory such modules, organized loading of modules, organized module dependencies and create your users require GS. So we can try to find it like this require GS version. Now you can see version 2, 3, 5. So require GS is used in creation and its main purpose is to keep and handle all such client side modules structure in browser memory, providing the ability to load only necessary modules when they are requested for certain page and which makes quite good performance because in total our client side now has probably one thousand of modules, one thousand of small JavaScript files. But when you open any page, system needs only some part from it. For example, it needs only 100 or maybe 200 modules. Require GS helps to load only necessary modules by the analyzing of definitions of such modules. And so generally require GS is main under color framework for organizing of executable JavaScript code in creation client side. And require GS has its own requirements for how such JavaScript code should look like. And that's why we are coming to an answer of why our client module code looks like this. This is a result of use of require GS framework. And the first command that you see here is a function defined. This function is calling require GS method and it transfers some arguments. First argument is very important. This is unique module name represented just as a string. By the way, also client module has its own schema properties of properties of changeable item saved in creation configuration. It has its own code, localizable title, information about parent client module. So it could be used for inheritance and package where this client module is saved. So code of your client module must be matched with the name of the client module in your code. If name will be not the same as code, this will not work. So first argument here is our module name. This is just a text. Second argument is optional and usually it's empty, but this is an array, every of other module names that are necessary to load before starting our module. So let's how we can set up that for this module, we need some else and system will load them first. Third argument here is the most important. This is so called factory function. This function has a main purpose to return you some data object. As you can see, it returns JavaScript object including in our case, six properties. This JavaScript object represents necessary information which system needs to know about how to build our page. And this information in general was created with the help of automation tools of page editor and that's why we did not program this code ourselves. So most of this was done by page editor, but you still need to know and let's say navigate here properly. I will quickly explain what are these properties and now you probably will not remember this, but it's just for you to like for your reference. So this JavaScript object in general represents information about page. The config div represents visual part of the page and physically this is an array in JavaScript and this array includes set of items and each item represents one control on the page. Let me show you a simple example. This is control for name column. So here when we look at this name, we have some title and we have input field. So in total, it's called control. So some tool on the page which we can use for data input and output. And this control has its own settings which we can provide inside of view config div every. So this item represents name column. You can see values settings, some different properties and the layout config represents position and size. Type represents the type of the component used for input and output. We have a label, we have some other properties, parent container name and the tool. It's interesting to mention that here we have some settings which represent connection between our control and physical data field connected and saved in memory. I will explain this a bit later. Now you should remember that view config div represents set of information, so it's just array of JavaScript objects and each JavaScript object represents information about control that you want to see on the page. So for price, for name, we have one control, for price, another control and so on. You can edit it if you want, but you should be very careful. Keeping syntax, keeping break it, keeping everything correct and if you do something incorrectly, it will not work and we have no any intelligence or autocomplete tools which will clearly show you where you did some wrong settings. For example, if I accidently do something like this, system will not notice it and it will not show me where I have a mistake, so you should be very careful working with this part. And 100% of such settings are now performed with the page editor. So it's not so hard, not so difficult to do this customization with page editor and then we can add this code. Okay, in general, view config div represents UI structure, set of user interface items that you plan to see. Okay, great, let's move on to other items. After view config, we have view model config. This is a bit more difficult to understand because view model config is information about so-called attributes. Attributes are variables at the page level. So like storage items, like memory cells for page level, they have special names generated by application automatically. And once I try to change them, it turned out to be hard coded, each time you create them, so it's not a good idea to make them better if it looks a bit ugly like this. You should not try to change it because it looks like page has also submitted data saved separately, which has corresponding names inside of it. And if you start to beautify with no any part, so if you start to edit your attributes, probably your page will not work anymore. So I recommend you not to rename attributes. Each attribute represents some variable on the page. And usually attributes are connected with corresponding data columns. Data columns are parts of our object and object has its own invisible client-side representation in memory. So attributes are used to keep some data and connect with controls. And finally, we have model config, which represents set of data objects used with our page. Now, our case only one data object is used, reality. Reality entity is used to work with our page, but why we have so complex setting here is that freedom UI pages can operate with many data objects and many data lists at the same page. And like to classic UI, freedom UI page can be quite more complicated and may include many data objects at it. That's why this model config diff will be a bit more complex than you expect. Handlers, converters and validators are areas where we can do some programming. We can handle some existing events so we can make own custom handlers for some certain events and make some additional work for it. We can do conversion between columns by recolculations, but personally, I prefer to do it inside of handlers. And validators are used to perform some checks at client side to ensure that values provided in the columns are correct. And in case if they are not correct, it's possible to display error messages and prohibit saving of data. We will also do such examples later. So if you're asking about where we will program here, the most common answer will be we do our own handlers. But also please note, you probably noticed special text comments here in this code before and after different settings here, here, and even here. So you can see that we have some special comments. Such comments are very important. Please do not modify, do not remove them because they are necessary for page editor. It's unusual, but page editor doesn't search for the name of the object here, or a name of the array. Page editor searches for such system comments and then takes code between and analyzes it and representing page design for you. When finished and data changes are saved, page editor creates new set of items like div array, for example, and saves it into this code. So such text comments are used as text markers. They are necessary and they are vital for page editor. So please do not corrupt them, do not change, do not remove. They should be as it's. Okay, and possibly you have some questions about strange names. You will view models, view, view model, and model. Some of you who studied somewhere at university or who studied yourself with the way how UI can be programmed, probably know about architectural patterns. And maybe you know a pattern named MVC. And here we have a pattern named MVDM. MVM. Let me explain what it is. You can study and find some simple articles at Wikipedia about it. So MVM. This is an architectural pattern. So like some standard way of implementing things in programming, which helps us to make and to solve some typical task with the typical way. So we have typical solution for this. We have a task to manage our client-side application in our browser and main program in JavaScript. And there is a good practice to separate the row part from the code part and from data storage part. And in MVM pattern, it's recommended to separate visual part and code view, separately store data values and code model, and also make a separate controller unit, which is called view model. And view model has a lot of information about view. View model knows view structure, view model manages our view, it manages controls, and also view model is responsible for handling events that happens with view control. For example, user clicks on a button or user inputs some data. The reason why developers use this architectural pattern is to make application more manageable, to make it easy to develop or replace view, to make it easy to extend our model, and to make more or less structure a way to handle all events and to make business logic inside of view model. So some traces of it can be found in this text. View config diff represents the view structure, and that's why it's called view config diff, not just diff. By the way, the word diff here is probably shorted from a difference, and it means that it's information about only some changes. And it makes sense because our module is not made from scratch. Our module was made as inherited item from some tabbed pages left area, and it's a platform client module. So client modules as objects, they also can be inherited from each other, and diff area represents changes in comparison to previous parent item. That's why possibly such items called diff, and not just kind of list, which represents full set of items. This diff includes only changes, based template items like buttons, menu items, and so on. We'll be not listed here because they are supposed to be used by the inheritance. So when client side modules will finally form final page structure, they will take base parent one, they will apply child item like this setting, and finally they will analyze base diff, child diff, and they will make all of the components according to parent and child items. Okay, so view config diff represents visual part, represents view in MVVM pattern. Model config represents information about data entities used for our page, and also view model config, I think, and also works about the same because this is a registering of available variables that we can use in the page. And implementation of handler's implementation of events can be done inside of handlers, and also is already performed in parent modules, in parent template pages, like tab the pages that area, and such pages can be nested, it means inheritance can be done many times. It looks like quite boring thing, so let's do some practical step for today, and I will show you very simple, hello world complexity level example. So let's do some simple example, but first, as we want to make a button, it's better to start making a button with the help of editor. So let me show you how we can make a button to show something simple, but working and programmed. I can go to settings, edit page, edit page. I can add a button to my page, scroll down, here you can see list of existing columns, we can add new columns, and we have a lot of components. So the button probably was the first component supported in 3DMURY page, so we can put our buttons somewhere here, change its size, change its color, or maybe this. We can make some kind of funny caption, like push me. And if you want, you can translate this title into other supported languages. And by default, as you can see, we have a lot of supported actions. Like open records, like save data, close page, run business process, and so on. Once I started the account, I found 24 supported actions here. So I will just randomly select some action, and then I will replace it with something else. By the way, what's happening here? My title looks a bit strange. Okay, I want to use icon, something is wrong with my title here. No, it's okay. Okay, some bug appeared. Okay, push me and let's select some icon that will represent this idea. Okay, very direct. So we have more than 60 supported icons here. And okay, so, and I also set some done may action. I plan to change it later. I don't have any support menu, no any special conditions. We will study it later. Element code. Okay, let's call it push me button. Okay, that's all. We can save it. Now, after doing this, we can go to the code in order to find our button. Let's go to the code source code. And we find our button. Let's call search for push me. I will do control F. Oh, you see new editor search function here. It was different in previous versions. Okay, let it be like this. Thanks to our element code, we can easily find push me button by code. And this diff. Airway item. Of you can take different presents button settings. We have caption. We have type. And also we have clicked setting. Let's remember why number 52. And this is setting for some tender. Which is already programs and we're in parent templates, parent components. And the system knows how to implement this. Now we can go to handler's part. And make our own handler. I already have some example because making it from scratch is a bit difficult. So I will show you examples of freedom UI button. And this is example of a button. I will share it with you in our zoom. And also I will put it into my handler's collection manually. So what I do is providing setting here in my handler's collection. Handlers every technical. This is an every by the way, it looks like this editor was seriously changed because previously we had some unnecessary warnings related to. New JavaScript. Comments and features. And now it looks like in this editor. There are significant improvements related to the way how code is managed. So thanks developers. Version 813 now had a new type of editor here. Okay, this is my handler. Physically is also a JavaScript object with three. Now we have two properties. The quest and handler property. Request property represents the name of my handler. So it's kind of identity fire, which I can use to assign inside of the view. Configive items. So it's kind of inner technical name of my procedure. And handler itself is a synchronous function, which can do something useful. For example, we can do console output here. We can use embedded. Classicular front end core JavaScript framework made by creation called teresop. So when you see teresop here, you should understand this is a JavaScript core framework. Quite old, but still supported. You can use strong information method from it to show sample path messages. And also I'm going to show you how you can manage data read data and write data. We have a special procedure to get attribute values. Now it's perhaps your model. Perhaps a diff part. We already remember line number 52. So let's look at view model config. We have set of attributes. For the price, we have this name of the attribute. So copy it, go here and paste it. That's how we can correctly get price value inside of our JavaScript code. We can do console output to display this price. And we can also work with this price and show how we can set value into it. Request door context attribute name equals. Then we will just take 20% of this price and set it again. We have to normally analyze our code inside of a synchronous function, allowing other potential. Candlers to be started. So this is also very typical. And of handler code. In your case, you will have to change this line to find corresponding price attribute. And also to do it with setting value. So this example will show us message in the console. It will show us a part message. It would take price value and show proof of it in the console. Then it will take some part of it and set to the price column again. And that's all. We can save this code. Please know saving is important. From this moment, it's better to close this page. And then we go to check out works in most of cases. Probably it makes sense to reward the page, but in most of cases, browser cache doesn't really. Prevent us from working. So it will probably work normally even without the voting page. So open it again. Now we see our button enable browser developer console. F12 or control shift I. Plenty of warnings, as you can see here, they are minor warnings. And it's because freedom UI page is not ideal now. So system probably will be fixed later. Now it's not difficult. It's not a serious issue. So let's try to click on the button. Nothing happens or I just do something correctly. Oh, yeah, it was my mistake. Sure, because this is my handler, but my button by number 53 still performs. Previews action for it here is push me button. Here is clicked setting. So I just forgot to set it properly. Okay, here in my button, I have clicked property. I have to specify my own custom handler name here. It was my mistake. I just missed it. So I have to save and fix and save it. I will also copy this piece for you. You can think. If probably I should not copy big part of it. So I only should do something like this. So you will focus only on the most important thing. Okay, and we can close open. Probably now it will work. Yes, you see I did not remove the page, but it works well. So button works. It shows us to pop message takes original price takes 20% of it and saves as a new price here. And we have no error messages. No errors in network tab. No errors at the console. So everything looks very, very good smooth. No mistakes. Let's check again. For save. I should use push me. Yes, you can see now price change it. We have all the proofs here and no errors. So it looks like everything works according to the plan. This is example of a whole world application. So we can do some own programming inside of creation client side page. And of course later we will do a bit more useful, more meaningful steps. But now this is an example of how you can do your own code. How you can do some display. How you can access data from your page. Do something and how you can save data. Please know that access data is used with a weight operator because some code behind this method. It looks like this is something like a method and finally, some asynchronous functions behind it. And we need to use a weight operator here. If you do not use a weight, you will have a bit different structure at the end. And you will still have to dig into object that you will get from it. So recommended option is like this. A weight request, lower context, and then your attribute name. Okay, that's all for today. We said to be stronger than usual. So our session is over. Tomorrow we will do more programming examples. You will see more useful things with the refocuation with validation. And you will see how more different settings you can program on the page level. Thank you very much for your time. And the documentation about the frameworks of client. Yes, Adrienne, I can show you where you can find this documentation. In Croatia Academy guides, what developers, you can find front end development in classical UI. And then you will see GS classes reference. This is exactly this API for these terrestrial frameworks. So you can use some search here. For example, we used the method to show information. So method show information. You can search here, show information. And you can see examples of it. You can see source. And you can see all the arguments. Show information. Probably it's not the best example, but so finally you can try to get some use of it. And you can see some help stuff that can let you understand the how it works. So Adrienne, thank you for your question. And also I heard some more questions. Carlos, yes. Yes. Performance. Performance. Sorry. No, no, please, please ask questions, please. You see, it's about my problem of performance of the application in my laptop. Oh, yes, yes, we can do this. Would you like to record this part also as part of our training? I'm going to record this part as part of the application. If you want to keep it more personal in private, so we can stop recording. If you, if you, if you, when you can, I've no problem to me. No problem. Okay. So I will stop sharing our main part of the session is over. So I will stop sharing the environment. So thanks all for today's session. I will stop sharing the recording is still on. So Carlos, please, you're welcome. Show me please your environment. I will try to help. If you have a full zoom. Okay, the better. The content manager screen. I share my screen with you. Yes, yes, please. Okay, all of you. Thanks for all information and your questions. Please. Okay, show me your screen please. Yeah, sorry, I have to. You can show only one. But I. Ah. Okay. Green shares the button. So if I have two. Two screens. So I just connect one. Yes, please select one. Okay, I can see a screen. Thank you. Nice. So please show me how your creation works. And maybe you can agree for request of remote control. So I can manage your screen more efficiently. So yes, you are using the latest version. Yes, yes. We can start to investigate it. With the help. By the way, what type of browser. Your reason it's chrome. Yes, it's chrome. Yes. Okay, you try to run it once again. Yes, I restart in. Many occasions. And I don't work good. So let me show you. A little problem. For example, I go in advanced settings. Sorry. Okay. And I create a business process. For example. And that's it. Okay, so I use Windows. Pro for windows home. I have windows. You can find system information. Yes, I will have significant issues. Let me show you how you can fix this. But it will be not full fix. It will be just a workaround, which is not fully okay. Let me show you. So if you work on home, you should close your main shell page. And sometimes you will need to. Now you will see. Sometimes you need to even close the configuration page. But now it looks like you can work with it. So sorry. I can't. I can see how you do that. You can repeat that. Please. Okay. Just close other pages. That's the solution. So when you go to configuration section, you should close other main page. Create your. Create your will work normally. So it cannot work normally on home. Actually, because we still will face some problems. Even if you work with single page. But with, for example, setting business rules, you will face trouble. So I recommend you to upgrade to windows pro. But once you work with windows home. Now you, I can show you what you can do. You should close all other tabs of creation. In this case, your single tab will work normally. As you can see, you can do something. And some settings like this. Like you are my process. Then you can save it. So this will work. And it works more or less good. But when you need to go back to your main configuration section, you will have to use tabs and you will have to close other tabs. This is not comfortable. Yes. It's a safeable work for you. This works, but not so fast. And as far as I know, the problem is. Number of available web sockets. Okay. I am. And windows home. I think all of issues you have are caused by windows home. And as you can see, saving is performed. Okay. It's wait till successful operation. Also some memory. So we need to look at your memory availability. Could you please click on the performance tab. Second one after we have processes. Second one is performance. So you have 16 gigabytes of RAM and SSD. So your PC is very good. Your PC is fast. But windows windows is not good. So I recommend you to upgrade your windows to pro. In this case, it will be. Sorry. I'm sorry. Andra is my colleague. He takes the code the course to so he asked me. Okay. So I saved so save a cancel. And you can just open another tab with your. You can recover. Reviews page. Sure. Yes. Now you can see your process is saved. And you can export. You can do everything. So. Oh, well. It's work. Oh, it is so simple. Yeah. Yes. And it's unfortunately. This is caused by limited number of web sockets connections. For this session. So if collecting has been released, then it will not be the same. So we have fiveable videos today. Okay. All right. Please explain the background. Okay. Thank you. me my boss is over me all day and it's difficult for the course thank you very much no problem thank you thank you thank you thank you tomorrow yes so our session is over if any other questions hi Vigrat how far is sorry hi the battery yes please yes the compiler is successful but give me a message can I share that with you okay I will stop sharing so please base I'm sharing yes you see oh yes it's a warning message this warning message does not prevent you from from next steps so when you do some server side coding possibly previously you so in your previous experience maybe you also faced some warning messages and unfortunately for me it's not clear how to get rid of it easily it looks like some leftovers made by base product developers maybe we can also see it at my own environment surprisingly I probably told maybe which version currently you're running so maybe you have just a bit older version than I do because I recently switched to the latest one and your version may be not the same latest but this is not critical so you can just see this compilation result but the development I can complete yeah in general it's not ideal but it's something that is satisfactory so you can continue your work okay I can go to the system mode and the right so you can do next examples next steps of our videos so you can work normally yes okay okay thank you but I asked question if if I download the window 11 bro do I have to repeat the all step in the first lecture or it's installed by default unfortunately I have no experience of upgrading windows from home to pro I believe it should only change some files on your windows and it will not be like clean environment so you should have the same IIS website you should have the same stuff and I did not check it by my own so I have no information no practical experience with it so my company gave me a laptop with windows pro and I never tried to run on windows home and upgrade it yeah yeah thank you thank you very much to entry thank you too Paisel so our session is over thanks all of you watch this video to the end see you tomorrow goodbye goodbye",
    "chunk_type": "paragraph",
    "chunk_index": 0,
    "metadata": {
      "source_type": "video_transcript",
      "video_file": "Recording3.mp4",
      "duration": 8598.68
    },
    "word_count": 17300,
    "token_count": 20186,
    "context": {
      "heading": null,
      "paragraph_count": 1,
      "position_in_document": 0
    }
  }
]