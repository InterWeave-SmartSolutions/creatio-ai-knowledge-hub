{
  "summary_id": "86791e82c63f",
  "content_id": "37206dabe436",
  "summary_type": "hierarchical",
  "summary_text": "Document: Speaker 1\n\nMain Sections:\n• Speaker 1\n  - # Speaker 1\n\nSo today's day five of our development on Creature platform guided learning and we continue to work with some \nparts of Creature user interface slightly moving forward to so to study some server side items.\n  - And also I need to tell \nyou about Classic UI and possibly you'll be interested in migration from Classic UI to the Freedom ui.\n• Speaker 1\n  - # Speaker 1\n\nAnd you can see that for one main account record we can save unlimited number of addresses.\n  - So we can put \nunlimited number of addresses here and they will be usually displayed in a list.\n• Speaker 1\n  - # Speaker 1\n\nSo one account connected to as many detail records.\n  - And this physical connection is provided by use of lookup \ncolumns, correctly filled in for detail records.\n• Speaker 1\n  - # Speaker 1\n\nWe have contacts list, we have also emails or sorry, we have probably it's better to say communications.\n  - If you go to \ncontacts open any record, you will see communications detail.\n• Speaker 1\n  - # Speaker 1\n\nAnd that's how we can select a company and to see all its connected contacts.\n  - So usually connection is one too \nmany.\n• Speaker 1\n  - # Speaker 1\n\nAnd some of you who already participated in our develop and in our customization course, you already know how to \ndo this and you already saw building details.\n  - So this is nothing special for you.\n• Speaker 1\n  - # Speaker 1\n\nIn our realty business, we definitely need to speak with potential customers.\n  - We need to provide some kind of show \nfor them or our apartments or houses set for sale or rental.\n• Speaker 1\n  - # Speaker 1\n\nSo let's go to our configuration section select our package where we will work on maybe we focus on objects first \nand we will create manually create new object.\n  - So new object requires new good working friendly code.\n• Speaker 1\n  - # Speaker 1\n\nWe can call it like parent reality we can name it parent realty so title to be lookup based on reality from freedom UI \nUSR realty and we can make it column required because it's not good idea to keep it empty if we create any valid \nvisit so this colon will be required.\n  - We have no default values here, but we have a special lookup behavior.\n• Speaker 1\n  - # Speaker 1\n\nBut in details it's very common that detailed data is not as important as main record and when we plan to delete \nmain record delete data should be deleted.\n  - So our child detail data should be deleted without any questions like \nwhen we remove some contact, we are not caring about his mails and if it has a couple of males saved in contact \ncommunication so we don't care.\n• Speaker 1\n  - # Speaker 1\n\n--- Page 3 ---\n\nSo here our reality visit is something that is not very important in case if we delete parent reality so we can set \ndelete records from current object it means when parent reality is deleted, all connected visits will be removed \nautomatically physically.\n  - This is performed by help of foreign key at the database and with option cascade on delete.\n• Speaker 1\n  - # Speaker 1\n\nSo we can call this colon visit date time.\n  - We can make some default value just to make it easier to set up new values \nand will be system variable current time and date Default value will be provided in case if you try to add the new \nrecord.\n• Speaker 1\n  - # Speaker 1\n\nSo potential customer is a person who probably will buy a house or will rent an apartment.\n  - So potential customer, we \ndon't know who it is.\n• Speaker 1\n  - # Speaker 1\n\nSo we have an option do not control integrity which means please do not create foreign keys by default.\n  - When you \ncreate a lookup column foreign key is created automatically.\n• Speaker 1\n  - # Speaker 1\n\nSo such a column is usually not edited by end customer and it means that we have pretty no serious reasons to \ncontrol it with the help of foreign keys only in case if you try to remove corresponding contact then such created by \nor modified by columns should prevent this data from Removal.\n  - But it's very rare case when you remove contact who \npreviously was a user of your system.\n• Speaker 1\n  - # Speaker 1\n\nSo for created by and modified by for each object, if you had no such option, we will have two foreign keys pointing \nto contact entity.\n  - So now let's imagine you have a database which pretends to be quite fast and comfortable for \nwork for big company.\n• Speaker 1\n  - # Speaker 1\n\nAnd that's why they decided to make it with no foreign keys.\n  - For created by and for modified by and such behavior \nwas inherited from base lookup.\n• Speaker 1\n  - # Speaker 1\n\nIn this case do not control integrity will save you because otherwise system will fail to save your object where it can't \nfind physical data based at your point on selecting your lookup data source.\n  - So here we have just standard situation \npotential customer based on contact.\n• Speaker 1\n  - # Speaker 1\n\nSo comment after a visit could be really helpful if you want to proceed with this realty.\n  - So we can have a comment \nas a text field, very simple, not required and just text value.\n• Speaker 1\n  - # Speaker 1\n\nSo now you can see pages tab and we have to specify edit page for our reality visit.\n  - Obviously we don't have any \npage for this, so we can easily create with the add new page button we can create new page edit page for our detail \nwe can specify select some parent template that will be used as a basis for our page.\n• Speaker 1\n  - # Speaker 1\n\nSo reality visit form page Its parent packages realty template is mini page.\n  - Great, now we have to use existing \ncolumns.\n• Speaker 1\n  - # Speaker 1\n\nThe answer is that in case of detail management, when we add new data from the main edit page from main realty \npage, our parent realty will be already known and we should not allow to change it for user and we should probably \nshould not even show it for a user.\n  - So we can hide this column so we cannot show it on the page.\n• Speaker 1\n  - # Speaker 1\n\nSo it will be just hidden, it will be not shown on the page and our reality visit page will look like this.\n  - We can see why \nis there a red asterisk beside visit date and time and parent realty.\n• Speaker 1\n  - # Speaker 1\n\nThis is very common for details and creature to hide parent column from the page at all.\n  - So we can save our page \nnow.\n• Speaker 1\n  - # Speaker 1\n\nWhen you edit, you want to specify totally another set of columns.\n  - It could be used.\n• Speaker 1\n  - # Speaker 1\n\nAnd that's why we have this Option multiple pages based on specific field value.\n  - So for example, activity entity has a \nfield value category which shows us is it an email or a call or a meeting.\n• Speaker 1\n  - # Speaker 1\n\nOkay, finally we finished and we can publish our object again.\n  - As you can see, we have to do it twice.\n• Speaker 1\n  - # Speaker 1\n\nBut in general this is only makes sense to base core creation developers who wants to check if everything is okay \nwith metadata or not.\n  - In projects development and the end user customization, add on is just something that is \nsaved in addition for the page or object.\n• Speaker 1\n  - # Speaker 1\n\nWe have another options like finding your corresponding form page and open it from configuration section to be the \nsame result.\n  - Or you can achieve the same result if you go to settings page physically system designer.\n• Speaker 1\n  - # Speaker 1\n\nI prefer to use expanded list and this is very traditional for creation because expanded list means you can collapse it \nand it will take less space if it's not necessary or you can expand it.\n  - That's why it's called expanded.\n• Speaker 1\n  - # Speaker 1\n\nOf course we have to specify object first and as you probably guess, we have to find our real table visit object for our \ndetail.\n  - It immediately shows us set of columns.\n• Speaker 1\n  - # Speaker 1\n\nAnd there is no horizontal scrolls in classic UI and only 24 available columns to be displayed.\n  - So freedom UI is more \nflexible here.\n• Speaker 1\n  - # Speaker 1\n\nAnd if it has some data, they will also see corresponding data and they will see what they expect.\n  - So here is our list.\n• Speaker 1\n  - # Speaker 1\n\nIn reality visit we have suitable column parent real and system is smart enough to detect that you should use ID for \nmain record for this.\n  - So here you see this filter by page data will be based on ID of realty and it must be equal to \nrealty visit parent realty.\n• Speaker 1\n  - # Speaker 1\n\nWe can also program bulk actions for list.\n  - So when you operate with a list it's possible to select multiple records and \nthen we have bulk actions.\n• Speaker 1\n  - # Speaker 1\n\nOf course its action will be open new record, it will be new reality visit object and system will find its page \nautomatically.\n  - But here we have important setting which column values to set.\n• Speaker 1\n  - # Speaker 1\n\nSo please remember this is filling of a column that is used for connection between visits and our realty.\n  - Okay, great.\n• Speaker 1\n  - # Speaker 1\n\n--- Page 8 ---\n\nIf other users prefer to expand it, they also may use this management and they can collapse or expand only \nnecessary tails.\n  - So let's make a quick test of how our detail works.\n• Speaker 1\n  - # Speaker 1\n\nWe can copy this data, save it, check it out.\n  - You see the parent reality is copyable.\n• Speaker 1\n  - # Speaker 1\n\nMaybe it will help our system to work more correctly.\n  - Something unusual happens with my browser with my app.\n• Speaker 1\n  - # Speaker 1\n\nWe have to submit our changes to version control just to finalize this step of our settings so we can like more \nconfidently move on without afraid.\n  - Without being afraid of something can be lost in the middle.\n• Speaker 1\n  - # Speaker 1\n\nAnd we will sync changes which means pull and push to common repository.\n  - And now it's okay, it's done.\n• Speaker 1\n  - # Speaker 1\n\nAnd also you can use business rules if you want to do some kind of filtering or simple fields hiding or showing you \ncan use all the features.\n  - So you should remember that our page for detail is based on a separate client module that \nwas created today.\n• Speaker 1\n  - # Speaker 1\n\nSo inline edit should be disabled.\n  - So read only details make sense when you have some data automatically \ncalculated for it and such data is not expected to be added or modified by end user.\n• Speaker 1\n  - # Speaker 1\n\nAnd possibly before we moving on and work with classic ui, I need to show you something important related to \ncustomization of existing pages and also important things about customization of about managing your \napplications.\n  - So let me explain what I plan to do right now.\n• Speaker 1\n  - # Speaker 1\n\nFor example, we have accounts which represent list of companies and we want to connect such accounts with \nsome kind of third party website where we have a list of our customers and we need to make some connections \nwith it.\n  - So we need one more extra column at our accounts section.\n• Speaker 1\n  - # Speaker 1\n\nYou may now see some very strange package automatically created.\n  - And system does not allow us to change it.\n• Speaker 1\n  - # Speaker 1\n\nBut you need to know how technically this is done and where it will be finally saved.\n  - And how to for example, turn \nyour system back to its previous step, previous stage.\n• Speaker 1\n  - # Speaker 1\n\nNow I should pay your so I attract your attention that we will finally receive new package.\n  - Our customization will be \nsaved as a special type of item into this new package.\n• Speaker 1\n  - # Speaker 1\n\nYes, it's saved correctly.\n  - So everything's good.\n• Speaker 1\n  - # Speaker 1\n\nAnd once we need to save some customizations system created automatically new package with this strange name \nand it created several items for it.\n  - And such items are not so easy.\n• Speaker 1\n  - # Speaker 1\n\nLet's open it.\n  - Maybe we'll understand it better when we open it.\n• Speaker 1\n  - # Speaker 1\n\nParent object is account and replacing object code is absolutely the same.\n  - This is important rule of creature \narchitecture.\n• Speaker 1\n  - # Speaker 1\n\nAs you can see here, this editor offers us possibility to change its code, but physically system will not allow us to \nsave it and it will show us big red messages when we try to save such changes.\n  - So I think that this editor should not \nallow you to modify code in case if you work with replace an object.\n• Speaker 1\n  - # Speaker 1\n\nAnd in general it's not recommended to change its type, even though system offers us such possibility to change the \ntype in its subtype range.\n  - For example, if original type was text 200, then potentially you can extend it to text 500.\n• Speaker 1\n  - # Speaker 1\n\nSo we cannot rename inherited columns.\n  - We can only change its title.\n• Speaker 1\n  - # Speaker 1\n\nIn total we have record level access rights where some records can be editable and others will be protected and will \nbe read only and some other records maybe will be only hidden and shown only for developers and also for some \nrare cases.\n  - You can also use column level protection of data where some columns are shown and other columns are \nhidden and other columns are read only.\n• Speaker 1\n  - # Speaker 1\n\nThis can be done.\n  - You can see it clearly if you go to configuration section.\n• Speaker 1\n  - # Speaker 1\n\n--- Page 12 ---\n\nBut then after creating it in CRT core base package we had several reasons to do changes in completeness package, \nin email mining package and in some other packages including this weird package related to Customer360 app \nmade recently.\n  - So you should understand that we have original structure of the account entity and then we have \nsome add ons added to it.\n• Speaker 1\n  - # Speaker 1\n\nSo if our package is somewhere at the bottom of the structure, our changes will be added the last and it will be no \nproblem for us to specify final properties of our object, for example disable some access restrictions or change \nsome column titles.\n  - Final structure of account is formed by its origin plus all the replacements.\n• Speaker 1\n  - # Speaker 1\n\nReplacing object uses existing table and adds new columns there.\n  - If you will remove replacing object from your \nsystem logically your new column will disappear physically.\n• Speaker 1\n  - # Speaker 1\n\nAnd Adrian is asking very interesting question which I plan to move on here.\n  - So you work with some account page \nand you would like to keep your settings saved in a proper place.\n• Speaker 1\n  - # Speaker 1\n\nBy default system will create separate editable package for each scenario, for each case when you want to \ncustomize some existing app.\n  - But obviously you may not want to work with such many packages.\n• Speaker 1\n  - # Speaker 1\n\n--- Page 13 ---\n\nSo your question and Adrian question is asking about is it possible to use your own package instead of such ugly \nstuff that was created by system?\n  - And the answer is yes, we can manage this.\n• Speaker 1\n  - # Speaker 1\n\nSo you will enable it of course, package installed application and we will provide the same name for our lookup and \ntry to save it.\n  - Okay.\n• Speaker 1\n  - # Speaker 1\n\nWe don't really want this, so we want probably to remove this package at all.\n  - And maybe we would like to use our \nexisting new package which is a dev package.\n• Speaker 1\n  - # Speaker 1\n\nAnd now you see our dev Classic package is connected to this app and we can see properties of this package.\n  - Let's \ncheck.\n• Speaker 1\n  - # Speaker 1\n\nAnd we will continue customization of Customer360 in our classic package.\n  - Andreen, is it what you were asking for?\n• Speaker 1\n  - # Speaker 1\n\nAs you can see, this transfer takes significant time because it looks like system performance performs a lot of\n\n--- Page 14 ---\n\nchecks of items that we process and it makes sure that we have no other connections to this item.\n  - So it does \nsomething like probably some excessive work.\n• Speaker 1\n  - # Speaker 1\n\nNow it's empty.\n  - It should not take a lot of time.\n• Speaker 1\n  - # Speaker 1\n\nOf course, you should be quite rational here without obvious mistakes that you can prevent because this is developer \noriented tool.\n  - If you intentionally do something incorrectly, it will not save you and it will try to do what you're asking \nfor.\n• Speaker 1\n  - # Speaker 1\n\nOkay, thank you for all of your active questions.\n  - Let's make a five or seven minutes break, we'll refresh a bit and then \nmove on with next topics.\n• Speaker 2\n  - # Speaker 2\n\nHi.\n• Speaker 1\n  - # Speaker 1\n\nYes, hello.\n• Speaker 2\n  - # Speaker 2\n\nI have a. I have a small question I have.\n  - Yeah, so I said we use the two lookups.\n• Speaker 1\n  - # Speaker 1\n\n--- Page 15 ---\n\nOkay.\n• Speaker 2\n  - # Speaker 2\n\nFirst one is for country and second one is for city.\n  - Right?\n• Speaker 1\n  - # Speaker 1\n\nSo what about which lookup you're interested?\n  - Is it the main realty or.\n• Speaker 2\n  - # Speaker 2\n\nYeah, main reality.\n  - We have country and city.\n• Speaker 1\n  - # Speaker 1\n\nDrop down type.\n• Speaker 2\n  - # Speaker 2\n\nNo country and city.\n• Speaker 1\n  - # Speaker 1\n\nThis one.\n  - So I can't hear.\n• Speaker 2\n  - # Speaker 2\n\nYeah, yeah.\n  - So we have a plus icon over there, right?\n• Speaker 1\n  - # Speaker 1\n\nSo you ask about if it's possible to manually create new city for this.\n  - --- Page 16 ---\n• Speaker 2\n  - # Speaker 2\n\nOkay, Can I, can we hide that button?\n  - Disable that button if possible.\n• Speaker 1\n  - # Speaker 1\n\nThis.\n  - Yes, sure you can.\n• Speaker 1\n  - # Speaker 1\n\nAnd you should know that we are working with Freedom ui, but maybe you will also need to work with some classic \nUI old projects.\n  - So you need to get some basic understanding of how classic UI can be managed.\n• Speaker 1\n  - # Speaker 1\n\nOh, I'm not sure because it looks like this is hard coded thing.\n  - So possibly you may find somewhere in CSS value for \nthis color, but it looks like this is an image designed somewhere in the app.\n• Speaker 1\n  - # Speaker 1\n\nYou see the current source, so you may try to replace actual storage of this image and you may design your own and \nthat's how you will finally make corresponding change.\n  - Rakhi, is it clear?\n• Speaker 1\n  - # Speaker 1\n\nSo this is part for core which is not designed to Be changeable by configuration changes.\n  - But if you really want, you \ncan replace files on disk with another ones and that's how you can do this.\n• Speaker 1\n  - # Speaker 1\n\nAnd if you change cached setting, you will have to log out and log in order to read changed values properly for your \nuser session.\n  - In the current example, current package is not cached, so we may change it without logging out.\n• Speaker 1\n  - # Speaker 1\n\nIf you recently made changes in your object and even published it still may keep some incorrect settings at \napplication server level cache.\n  - So we need to do this restart.\n• Speaker 1\n  - # Speaker 1\n\nAnd we have to be very careful with the code because code will not be able to change if we finish its input.\n  - And that's \nwhy we have to type it correctly from the first attempt.\n• Speaker 1\n  - # Speaker 1\n\nSo I will only change something like a name column.\n  - I will provide some minor change copyable setting, no any other \nsettings.\n• Speaker 1\n  - # Speaker 1\n\nNow we can edit it.\n  - And editing a section is much safer than creating it.\n• Speaker 1\n  - # Speaker 1\n\nToday's Friday and probably tired a bit.\n  - So copyable value type based on existing lookup realty type or Classic UI \nDrop down list block behavior, no redundantly, no hiding titles.\n• Speaker 1\n  - # Speaker 1\n\nBy the way, I will show you some trick which is supported in Classic UI but is not yet performed in Freedom ui.\n  - Comment here in their name is comment.\n• Speaker 1\n  - # Speaker 1\n\nWe have business rules here similar to Freedom UI and also we can program in JavaScript code if necessary.\n  - And \nlet's go back keep it simple and save the changes.\n• Speaker 1\n  - # Speaker 1\n\nSo we have much more objects for Classic UI section because such things as tags, folders and files are saved in a \nseparate dedicated objects.\n  - And we have more tables for this for the database.\n• Speaker 1\n  - # Speaker 1\n\nOkay, let's go to another page.\n  - Go to reality Classic page.\n• Speaker 1\n  - # Speaker 1\n\n--- Page 19 ---\n\nSo okay, let it be Paris Ren.\n  - The type is apartment.\n• Speaker 1\n  - # Speaker 1\n\nThis one it's empty so we can simply add sale and rental for our Classic UI and also we can bind all data to save it \ninto our dev Classic package.\n  - So this is important step because such data also should travel to our test and \nproduction.\n• Speaker 1\n  - # Speaker 1\n\nThis one will be about position of a module in Workplace.\n  - Let's check Reality Realty Classic.\n• Speaker 1\n  - # Speaker 1\n\nSo it's also browser dependent and you should check and test it before you advertise this for your customers \nbecause it's a browser dependent feature and it looks like it depends on HTML5 elements or something like this.\n  - So \nsome browsers does not.\n• Speaker 1\n  - # Speaker 1\n\nSo finally we had an example of Classic UI section.\n  - We can set columns for our section list set fields to display in \nClassic UI we have different approach for setting up columns.\n• Speaker 1\n  - # Speaker 1\n\nSo you should save for all users and such default profile will be saved as data item to our package.\n  - You can find it \nhere reload and that's how we can change and transport Classic UI columns setup to test and production.\n• Speaker 1\n  - # Speaker 1\n\nBut we should do the same code here and here.\n  - We should do it very carefully.\n• Speaker 1\n  - # Speaker 1\n\nThat's why we have to do it once again.\n  - Okay, Price type, offer type, maybe comment.\n• Speaker 1\n  - # Speaker 1\n\nIt doesn't represent any useful data for us.\n  - This one is correct data with new client module.\n• Speaker 1\n  - # Speaker 1\n\nThat's why we have a lot of common functionality and no need to implement this functionality each time in each \nseparate section.\n  - So our functionality is now in parent one and all the buttons for classic UI section, like new actions, \nview buttons, grid folders, feature tag, everything is inherited.\n• Speaker 1\n  - # Speaker 1\n\nSo if you need to change something you can do it carefully here or better to rely on Section wizard because it will do \nit better for you than you do manually.\n  - And in Classic UI Section wizard doesn't allow you to use all available \ncomponents, so you should be so in general Classic UI programming is harder because you can do some additional \ncomponents and display them, but Section wizard does not support it.\n• Speaker 1\n  - # Speaker 1\n\nI can show you a bit more examples, but I believe you will not focus on Classic UI so hard and this is just for brief \nreview for you.\n  - Okay, that's all for today.\n• Speaker 1\n  - # Speaker 1\n\nAs a final step for today, it looks like I unnecessary caused it.\n  - I have to remember everything we did in File System of \ncourse then I will submit it to Version Control just to keep all the history.\n\nKey Concepts: json, entity, module, detail, integration",
  "key_points": [
    "json",
    "entity",
    "module",
    "detail",
    "integration",
    "data",
    "page",
    "customization",
    "configuration",
    "client"
  ],
  "keywords": [
    "speaker",
    "page",
    "let",
    "package",
    "object",
    "classic",
    "data",
    "ui",
    "okay",
    "like"
  ],
  "topics": [
    "speaker"
  ],
  "summary_length": 4495,
  "original_length": 14305,
  "compression_ratio": 0.3142257951765117,
  "confidence_score": 0.9,
  "created_timestamp": "2025-07-23T16:53:25.788183",
  "metadata": {
    "structure": {
      "title": "Speaker 1",
      "sections": [
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo today's day five of our development on Creature platform guided learning and we continue to work with some \nparts of Creature user interface slightly moving forward to so to study some server side items.",
            "And also I need to tell \nyou about Classic UI and possibly you'll be interested in migration from Classic UI to the Freedom ui.",
            "So what I need \nto tell you first today, this is about details.",
            "Because this is a very important piece of Creature configuration and you \nwill face it almost everywhere."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd you can see that for one main account record we can save unlimited number of addresses.",
            "So we can put \nunlimited number of addresses here and they will be usually displayed in a list.",
            "And the reason why Creature has \ndetails is need to save additional data in connection to our main entity.",
            "So our main entity is a single record and then \nwe need to keep information for example about different types of addresses for our customer or different emails."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo one account connected to as many detail records.",
            "And this physical connection is provided by use of lookup \ncolumns, correctly filled in for detail records.",
            "Vikrat, thank you very much for confirmation.",
            "Thank you for working \nwith your redis and I'm really happy that you finally made your system working correctly.",
            "Thank you."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe have contacts list, we have also emails or sorry, we have probably it's better to say communications.",
            "If you go to \ncontacts open any record, you will see communications detail.",
            "So here you see we have mobile phones, email, \nbusiness phone, but in general we have plenty of Supported communication options and communications are saved \nas a detail connected with main entity in context.",
            "We also have detail named job experience."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd that's how we can select a company and to see all its connected contacts.",
            "So usually connection is one too \nmany.",
            "Maybe some of you will ask about is it possible to make a connection one to one or data connection many to \nmany.",
            "Physically this is possible, but you should use for one to one you still will have to use separate object."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd some of you who already participated in our develop and in our customization course, you already know how to \ndo this and you already saw building details.",
            "So this is nothing special for you.",
            "But some of you who never attended \nany of creatio training sessions, so you need to know what detail is how to build it because it's almost the same \nimportant as knowledge how to build sections.",
            "So I will show you step by step example of building details and I will \nexplain why we need it."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nIn our realty business, we definitely need to speak with potential customers.",
            "We need to provide some kind of show \nfor them or our apartments or houses set for sale or rental.",
            "And we need to organize these actions.",
            "So we need to \norganize such visits, such conversations."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo let's go to our configuration section select our package where we will work on maybe we focus on objects first \nand we will create manually create new object.",
            "So new object requires new good working friendly code.",
            "We can call \nit something like realty visit title will be also good."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe can call it like parent reality we can name it parent realty so title to be lookup based on reality from freedom UI \nUSR realty and we can make it column required because it's not good idea to keep it empty if we create any valid \nvisit so this colon will be required.",
            "We have no default values here, but we have a special lookup behavior."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nBut in details it's very common that detailed data is not as important as main record and when we plan to delete \nmain record delete data should be deleted.",
            "So our child detail data should be deleted without any questions like \nwhen we remove some contact, we are not caring about his mails and if it has a couple of males saved in contact \ncommunication so we don't care."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\n--- Page 3 ---\n\nSo here our reality visit is something that is not very important in case if we delete parent reality so we can set \ndelete records from current object it means when parent reality is deleted, all connected visits will be removed \nautomatically physically.",
            "This is performed by help of foreign key at the database and with option cascade on delete.",
            "So physical delete performs on the database level, not at application level.",
            "Unfortunately you can't handle you \ncannot handle such delete at application level because it will be triggered and made by database foreign key tools."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo we can call this colon visit date time.",
            "We can make some default value just to make it easier to set up new values \nand will be system variable current time and date Default value will be provided in case if you try to add the new \nrecord.",
            "And it makes sense especially if you want to change for example till tomorrow.",
            "But having similar time \nsetting automatical value here will be quite good."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo potential customer is a person who probably will buy a house or will rent an apartment.",
            "So potential customer, we \ndon't know who it is.",
            "So sometimes could be empty.",
            "And lookup is contact object which is a very typical way when \nwe need to get some kind of personal reference."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo we have an option do not control integrity which means please do not create foreign keys by default.",
            "When you \ncreate a lookup column foreign key is created automatically.",
            "But if you enable option do not control integrity it \nmeans that foreign key will be not created."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo such a column is usually not edited by end customer and it means that we have pretty no serious reasons to \ncontrol it with the help of foreign keys only in case if you try to remove corresponding contact then such created by \nor modified by columns should prevent this data from Removal.",
            "But it's very rare case when you remove contact who \npreviously was a user of your system."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo for created by and modified by for each object, if you had no such option, we will have two foreign keys pointing \nto contact entity.",
            "So now let's imagine you have a database which pretends to be quite fast and comfortable for \nwork for big company.",
            "And then you have a table in this database contacts table which has 2000 foreign keys on it."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd that's why they decided to make it with no foreign keys.",
            "For created by and for modified by and such behavior \nwas inherited from base lookup.",
            "Oh sorry.",
            "From base entity.",
            "If you will search for a base entity in our packages, open \nit."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nIn this case do not control integrity will save you because otherwise system will fail to save your object where it can't \nfind physical data based at your point on selecting your lookup data source.",
            "So here we have just standard situation \npotential customer based on contact.",
            "We have all standard settings and the only change was selection window.",
            "So \nfull scale selection window selected just to make it more comfortable to select potential contacts potential \ncustomers as a context from big selection window.",
            "Okay, what else?"
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo comment after a visit could be really helpful if you want to proceed with this realty.",
            "So we can have a comment \nas a text field, very simple, not required and just text value.",
            "Okay, so now it looks like our simple detail object is \nalmost ready and we have to save and publish it.",
            "Clicking publish as you remember will automatically perform save \nfirst."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo now you can see pages tab and we have to specify edit page for our reality visit.",
            "Obviously we don't have any \npage for this, so we can easily create with the add new page button we can create new page edit page for our detail \nwe can specify select some parent template that will be used as a basis for our page.",
            "Our column set is not so big \nand impressive so we can just take some mini page example which will also look good if you have not so many \ncolumns."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo reality visit form page Its parent packages realty template is mini page.",
            "Great, now we have to use existing \ncolumns.",
            "As you can see we can add new columns but we already have data model attributes already designed in \nour object so we can just show it up.",
            "So what we need here is visit date and time.",
            "Probably the first important \ncolumn that we need to display."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThe answer is that in case of detail management, when we add new data from the main edit page from main realty \npage, our parent realty will be already known and we should not allow to change it for user and we should probably \nshould not even show it for a user.",
            "So we can hide this column so we cannot show it on the page.",
            "And in case of \ncreating a record detail or in case of Updating new record or update an existing record or editing record."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo it will be just hidden, it will be not shown on the page and our reality visit page will look like this.",
            "We can see why \nis there a red asterisk beside visit date and time and parent realty.",
            "It means the column is required system will not \nallow us to save data if required column is empty.",
            "Okay."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThis is very common for details and creature to hide parent column from the page at all.",
            "So we can save our page \nnow.",
            "So save it fully.",
            "No business rules, no code, no any special settings."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWhen you edit, you want to specify totally another set of columns.",
            "It could be used.",
            "And also we have an option for \ndifferent pages depending on some specific field value.",
            "This can be helpful in case if your entity is quite big and \ncomplex."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd that's why we have this Option multiple pages based on specific field value.",
            "So for example, activity entity has a \nfield value category which shows us is it an email or a call or a meeting.",
            "And depending on this column we can use \ndifferent pages.",
            "And when you look at activities section, for example, you select an email, try to open its page based \non this information system will show you email edit page.",
            "If you do the same for a call, it will open you call edit page \nfor activity."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOkay, finally we finished and we can publish our object again.",
            "As you can see, we have to do it twice.",
            "First to create \nit, second to finalize assigning of a page for the object.",
            "Okay, great.",
            "Now our object is ready."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nBut in general this is only makes sense to base core creation developers who wants to check if everything is okay \nwith metadata or not.",
            "In projects development and the end user customization, add on is just something that is \nsaved in addition for the page or object.",
            "So we don't need to modify it.",
            "Attempt to modify.",
            "We should not remove it \nfrom the system."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe have another options like finding your corresponding form page and open it from configuration section to be the \nsame result.",
            "Or you can achieve the same result if you go to settings page physically system designer.",
            "Then you find \napplication hub.",
            "Then you find your realty application.",
            "Switch to pages and find form page."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nI prefer to use expanded list and this is very traditional for creation because expanded list means you can collapse it \nand it will take less space if it's not necessary or you can expand it.",
            "That's why it's called expanded.",
            "I would say it's \nexpandable when it's necessary to see some data from it.",
            "So let's use this expanded list component carefully drag \nand drop it on our page."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOf course we have to specify object first and as you probably guess, we have to find our real table visit object for our \ndetail.",
            "It immediately shows us set of columns.",
            "So possibly we have to take care of set of columns.",
            "And I would like \nto show here first to be date and time potential customer, maybe comment and then create it on maybe just for \nreference.",
            "I would also display parent reality."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd there is no horizontal scrolls in classic UI and only 24 available columns to be displayed.",
            "So freedom UI is more \nflexible here.",
            "Okay, so we have this list of data, but what we need.",
            "How did you add the columns again?",
            "I just missed \nit."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd if it has some data, they will also see corresponding data and they will see what they expect.",
            "So here is our list.",
            "But also we need to do some additional settings in the right part.",
            "This is detail and detail must show us data only \nconnected to his main entity record only for currently selected realty and not any other realty."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nIn reality visit we have suitable column parent real and system is smart enough to detect that you should use ID for \nmain record for this.",
            "So here you see this filter by page data will be based on ID of realty and it must be equal to \nrealty visit parent realty.",
            "That's how we will filter our data and show only visits for corresponding house, not for any \nother another house.",
            "Okay, this filter is mandatory, so you must do this."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe can also program bulk actions for list.",
            "So when you operate with a list it's possible to select multiple records and \nthen we have bulk actions.",
            "For example, you can program additional actions here and that's how you can do some \ncustomization and additional functions that will be running for selected data.",
            "They are called bulk actions."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOf course its action will be open new record, it will be new reality visit object and system will find its page \nautomatically.",
            "But here we have important setting which column values to set.",
            "As I told you, when we create new \ndetailed data, we must take care about parent reality value.",
            "So we have to set here some default value for parent \nreality.",
            "Parent reality will have its default value."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo please remember this is filling of a column that is used for connection between visits and our realty.",
            "Okay, great.",
            "No any additional settings.",
            "So you just have to remember when you build your detail, you should set up your list and \nthen take care about plus button.",
            "That's all."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\n--- Page 8 ---\n\nIf other users prefer to expand it, they also may use this management and they can collapse or expand only \nnecessary tails.",
            "So let's make a quick test of how our detail works.",
            "Let's try to add new record.",
            "You see default value \nof your visit date and time was set.",
            "Okay, let's set it for tomorrow the same time."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe can copy this data, save it, check it out.",
            "You see the parent reality is copyable.",
            "It's very important to keep it \ncopyable.",
            "So in this case creating a new record was correctly copied previous parent realty.",
            "And obviously we can do \nit one more copy."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nMaybe it will help our system to work more correctly.",
            "Something unusual happens with my browser with my app.",
            "So \nlet's check about its CPU and memory.",
            "Okay, I will reward the page fully.",
            "This is not a result of adding details, so it's \nprobably some kind of crash but not related to our detailed data."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe have to submit our changes to version control just to finalize this step of our settings so we can like more \nconfidently move on without afraid.",
            "Without being afraid of something can be lost in the middle.",
            "So I recommend \nyou to do such comments in version control because it helps to keep all your history.",
            "And also if something happens \nwith your environment, having such history will be a great help because you'll be able to recover anything that you \ndeveloped.",
            "So in my case, now everything was saved."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd we will sync changes which means pull and push to common repository.",
            "And now it's okay, it's done.",
            "So we can \ntrack our changes at our GitHub repository 7commits.",
            "You can see all the history, you see how many files were \nchanged and so on.",
            "Each time we do this, you'll be able to track all the history and make control over what is going \non here."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd also you can use business rules if you want to do some kind of filtering or simple fields hiding or showing you \ncan use all the features.",
            "So you should remember that our page for detail is based on a separate client module that \nwas created today.",
            "It was a reality visit page.",
            "So this reality visit form page, as you can see it's a separate client\n\n--- Page 9 ---\n\nmodule.",
            "We can even look at its code if interested."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo inline edit should be disabled.",
            "So read only details make sense when you have some data automatically \ncalculated for it and such data is not expected to be added or modified by end user.",
            "Read only details are helpful, \nespecially if you use some kind of integration with third party systems.",
            "And you can read data from third party data \nsources using for example some database to database connection if it's on site and then display such data as a list \nyour pages."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd possibly before we moving on and work with classic ui, I need to show you something important related to \ncustomization of existing pages and also important things about customization of about managing your \napplications.",
            "So let me explain what I plan to do right now.",
            "Let's imagine this is very typical by the way, this is a very \ncommon scenario."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nFor example, we have accounts which represent list of companies and we want to connect such accounts with \nsome kind of third party website where we have a list of our customers and we need to make some connections \nwith it.",
            "So we need one more extra column at our accounts section.",
            "And simply speaking, we need to add some \ncolumns into existing entities.",
            "We can do this easily with no code approach.",
            "Let me show you how it's possible to \ndo."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nYou may now see some very strange package automatically created.",
            "And system does not allow us to change it.",
            "And this strange package will be used.",
            "So it will be created by system automatically.",
            "And when we customize \nsomething, system will save our changes into this package."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nBut you need to know how technically this is done and where it will be finally saved.",
            "And how to for example, turn \nyour system back to its previous step, previous stage.",
            "If you realize that such change was not designed, was not \ndesired anymore.",
            "So when you change like this, you can save it.",
            "Also you can hide existing columns."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nNow I should pay your so I attract your attention that we will finally receive new package.",
            "Our customization will be \nsaved as a special type of item into this new package.",
            "So let's try to do this and then let's see what finally will \nhappen.",
            "This is a fully valid flow that valid algorithm how to customize existing tools.",
            "You could also customize it \nthe same by going to application hub, finding Customer360 app and then making changes for a page from there."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nYes, it's saved correctly.",
            "So everything's good.",
            "We can even edit, inline edit.",
            "We can even do like this and save our \nchanges.",
            "So then open it."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd once we need to save some customizations system created automatically new package with this strange name \nand it created several items for it.",
            "And such items are not so easy.",
            "Let me show you properties.",
            "We have special type \nof object which is called replacing object.",
            "It's not usual object, this is replacing object."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nLet's open it.",
            "Maybe we'll understand it better when we open it.",
            "First of all, it's interesting that replacing object it has \nreplace parent option on which clearly states that this is not a usual regular object.",
            "Replacing object is used when \nyour original object is present and your task is to customize it.",
            "But original object is not in your package and the \noriginal package is not editable."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nParent object is account and replacing object code is absolutely the same.",
            "This is important rule of creature \narchitecture.",
            "So when you replace some entity, its name remains the same, you can change its title.",
            "Moreover, it was \nused in base platform bank software products where original account was replaced and sorry, it was renamed with a \nanother name called legal entity.",
            "But physically it was still account entity and it's still the same table and the same \nlogical name at program code."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAs you can see here, this editor offers us possibility to change its code, but physically system will not allow us to \nsave it and it will show us big red messages when we try to save such changes.",
            "So I think that this editor should not \nallow you to modify code in case if you work with replace an object.",
            "Okay?",
            "So code must be the same as original \none."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd in general it's not recommended to change its type, even though system offers us such possibility to change the \ntype in its subtype range.",
            "For example, if original type was text 200, then potentially you can extend it to text 500.",
            "But \nI do not recommend you to do this because you will face some additional unexpected difficulties.",
            "So it's possible, \nbut I think not so feasible.",
            "So it's better not touch types of columns when you make replacing objects."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo we cannot rename inherited columns.",
            "We can only change its title.",
            "Our custom columns are shown here in \ncolumns list.",
            "And usually the reason why developers create replacing objects is need to add your own columns."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nIn total we have record level access rights where some records can be editable and others will be protected and will \nbe read only and some other records maybe will be only hidden and shown only for developers and also for some \nrare cases.",
            "You can also use column level protection of data where some columns are shown and other columns are \nhidden and other columns are read only."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThis can be done.",
            "You can see it clearly if you go to configuration section.",
            "Let me explain.",
            "Let's go to all packages, \nsearch for objects and look for account object and make it strictly searched by equals condition.",
            "So only if object \nname equals to account it will be shown here."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\n--- Page 12 ---\n\nBut then after creating it in CRT core base package we had several reasons to do changes in completeness package, \nin email mining package and in some other packages including this weird package related to Customer360 app \nmade recently.",
            "So you should understand that we have original structure of the account entity and then we have \nsome add ons added to it.",
            "Finally, our last addition will be from our customer, so from our editable package and it \nwill be like a final layer of all the settings."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo if our package is somewhere at the bottom of the structure, our changes will be added the last and it will be no \nproblem for us to specify final properties of our object, for example disable some access restrictions or change \nsome column titles.",
            "Final structure of account is formed by its origin plus all the replacements.",
            "It's interesting to \nmention that at the database level we have just only one data table.",
            "Let me show you."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nReplacing object uses existing table and adds new columns there.",
            "If you will remove replacing object from your \nsystem logically your new column will disappear physically.",
            "It will be present in the database as a kind of leftover.",
            "But it will be not so critical, not so important.",
            "And I think that end users will notice it at all."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd Adrian is asking very interesting question which I plan to move on here.",
            "So you work with some account page \nand you would like to keep your settings saved in a proper place.",
            "Yes, Adrian, I will show you now and I'm just going \nprobably not so fast with explanations here.",
            "So now we have Customer360 app and for this app system created \neditable package.",
            "And we have some contents in this editable package."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nBy default system will create separate editable package for each scenario, for each case when you want to \ncustomize some existing app.",
            "But obviously you may not want to work with such many packages.",
            "Also you may not \nwant to work with packages with ugly names.",
            "Let me explain what I'm talking about.",
            "About let's reload our data, go \nto all items."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\n--- Page 13 ---\n\nSo your question and Adrian question is asking about is it possible to use your own package instead of such ugly \nstuff that was created by system?",
            "And the answer is yes, we can manage this.",
            "This is not obvious and you have to \nperform additional steps to enable such management.",
            "So let me show you how you should do this.",
            "Let's go to \nlookups or we can go to studio lookups."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo you will enable it of course, package installed application and we will provide the same name for our lookup and \ntry to save it.",
            "Okay.",
            "This is only developer tool so we do not need to transport such registering of package to test and \nproduction.",
            "We can open contents.",
            "And now you will see all installed applications, all existing packages and you will \nsee settings for all packages."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe don't really want this, so we want probably to remove this package at all.",
            "And maybe we would like to use our \nexisting new package which is a dev package.",
            "We have it Dev Classic package.",
            "So we would like to use dev Classic \npackage for this.",
            "So we can try to do this replacement instead of this."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd now you see our dev Classic package is connected to this app and we can see properties of this package.",
            "Let's \ncheck.",
            "What about dependencies?",
            "You see that System automatically added Customer360 app as a parent \ndependency to this package when we made changes, when we customized this stuff.",
            "So we did something like this."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd we will continue customization of Customer360 in our classic package.",
            "Andreen, is it what you were asking for?",
            "Okay, great.",
            "Thank you, Adrian.",
            "So now we have multi action move to another package."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAs you can see, this transfer takes significant time because it looks like system performance performs a lot of\n\n--- Page 14 ---\n\nchecks of items that we process and it makes sure that we have no other connections to this item.",
            "So it does \nsomething like probably some excessive work.",
            "But okay, it makes it successful.",
            "Now you see, our customization \ntraveled to this Dev Classic package.",
            "Now if we go here, you see our customization should be present here."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nNow it's empty.",
            "It should not take a lot of time.",
            "Yes, successfully deleted.",
            "So we have no ugly package anymore.",
            "We \nhave some correctly created packages, good names."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOf course, you should be quite rational here without obvious mistakes that you can prevent because this is developer \noriented tool.",
            "If you intentionally do something incorrectly, it will not save you and it will try to do what you're asking \nfor.",
            "So you should consider yourself before making changes here because it's like architecture but you can manage.",
            "Thank you Adrian for your questions.",
            "Okay, it's time for us to have just a short break, probably five or seven minutes."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOkay, thank you for all of your active questions.",
            "Let's make a five or seven minutes break, we'll refresh a bit and then \nmove on with next topics.",
            "Thank you."
          ]
        },
        {
          "heading": "Speaker 2",
          "key_points": [
            "# Speaker 2\n\nHi."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nYes, hello."
          ]
        },
        {
          "heading": "Speaker 2",
          "key_points": [
            "# Speaker 2\n\nI have a. I have a small question I have.",
            "Yeah, so I said we use the two lookups."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\n--- Page 15 ---\n\nOkay."
          ]
        },
        {
          "heading": "Speaker 2",
          "key_points": [
            "# Speaker 2\n\nFirst one is for country and second one is for city.",
            "Right?",
            "So in the drop down button we have one plus icon is there if \nyou remember."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo what about which lookup you're interested?",
            "Is it the main realty or."
          ]
        },
        {
          "heading": "Speaker 2",
          "key_points": [
            "# Speaker 2\n\nYeah, main reality.",
            "We have country and city."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nDrop down type."
          ]
        },
        {
          "heading": "Speaker 2",
          "key_points": [
            "# Speaker 2\n\nNo country and city."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThis one.",
            "So I can't hear."
          ]
        },
        {
          "heading": "Speaker 2",
          "key_points": [
            "# Speaker 2\n\nYeah, yeah.",
            "So we have a plus icon over there, right?"
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo you ask about if it's possible to manually create new city for this.",
            "--- Page 16 ---"
          ]
        },
        {
          "heading": "Speaker 2",
          "key_points": [
            "# Speaker 2\n\nOkay, Can I, can we hide that button?",
            "Disable that button if possible."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThis.",
            "Yes, sure you can.",
            "I just forgot to do this.",
            "Yes, let me show you.",
            "We can go to edit page."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd you should know that we are working with Freedom ui, but maybe you will also need to work with some classic \nUI old projects.",
            "So you need to get some basic understanding of how classic UI can be managed.",
            "And before \nproceed with classic UI customizations, we need to make some preparation that is necessary and very important for \nclassic ui.",
            "So in order to create new section in classic UI you need to prepare target package."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOh, I'm not sure because it looks like this is hard coded thing.",
            "So possibly you may find somewhere in CSS value for \nthis color, but it looks like this is an image designed somewhere in the app.",
            "So it was not supposed to be \ncustomizable, I think.",
            "Let me show you with CSS it's not possible.",
            "Probably it's because of this is an image."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nYou see the current source, so you may try to replace actual storage of this image and you may design your own and \nthat's how you will finally make corresponding change.",
            "Rakhi, is it clear?"
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo this is part for core which is not designed to Be changeable by configuration changes.",
            "But if you really want, you \ncan replace files on disk with another ones and that's how you can do this.",
            "Thank you Rakhi, Very interesting \nquestion and let's move on.",
            "So I just wanted to explain you that in case if your plan is to use classic UI \ncustomization, then you will have to take care about current package system setting."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd if you change cached setting, you will have to log out and log in order to read changed values properly for your \nuser session.",
            "In the current example, current package is not cached, so we may change it without logging out.",
            "Okay, \ngreat.",
            "So we can change save it then.",
            "One more tip that you need to know before starting Section Wizard."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nIf you recently made changes in your object and even published it still may keep some incorrect settings at \napplication server level cache.",
            "So we need to do this restart.",
            "In this case everything will work.",
            "Okay, good.",
            "Now we \ngo to settings."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd we have to be very careful with the code because code will not be able to change if we finish its input.",
            "And that's \nwhy we have to type it correctly from the first attempt.",
            "Realty Classic.",
            "So this is our code.",
            "Once we move our focus \nout from this control, you will see system will think for a bit and then we will not be able to change this code."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo I will only change something like a name column.",
            "I will provide some minor change copyable setting, no any other \nsettings.",
            "So I will just go back and try to save my section in case if it saves correctly, I'm happy and I can continue \ncustomizing of my section.",
            "But in case if it fails to save and it will be obvious that I need some more steps to \nprepare my system, then I will not lose time for setting up columns.",
            "So saving objects is the most critical step of this \nprocedure."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nNow we can edit it.",
            "And editing a section is much safer than creating it.",
            "So we can go to edit page.",
            "Now we can \ncustomize it.",
            "And I will quickly add similar columns as we had for Freedom ui."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nToday's Friday and probably tired a bit.",
            "So copyable value type based on existing lookup realty type or Classic UI \nDrop down list block behavior, no redundantly, no hiding titles.",
            "Everything is okay here.",
            "Save it.",
            "Great."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nBy the way, I will show you some trick which is supported in Classic UI but is not yet performed in Freedom ui.",
            "Comment here in their name is comment.",
            "But what is interesting here we can make a special option called multiline \ntext.",
            "You will see what will turn it into the column.",
            "So multiline text has a very interesting feature which is not \nimplemented in Freedom Live."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe have business rules here similar to Freedom UI and also we can program in JavaScript code if necessary.",
            "And \nlet's go back keep it simple and save the changes.",
            "So I want you to see how Classic UI section looks like.",
            "In Classic \nUI we have much more objects created for a section."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo we have much more objects for Classic UI section because such things as tags, folders and files are saved in a \nseparate dedicated objects.",
            "And we have more tables for this for the database.",
            "And in Freedom UI such tools are \nincorporated into commonly used objects for tags for files for folders and it makes it more efficient storage.",
            "Okay, so \nlet me show you how Classic UI section looks like.",
            "We will have this realty classic section but it probably will fail \nwhen we try to open so we have to reload because of Classic UI is much more sensitive to cache issues."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOkay, let's go to another page.",
            "Go to reality Classic page.",
            "Yes, we have some minor issues here, but in general it \nworks.",
            "Okay, Try to add new record.",
            "Here you can see how Classic UI edit page looks like."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\n--- Page 19 ---\n\nSo okay, let it be Paris Ren.",
            "The type is apartment.",
            "Offer type is not filled in so far.",
            "And here is what I wanted to show \nyou.",
            "This is voice input and speech recognition piece."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThis one it's empty so we can simply add sale and rental for our Classic UI and also we can bind all data to save it \ninto our dev Classic package.",
            "So this is important step because such data also should travel to our test and \nproduction.",
            "Now if we go to Reality Classic you can see that offer type can be selected and we can save it.",
            "Okay, \nlooks good.",
            "Some minor steps, minor preparations."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThis one will be about position of a module in Workplace.",
            "Let's check Reality Realty Classic.",
            "Great.",
            "Third one will be \nabout access rights.",
            "That's okay."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo it's also browser dependent and you should check and test it before you advertise this for your customers \nbecause it's a browser dependent feature and it looks like it depends on HTML5 elements or something like this.",
            "So \nsome browsers does not.",
            "Some browsers do not support this and that's why you see it's not in any browser.",
            "Okay, \nthank you, Rahi.",
            "And what about languages?"
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo finally we had an example of Classic UI section.",
            "We can set columns for our section list set fields to display in \nClassic UI we have different approach for setting up columns.",
            "So we can provide column settings type, maybe you \nneed price offer type.",
            "Okay.",
            "And finally we can have a menu comment."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo you should save for all users and such default profile will be saved as data item to our package.",
            "You can find it \nhere reload and that's how we can change and transport Classic UI columns setup to test and production.",
            "This one\n\n--- Page 20 ---\n\nis saved in sysprofile data at the same with details.",
            "Okay.",
            "Probably today's Friday and it's enough for today."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nBut we should do the same code here and here.",
            "We should do it very carefully.",
            "Save it.",
            "Now we will have better \nnames for our client module.",
            "Also it will be renamed on disk in our dev classic package."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThat's why we have to do it once again.",
            "Okay, Price type, offer type, maybe comment.",
            "Then we save it for all users \nproviding so called default profile.",
            "This is important.",
            "After we do this we can bind columns to our package creating \none more data item in our classic section data was bound successfully close it."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nIt doesn't represent any useful data for us.",
            "This one is correct data with new client module.",
            "So when you rename \nclient modules because of ugly names, take care about quest API column settings because you will probably have to \nreview them afterwards.",
            "Okay, so final quick brief look at our client modules in Classic ui.",
            "So in classic UI section \npage looks like this."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThat's why we have a lot of common functionality and no need to implement this functionality each time in each \nseparate section.",
            "So our functionality is now in parent one and all the buttons for classic UI section, like new actions, \nview buttons, grid folders, feature tag, everything is inherited.",
            "That's why we do not need to customize it and that's \nwhy this code is so small."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo if you need to change something you can do it carefully here or better to rely on Section wizard because it will do \nit better for you than you do manually.",
            "And in Classic UI Section wizard doesn't allow you to use all available \ncomponents, so you should be so in general Classic UI programming is harder because you can do some additional \ncomponents and display them, but Section wizard does not support it."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nI can show you a bit more examples, but I believe you will not focus on Classic UI so hard and this is just for brief \nreview for you.",
            "Okay, that's all for today.",
            "We just briefly mentioned Classic UI and we probably need to pay some \nattention on migration from Classic UI to Freedom UI because it will be very typical tasks for most of our customers \nwho started questiqi Solutions and unfortunately such migration is not automated yet."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAs a final step for today, it looks like I unnecessary caused it.",
            "I have to remember everything we did in File System of \ncourse then I will submit it to Version Control just to keep all the history.",
            "And any of you who wants to keep how our \nsession proceed, you can also watch our repository at GitHub.",
            "Thank you for your time."
          ]
        }
      ],
      "code_sections": [],
      "languages": [],
      "key_concepts": [
        "json",
        "entity",
        "module",
        "detail",
        "integration",
        "data",
        "page",
        "customization",
        "configuration",
        "client"
      ],
      "keywords": [
        "speaker",
        "page",
        "let",
        "package",
        "object",
        "classic",
        "data",
        "ui",
        "okay",
        "like"
      ],
      "topics": [
        "speaker"
      ]
    },
    "method": "hierarchical_structural"
  }
}