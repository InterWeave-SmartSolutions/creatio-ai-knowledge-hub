{
  "summary_id": "e4e8f38bae39",
  "content_id": "606ea808918e",
  "summary_type": "hierarchical",
  "summary_text": "Document: Speaker 1\n\nMain Sections:\n• Speaker 1\n  - # Speaker 1\n\nForeign number seven and today we will continue study of our server side of creation and we will continue to do our \ndevelopment.\n  - And let me show you where we finished at during our last yesterday's example.\n• Speaker 1\n  - # Speaker 1\n\nProcess Library on the top position here.\n  - This is a special section also available in Studio Workplace.\n• Speaker 1\n  - # Speaker 1\n\nAnd this tracing will help us to keep parameters values.\n  - We will be able to check how parameters are changed \nthrough process steps.\n• Speaker 1\n  - # Speaker 1\n\nOur process is active and it's also possible to deactivate it.\n  - So if you don't like some process, for example you have \nsome base product functionality that you really don't like, you want to stop it, you can deactivate any process you \nhave in your system.\n• Speaker 1\n  - # Speaker 1\n\nBut while you are developing it will be not ready for end users and you still want to save some intermediate progress.\n  - Once you start to develop version two, you still keep version one as actual.\n• Speaker 1\n  - # Speaker 1\n\nSo managing of processes versions is good if you develop directly on production, but if you have a separate \ndeveloper environment, if you have separate test environment and so on, it probably will additional difficulties for \nyou.\n  - And that's why I prefer not to enable this versioning or processes.\n• Speaker 1\n  - # Speaker 1\n\nYou should take care and save some items as exported metadata here, then recover it.\n  - So it's something that looks \nlike unnecessary difficulty.\n• Speaker 1\n  - # Speaker 1\n\nAnd compared to what functions and what features it shows us.\n  - So usually we sacrifice a bit of performance here \nand enable this trace in case.\n• Speaker 1\n  - # Speaker 1\n\nTrace data can be extremely helpful because it helps us to see our input parameter data which we had at the \nbeginning of the process.\n  - Then we have parameter values of selected item.\n• Speaker 1\n  - # Speaker 1\n\nSo let's display duration in milliseconds.\n  - This works good for system actions.\n• Speaker 1\n  - # Speaker 1\n\n--- Page 3 ---\n\nAnd also we can set duration in minutes just to see some processes which were executed.\n  - Quite slow.\n• Speaker 1\n  - # Speaker 1\n\nSo you can see what items are fast and what items are slow in this list.\n  - Even in case of such numbers will be not \nreally representative.\n• Speaker 1\n  - # Speaker 1\n\nNow you see second execution in even though it processed more records, but it was faster because of so called \nwarm up effect.\n  - First time when you start process system takes a lot of resources to deploy process engine service \nin memory to organize and allocate all necessary class instances.\n• Speaker 1\n  - # Speaker 1\n\nAnd you still see that formulas are quite fast and takes almost no time.\n  - So that's how you can analyze performance \nof your processes.\n• Speaker 1\n  - # Speaker 1\n\nYou will exactly and easily and clearly see what items take the most of system resources and you may think of how \nto improve it.\n  - Okay, so that's how you can in general check your process execution and analyze its speed.\n• Speaker 1\n  - # Speaker 1\n\nIt is generated by creatio and then used by compilation.\n  - So this class is saved on disk.\n• Speaker 1\n  - # Speaker 1\n\nHere, this is Microsoft Visual Studio.\n  - I installed it recently.\n• Speaker 1\n  - # Speaker 1\n\nAfter you install Microsoft Visual Studio Community Edition, you need to perform some settings into it.\n  - If you do not \nperform such settings, if you skip this step, you will not be able to debug.\n• Speaker 1\n  - # Speaker 1\n\nThis is important.\n  - Just my code was originally on.\n• Speaker 1\n  - # Speaker 1\n\nThis is about development tools external IDE basics.\n  - Scroll down till we find Visual Studio screenshots here and \ncopy links.\n• Speaker 1\n  - # Speaker 1\n\n--- Page 5 ---\n\nOf course we will not modify it, we only open it.\n  - Visual Studio will create automatically generated solution for this.\n• Speaker 1\n  - # Speaker 1\n\nSo this is the way how you can select the proper worker process.\n  - W3WP .\n• Speaker 1\n  - # Speaker 1\n\nSo let's go to restart application button.\n  - This button appears as a result of installation of maintenance tools from \nMarketplace.\n• Speaker 1\n  - # Speaker 1\n\nIf we will run corresponding business process.\n  - Okay, let's calculate average for apartments for sale.\n• Speaker 1\n  - # Speaker 1\n\nBecause you need access to file system, you need Visual Studio to attach to your worker process.\n  - So this type of \ndebugging can only be performed in local environment conditions.\n• Speaker 1\n  - # Speaker 1\n\n--- Page 6 ---\n\nNow you see SQL text changed.\n  - We can view it.\n• Speaker 1\n  - # Speaker 1\n\nThen we run the most important line in this code.\n  - This is for getting collection data.\n• Speaker 1\n  - # Speaker 1\n\nSo let me spend a minute on this C Sharp script task has options to inform process engine about is it successful \nexecution or not?\n  - In case if your script task finishes with return true, it means that process engine is ready to \nexecute next step immediately and no errors detected.\n• Speaker 1\n  - # Speaker 1\n\nBut also it will tell to the client side some exception text.\n  - And that's how you can provide some reason for stopping \nof your process.\n• Speaker 1\n  - # Speaker 1\n\nAnd as you can see, our read data executed more or less according to expectations.\n  - But our coded part took \nenormous time of six minutes because of our debugging session.\n• Speaker 1\n  - # Speaker 1\n\nSo you may ask about is it possible to debug no code items?\n  - Unfortunately no.\n• Speaker 1\n  - # Speaker 1\n\nOh yeah, it's already finished here.\n  - So just my fault.\n• Speaker 1\n  - # Speaker 1\n\nSo you can see that all of your execution or your processes is tracked and also you can handle and check process \nparameters.\n  - Unfortunately this trace data is not shown for any item.\n• Speaker 1\n  - # Speaker 1\n\nSo now we have process which only calculates data and saves its results into page into process parameters.\n  - We can \nuse some items to make a good looking display of such data and I plan to user actions for this.\n• Speaker 1\n  - # Speaker 1\n\nOkay.\n  - The most important is not to change the code in C sharp part.\n• Speaker 1\n  - # Speaker 1\n\nSo open edit page can only show you pages connected with existing objects and pre configured page can show you \nany random page designed in your system.\n  - So let's use this option reconfigure a page and carefully put it on the \ndiagram.\n• Speaker 1\n  - # Speaker 1\n\nI think one of the most recommended features for this task.\n  - Pre configured page will show some page for user at \nuser browser which page to open.\n• Speaker 1\n  - # Speaker 1\n\nOf course this is too big page for our purpose.\n  - But this is a simple example.\n• Speaker 1\n  - # Speaker 1\n\nAnd as this is an output value, I do not want user to modify this.\n  - So I'll make it read only.\n• Speaker 1\n  - # Speaker 1\n\nYou see very rich possibilities to build your page.\n  - In my case, SQL text will be also read only because this is only for \ndata output.\n• Speaker 1\n  - # Speaker 1\n\nSo I will use something like average price output page and we can also use the same title just to make it good \nlooking at our configuration section.\n  - So it will be named and coded properly.\n• Speaker 1\n  - # Speaker 1\n\n--- Page 9 ---\n\nThere are other options like someone's manager or a role some member from a role.\n  - In my case, user is like simple \nand easy because server side will detect exact user session based on the contact value we provide here.\n• Speaker 1\n  - # Speaker 1\n\nOkay, show page automatically means that once this item will be executed page appears immediately you can hide \nit.\n  - So do not show page automatically.\n• Speaker 1\n  - # Speaker 1\n\nIt's important to understand that when some page is shown for a user as a business process item, then this page \nwill wait for a time user decision.\n  - So page will decide when its work is done.\n• Speaker 1\n  - # Speaker 1\n\nAnd such options are important to specify how we plan to continue our execution.\n  - Okay, at the end this item has \nparameters page parameters.\n• Speaker 1\n  - # Speaker 1\n\nSo this is important for you to understand that data will go from process parameters to our page parameters.\n  - Now \nwe set SQL text parameter and then average price for the page.\n• Speaker 1\n  - # Speaker 1\n\nSo if you do not save, your progress is only in your browser and will not work until you save it.\n  - So it's obvious I think.\n• Speaker 1\n  - # Speaker 1\n\nSo you didn't finish this page, you went to another section, you started to work with different data.\n  - You almost forgot \nabout your process.\n• Speaker 1\n  - # Speaker 1\n\nIt took 1.4 minutes and now you see that most of the time system spent on showing page and waiting for user \nresponse.\n  - Such analyzing of duration may help you to understand how actually your process is used.\n• Speaker 1\n  - # Speaker 1\n\nHere we have calculated offer type and so we have type and offer type input data is here and as a result we have \naverage price and we have SQL text for debugging purpose.\n  - In case if you have any questions feel free to ask \nbecause we almost finished this step and now you see we made a process which is able to show us some data and \nalso I need to explain you some side effects and the side questions.\n• Speaker 1\n  - # Speaker 1\n\nUser can easily go back to the process by looking at notification panel business process tasks show corresponding \npage, save it and that's how the page will be fixed.\n  - I mean the process will be correctly finished.\n• Speaker 1\n  - # Speaker 1\n\nSo user can look at any time even if user accidentally closed the page at all.\n  - User can go anytime here and see what \nprocesses are waiting for the feedback.\n• Speaker 1\n  - # Speaker 1\n\nWe have send email item which will show you some email text before sending it and approval tool which can be \nhelpful in case if you need to automate some kind of approval logic.\n  - When one user creates something and needs \nconfirmation from another user or even set of users that everything is okay.\n• Speaker 1\n  - # Speaker 1\n\nBut our sessions are intended for developers.\n  - That's why we focus on coding.\n• Speaker 1\n  - # Speaker 1\n\nLet me show you three ways to handle object events.\n  - But before it makes sense to download everything to file \nsystem to commit it to version control.\n• Speaker 1\n  - # Speaker 1\n\nWe have three different ways to handle events at creation objects.\n  - Let me show you free handle handling object \nevents.\n• Speaker 1\n  - # Speaker 1\n\nSo we insert a new reality record into our data model.\n  - And if we do the such insert, we want to create several realty \nvisits automatically.\n• Speaker 1\n  - # Speaker 1\n\nSo go to settings and you see target package is dev classic.\n  - So you should change it for usr realty.\n• Speaker 1\n  - # Speaker 1\n\nSo it looks like here we have something artificially created, possibly used for future customizations of some apps, \nbut we don't have it now.\n  - Okay, so we will select only one package here and our code will be USR2 Add Reality Visits \nprocess.\n• Speaker 1\n  - # Speaker 1\n\nTechnically you can use custom programmed signal, but object signal is the most commonly used and we have to \nspecify object which we want to listen for our event handling.\n  - Of course, this is our reality hidden UI object, this one.\n• Speaker 1\n  - # Speaker 1\n\nBut for added and modified it's definitely after add and after modification because when we do selection from the \ndatabase, it shows that data was already added or modified.\n  - So in my case I plan to handle insert event.\n• Speaker 1\n  - # Speaker 1\n\nIf you run your process with no background option, it means that from user point of view, insert or update will take \nsome time plus time for running of your process because it will Be started at the same scope at the same thread.\n  - So \nwithout background perceived speed of your solution will be not so perfect.\n• Speaker 1\n  - # Speaker 1\n\n--- Page 13 ---\n\nWe can name this signal realty added which means that once the signal is triggered, it means that some new record \nwas added.\n  - Okay, so we can start the process with the help of signal.\n• Speaker 1\n  - # Speaker 1\n\nTo insert a visit we need parent realty and some additional columns.\n  - So let me use add data item which object to \nadd data of course to the visit.\n• Speaker 1\n  - # Speaker 1\n\nOkay, and visit date and time can be something like current date and time and then we can go to formula.\n  - So for \nexample, we can add some days, add days and let it be just one day forward.\n• Speaker 1\n  - # Speaker 1\n\nLet me show you go to realty section, try to copy data, save it, look at it.\n  - Now you see new visit was automatically \nadded.\n• Speaker 1\n  - # Speaker 1\n\nMonica and possibly Paddy, are you following me today?\n  - Should I make poses for you?\n• Speaker 1\n  - # Speaker 1\n\n--- Page 14 ---\n\nThis condition will include double click on n parameter then comparison greater than zero.\n  - So if this boolean \nexpression is true, then my conditional flow will work and will be used here otherwise.\n• Speaker 1\n  - # Speaker 1\n\nSo while n is greater than zero, we go back, we do one more insert and then we go back to this formula and \ndecrease N Again here we have N equals to zero.\n  - This is just a title, but it will show us that it's the end.\n• Speaker 1\n  - # Speaker 1\n\nOnce I save it, this process is already actual.\n  - So I do not need to start it with a special button.\n• Speaker 1\n  - # Speaker 1\n\nSo execution diagram sometimes may help you to understand how exactly your process started, how it worked.\n  - And \nthis can be helpful if you go to process work details.\n• Speaker 1\n  - # Speaker 1\n\nWhen I say about low speed, you see point two second.\n  - It means 200 millisecond for execution.\n• Speaker 1\n  - # Speaker 1\n\nAnd once you start to use it, for example before insert you see system generated some code, we can copy it.\n  - Then \nwe can look at open process button.\n• Speaker 1\n  - # Speaker 1\n\nSo with your current entity with its data row, you can use entity methods for it.\n  - But there is a very strong \ndisadvantage of using this approach in general, and this disadvantage is quite serious.\n• Speaker 1\n  - # Speaker 1\n\nCrtui let's check or maybe base something.\n  - CRT core base package.\n• Speaker 1\n  - # Speaker 1\n\nSorry, quite obvious.\n  - So methods include Decoration of the class fully and including methods that you need here.\n• Speaker 1\n  - # Speaker 1\n\nThe answer is third answer is Object events layer the most, let's say the most modern and like the most \nrecommended way to handle object events.\n  - It also still needs coding.\n• Speaker 1\n  - # Speaker 1\n\nAnd also we have very interesting and unusual event called saving before and after save.\n  - But what is save?\n• Speaker 1\n  - # Speaker 1\n\nThank you.\n  - So here we have a set of events for creating record, set of events for updating and obviously for delete.\n• Speaker 1\n  - # Speaker 1\n\nSo we can listen any existing system object, no matter how far it is developed inside of our package hierarchy.\n  - This \napproach does not care about package dependencies at all.\n• Speaker 1\n  - # Speaker 1\n\nAnd it's important to mention that this kind of event handling will be performed as well at server side.\n  - So no matter \nhow technically this insert will happen.\n• Speaker 1\n  - # Speaker 1\n\nSo okay, it's not correct too much.\n  - Yeah, you see we have some limitation here.\n• Speaker 1\n  - # Speaker 1\n\nSo let's do this, select our package add source code.\n  - This is a special type of item which is designed to provide a \npure source of a C Sharp which we can develop inside of creature.\n• Speaker 1\n  - # Speaker 1\n\n--- Page 17 ---\n\nOr we can make a hack now trying to edit data in our list utilizing our editable list features.\n  - And when you see that if \nwe have no any event handling and we did not care about the handle, by the way, we don't have any no code options \nso far to make a custom handling of list edit events.\n• Speaker 1\n  - # Speaker 1\n\nThis is only for page and it's limited on the page.\n  - So if data comes some other way not from your page.\n• Speaker 1\n  - # Speaker 1\n\nI'm too lazy to compose a different title, so I will make the same title because it's technical thing.\n  - No one will be \nselecting it from any list.\n• Speaker 1\n  - # Speaker 1\n\nWe will finish probably in 10 minutes, so it's not so hard.\n  - Thank you for your time.\n• Speaker 1\n  - # Speaker 1\n\nThat's why having a friendly name is important because it will be good looking at our disk and also at our version \ncontrol.\n  - So here we see some bit of metadata.\n• Speaker 1\n  - # Speaker 1\n\nSo inside of a package folder we have files and we have csproj file.\n  - This project file was generated by creatio.\n• Speaker 1\n  - # Speaker 1\n\nAnd then I have to open this C Sharp project file CSProj open it.\n  - Studio will think for a couple of seconds, but it will be \nstill very quick.\n• Speaker 1\n  - # Speaker 1\n\nSo if we can find this C sharp file C sharp code of course, I already created an example, it will not take too much \ntime.\n  - Entity event listener so my code is ready.\n• Speaker 1\n  - # Speaker 1\n\nSo this is quite powerful editor with intellisense and Autocomplete we have to perform a class with couple of usings \nand inside of some namespace.\n  - There is a tradition to keep your configuration code into terrasoft configuration \nnamespace.\n• Speaker 1\n  - # Speaker 1\n\nSo this line number seven is very important because it shows what object we plan to listen.\n  - Very important.\n• Speaker 1\n  - # Speaker 1\n\nAccording to our documentation we have some arguments here and for before events we have reference to our data \nrecord which is an instance of an entity class and also we have some before arguments.\n  - Such arguments are quite \ninteresting and important.\n• Speaker 1\n  - # Speaker 1\n\nSo for example, if user tries to add new data and provides too big price then system says okay, no error messages.\n  - But when user will start to check it will turn out that corresponding record was not inserted or updated.\n• Speaker 1\n  - # Speaker 1\n\nWe already saved our code, open it from embedded editor and we can create localizable strings and our code is \nvalues too big.\n  - We use this localizable code and our localizable text message is here.\n• Speaker 1\n  - # Speaker 1\n\nAnd user will see that operation was not done and there is a reason why it failed.\n  - So we will see this error message.\n• Speaker 1\n  - # Speaker 1\n\nWe can compile our package the first time we have to manually to do this our package and compile action \ncompilation takes some time and first time probably it will take maybe 30 or 40 seconds.\n  - Next time for the same \npackage it may take just 10 or 20 seconds.\n• Speaker 1\n  - # Speaker 1\n\nSo we have definitely greater than 1 billion.\n  - So our logic, our comparison condition here checks.\n• Speaker 1\n  - # Speaker 1\n\n--- Page 20 ---\n\nSo it will show me some error message now because can also enable browser developer console control shift I in \norder to make so and go to network tab in order to see all text or requests that will happen here.\n  - So this value is \ndefinitely greater than 1 billion.\n• Speaker 1\n  - # Speaker 1\n\nEverything is quite obvious that something is wrong.\n  - So we can fix our data.\n• Speaker 1\n  - # Speaker 1\n\nSo you see we cancel such attempt only if we will edit it in a value that is below our limit.\n  - Then we can save it and \nupdate will work normally.\n• Speaker 1\n  - # Speaker 1\n\nSave everything to file system because we had changes at our localizable strings business processes.\n  - So save \neverything and then committed to version control.\n\nKey Concepts: module, entity, schema, detail, integration",
  "key_points": [
    "module",
    "entity",
    "schema",
    "detail",
    "integration",
    "data",
    "page",
    "customization",
    "configuration",
    "client"
  ],
  "keywords": [
    "process",
    "speaker",
    "page",
    "data",
    "let",
    "okay",
    "code",
    "use",
    "user",
    "make"
  ],
  "topics": [
    "speaker"
  ],
  "summary_length": 3858,
  "original_length": 14870,
  "compression_ratio": 0.259448554135844,
  "confidence_score": 0.9,
  "created_timestamp": "2025-07-23T16:52:20.569043",
  "metadata": {
    "structure": {
      "title": "Speaker 1",
      "sections": [
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nForeign number seven and today we will continue study of our server side of creation and we will continue to do our \ndevelopment.",
            "And let me show you where we finished at during our last yesterday's example.",
            "So we worked with our \nFreedom UI package.",
            "We made business process to make some calculations and we tried to.",
            "So we used a \ncombination of no code items and coded stuff."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nProcess Library on the top position here.",
            "This is a special section also available in Studio Workplace.",
            "Process \nLibrary we have a lot of existing designed processes for base product and also we can create our own processes.",
            "Process library has some advantages in comparison with just opening diagram from configuration section."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd this tracing will help us to keep parameters values.",
            "We will be able to check how parameters are changed \nthrough process steps.",
            "And in general this is really helpful in case if you investigate why your process is not working \nas expected."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOur process is active and it's also possible to deactivate it.",
            "So if you don't like some process, for example you have \nsome base product functionality that you really don't like, you want to stop it, you can deactivate any process you \nhave in your system.",
            "This process will not be able to start regardless of the way how you expect it to start with a \nstart signal or with the Start simple event."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nBut while you are developing it will be not ready for end users and you still want to save some intermediate progress.",
            "Once you start to develop version two, you still keep version one as actual.",
            "Version two, for example will be under \nconstruction.",
            "And once you realize that version two is okay, it's ready.",
            "Then when you save a process you can make, \nyou can run an action set."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo managing of processes versions is good if you develop directly on production, but if you have a separate \ndeveloper environment, if you have separate test environment and so on, it probably will additional difficulties for \nyou.",
            "And that's why I prefer not to enable this versioning or processes.",
            "And each time when system asks me to save \na new version for process, I usually reject and overwrite existing version."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nYou should take care and save some items as exported metadata here, then recover it.",
            "So it's something that looks \nlike unnecessary difficulty.",
            "And it's better to avoid if you have a standard transition of your solution from developer to \ntest and to production.",
            "So I recommend you to keep your version only one single version.",
            "It will be easier for you to \nhave to control all your situations with your business processes, but it's up to you."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd compared to what functions and what features it shows us.",
            "So usually we sacrifice a bit of performance here \nand enable this trace in case.",
            "So it really happens.",
            "Helps in case if we need to debug our process and to see how \neach step was executed.",
            "And to see process parameter values at each step."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nTrace data can be extremely helpful because it helps us to see our input parameter data which we had at the \nbeginning of the process.",
            "Then we have parameter values of selected item.",
            "And finally, when we will move on.",
            "Unfortunately, not all of the items keep such trace and allow us to see it a bit later.",
            "I will show you how to see final \ntrace data."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo let's display duration in milliseconds.",
            "This works good for system actions.",
            "And milliseconds are perfect for this.",
            "And also we can display the same duration, but in minutes.",
            "It will be useful in case of debugging, in case of some \nuser actions used and some display messages shown."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\n--- Page 3 ---\n\nAnd also we can set duration in minutes just to see some processes which were executed.",
            "Quite slow.",
            "So.",
            "So now \nyou can see that we have total 130 and we have some items and you should be ready that it will never match."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo you can see what items are fast and what items are slow in this list.",
            "Even in case of such numbers will be not \nreally representative.",
            "And our total process execution is a bit more than 130 milliseconds.",
            "So it looks like 100 \nmilliseconds were spent on process start and finish.",
            "But this is in general which will give you general understanding \nif the process is fast or not."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nNow you see second execution in even though it processed more records, but it was faster because of so called \nwarm up effect.",
            "First time when you start process system takes a lot of resources to deploy process engine service \nin memory to organize and allocate all necessary class instances.",
            "So prepare everything to work with processes \nnext time when you start a process system uses a lot of allocated classes and a lot of allocated objects in memory.",
            "So it takes much less time."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd you still see that formulas are quite fast and takes almost no time.",
            "So that's how you can analyze performance \nof your processes.",
            "And you may think that it looks like everything is very good.",
            "So like 10 milliseconds, 15 \nmilliseconds, even overall hundreds of milliseconds is very good time.",
            "Yes, I agree for this."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nYou will exactly and easily and clearly see what items take the most of system resources and you may think of how \nto improve it.",
            "Okay, so that's how you can in general check your process execution and analyze its speed.",
            "But now \nwe will come back to our code.",
            "So we are interested in real debugging of this code.",
            "So we need to see how the C \nSharp code is executed line by line and happily so we will be able to do this."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nIt is generated by creatio and then used by compilation.",
            "So this class is saved on disk.",
            "You probably think of oh, we \nhave C file.",
            "Possibly we can edit it.",
            "Unfortunately not here."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nHere, this is Microsoft Visual Studio.",
            "I installed it recently.",
            "It's a community edition and 2022.",
            "So this is community \n2022 version.",
            "You can install it almost for free from Microsoft website and download."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAfter you install Microsoft Visual Studio Community Edition, you need to perform some settings into it.",
            "If you do not \nperform such settings, if you skip this step, you will not be able to debug.",
            "Your breakpoints will not work.",
            "Let me \nshow you Tools options here.",
            "Visual Studio usually hangs for some time."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThis is important.",
            "Just my code was originally on.",
            "It's recommended to keep it on.",
            "But unfortunately Edit and \nContinue is not supported.",
            "So we can shut it off and so we can turn it off."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThis is about development tools external IDE basics.",
            "Scroll down till we find Visual Studio screenshots here and \ncopy links.",
            "So now you see Suppress Git Optimization module Wallet must be on the most critical setting that you \nmust do if you want to debug with Visual Studio.",
            "Okay, the corresponding link is in your chat.",
            "Okay, looks like we did \neverything that we need."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\n--- Page 5 ---\n\nOf course we will not modify it, we only open it.",
            "Visual Studio will create automatically generated solution for this.",
            "It's okay, we can go to its inner code and put breakpoint in order to stop execution of our code at this point, at this \npart, when we will finally run to this line.",
            "But now it's very tricky ways because as you can see, we only made it \nbreakpoint.",
            "But we need to attach to our worker process."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo this is the way how you can select the proper worker process.",
            "W3WP .",
            "This is your worker process from IIS and of \ncourse we have to select it.",
            "And if you don't see it, you may try to show processes from all users.",
            "Here you will see \nmuch more processes."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo let's go to restart application button.",
            "This button appears as a result of installation of maintenance tools from \nMarketplace.",
            "Okay, we'll be restarting.",
            "Great, let's continue.",
            "It takes just 10 seconds to restart."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nIf we will run corresponding business process.",
            "Okay, let's calculate average for apartments for sale.",
            "We have two \ndifferent departments here.",
            "Calculate price and what.",
            "Let me check process log."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nBecause you need access to file system, you need Visual Studio to attach to your worker process.",
            "So this type of \ndebugging can only be performed in local environment conditions.",
            "Unfortunately when you work in cloud conditions, \nyou will not be able to do this kind of debugging.",
            "Okay, so let's start.",
            "We can run lines one after another with the \ncommand F10 step over."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\n--- Page 6 ---\n\nNow you see SQL text changed.",
            "We can view it.",
            "Here is our actual SQL text which will be running in the database.",
            "So \nthis is important possibility for you.",
            "If you make some more complicated scripts, more complex filters, maybe some \nparameters that you don't know how to work with."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThen we run the most important line in this code.",
            "This is for getting collection data.",
            "You can see that we have \ncollection number, collection records number two.",
            "We have two records there.",
            "So let's go to start our counters run \ncycle for our data records so we have only two apartments for sale."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo let me spend a minute on this C Sharp script task has options to inform process engine about is it successful \nexecution or not?",
            "In case if your script task finishes with return true, it means that process engine is ready to \nexecute next step immediately and no errors detected.",
            "If you return false, it means you tell to the process engine \nthat your execution experience serious errors.",
            "So you have to stop process execution fully and process will be \nstopped with the error state."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nBut also it will tell to the client side some exception text.",
            "And that's how you can provide some reason for stopping \nof your process.",
            "So you can throw exceptions with some error message text and user who started process step will \nsee this error message.",
            "In our case everything is okay.",
            "Process executed normally."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd as you can see, our read data executed more or less according to expectations.",
            "But our coded part took \nenormous time of six minutes because of our debugging session.",
            "So you can check what steps take too much and \nyou can think of how to improve it.",
            "In my case, you see, debugging definitely made it longer.",
            "But it's just our, let's say \ndesign and development attempts in real life it will be not so slow."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo you may ask about is it possible to debug no code items?",
            "Unfortunately no.",
            "And they will just execute it without \nany stops.",
            "But.",
            "But if you want to intentionally stop your process at some step in order to investigate status \nparameters, variables and so on, you can additional temporary items into your process that will display some data\n\n--- Page 7 ---\n\nusing any kind of show message, any kind of messaging like pre configured page or automatic auto generated page."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOh yeah, it's already finished here.",
            "So just my fault.",
            "Okay, running in, running it again now you see all the decision, all \nexecution goes.",
            "We can see this SQL text conditions parameters are saved separately.",
            "Selecting data again we have \ntwo records but different records."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo you can see that all of your execution or your processes is tracked and also you can handle and check process \nparameters.",
            "Unfortunately this trace data is not shown for any item.",
            "Personally I have a question why?",
            "But possibly \nit's somehow connected with the type of executed item.",
            "And we still have good enough options to look at parameter \ndata and to check it out during debugging."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo now we have process which only calculates data and saves its results into page into process parameters.",
            "We can \nuse some items to make a good looking display of such data and I plan to user actions for this.",
            "Meanwhile, we \nalready do not need to debug.",
            "So it's better to avoid unnecessary system resources spending.",
            "As you can see, 1.3 \ngigabyte of memory was allocated and for my app and visual studio can track it."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOkay.",
            "The most important is not to change the code in C sharp part.",
            "In this case, system will allow us to save our \nprocess without any questions and without asking to recompile only if you change code here.",
            "System will detect this \nand ask you to perform compilation again."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo open edit page can only show you pages connected with existing objects and pre configured page can show you \nany random page designed in your system.",
            "So let's use this option reconfigure a page and carefully put it on the \ndiagram.",
            "Pre configured page is designed to show some pages for user according to process execution.",
            "Obviously \nthis page will appear at user side.",
            "But you need to remember that in general business process is a server side \nfunctionality."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nI think one of the most recommended features for this task.",
            "Pre configured page will show some page for user at \nuser browser which page to open.",
            "We don't have any suitable.",
            "We have a lot of out of the box pages, but they are not \nsuitable for our task.",
            "And we want to display average price decimal value."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOf course this is too big page for our purpose.",
            "But this is a simple example.",
            "In real life you may need a process \nwhich will ask user about some parameters, about some arguments.",
            "And in general business scenario it may \nhappen that you will have quite a big list of some data for input.",
            "So in general you can create pages with unlimited \ncomplexity."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd as this is an output value, I do not want user to modify this.",
            "So I'll make it read only.",
            "It's quite obvious.",
            "You see \nit's no code settings, so very easy to do.",
            "Next parameter that I want to use will be a text."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nYou see very rich possibilities to build your page.",
            "In my case, SQL text will be also read only because this is only for \ndata output.",
            "So my SQL text is for data output.",
            "That's.",
            "That's it."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo I will use something like average price output page and we can also use the same title just to make it good \nlooking at our configuration section.",
            "So it will be named and coded properly.",
            "Save it again.",
            "So now you see our page \nis ready well named, we can save it again, saved correctly, close it and then we can use this page.",
            "As you can see it \nstill shows us a bit old code, but we can probably select this one."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\n--- Page 9 ---\n\nThere are other options like someone's manager or a role some member from a role.",
            "In my case, user is like simple \nand easy because server side will detect exact user session based on the contact value we provide here.",
            "So here we \nhave to provide a contact of a user who we plan to show this page for.",
            "And current user contact is very like frequent \ntypical value here."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOkay, show page automatically means that once this item will be executed page appears immediately you can hide \nit.",
            "So do not show page automatically.",
            "In this case, this item will be still pending, so it will still wait for user to start to \nshow it.",
            "And user will see this item in this notification panel in business tasks list.",
            "So user will be able to find the \npending item."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nIt's important to understand that when some page is shown for a user as a business process item, then this page \nwill wait for a time user decision.",
            "So page will decide when its work is done.",
            "And in our case we can do it by buttons.",
            "If we do not press any button and we Just switch focus to another section and go on to work with another data."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd such options are important to specify how we plan to continue our execution.",
            "Okay, at the end this item has \nparameters page parameters.",
            "We need to load here data from our process.",
            "We will use parameters mapping here \nand it's very easy.",
            "We will just click on this lightning button, select process parameter, select corresponding \nparameter and click select."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo this is important for you to understand that data will go from process parameters to our page parameters.",
            "Now \nwe set SQL text parameter and then average price for the page.",
            "We'll take its value from corresponding average price \nof a process.",
            "So in process parameters we have this select and this is called parameters mapping.",
            "And when this \nprocess item start, according to this mapping, SQL text will load data from SQL text parameter and average price \nUSD will load data from corresponding average price process parameter."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo if you do not save, your progress is only in your browser and will not work until you save it.",
            "So it's obvious I think.",
            "--- Page 10 ---\n\nOkay, so now we made this item to display some results.",
            "If you work in classic UI usually so it's mandatory to reload \nthe page in Freedom UI sometimes it's not mandatory, but I just want to make sure that everything works well.",
            "That's \nwhy I just reload the page for sure."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo you didn't finish this page, you went to another section, you started to work with different data.",
            "You almost forgot \nabout your process.",
            "But if you go here into notification panel and find business process tasks list here you will see \npending items.",
            "You will see items that are waiting for your response and they will be hanging here until you finally \nfinish them.",
            "So that's how system reminds you about items that current users should do."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nIt took 1.4 minutes and now you see that most of the time system spent on showing page and waiting for user \nresponse.",
            "Such analyzing of duration may help you to understand how actually your process is used.",
            "Where there \nare some tricky steps which make users to work longer to spend more time.",
            "So it will be helpful for you to \nunderstand your business and your level of automation and you will finally see what can be improved here."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nHere we have calculated offer type and so we have type and offer type input data is here and as a result we have \naverage price and we have SQL text for debugging purpose.",
            "In case if you have any questions feel free to ask \nbecause we almost finished this step and now you see we made a process which is able to show us some data and \nalso I need to explain you some side effects and the side questions.",
            "So for example user started our process but \nthen okay, process can be quite long and the user had previous steps there."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nUser can easily go back to the process by looking at notification panel business process tasks show corresponding \npage, save it and that's how the page will be fixed.",
            "I mean the process will be correctly finished.",
            "And you see now \nuser has no items to execute.",
            "It's possible to include many different users into one business process."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo user can look at any time even if user accidentally closed the page at all.",
            "User can go anytime here and see what \nprocesses are waiting for the feedback.",
            "So this is quite efficient way of making your process interactive, making your \nprocess able to input some complex data to display some intermediate or finishing results of calculation."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe have send email item which will show you some email text before sending it and approval tool which can be \nhelpful in case if you need to automate some kind of approval logic.",
            "When one user creates something and needs \nconfirmation from another user or even set of users that everything is okay.",
            "And usually it's used for something \nwhich makes commercial importance like contracts, invoices or some other types of documents where some other \npeople must confirm that everything is okay in some documents or data."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nBut our sessions are intended for developers.",
            "That's why we focus on coding.",
            "That's why we see how we can get \nparameter values, how we can save them and how finally we can merge this coded development approach with no \ncode stuff which can be designed with no programming.",
            "In case if you have any questions feel free to ask."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nLet me show you three ways to handle object events.",
            "But before it makes sense to download everything to file \nsystem to commit it to version control.",
            "Because it's our next step that we successfully did.",
            "We will save everything \non disk in case if you have any questions, feel free to ask.",
            "So we save all of the changes we recently did at file \nsystem."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe have three different ways to handle events at creation objects.",
            "Let me show you free handle handling object \nevents.",
            "First one is very easy.",
            "This is no code solution.",
            "And using business process start signals, I will quickly made \nan example."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo we insert a new reality record into our data model.",
            "And if we do the such insert, we want to create several realty \nvisits automatically.",
            "Let's imagine we want to do this task.",
            "So once insert happens, we want system to automatically \ncreate some visits for us.",
            "This is possible to do and even with the easiest way of doing this, with the help of start \nsignal, we can do this easily and make it using business process."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo go to settings and you see target package is dev classic.",
            "So you should change it for usr realty.",
            "Yes, modify.",
            "Also \nthere is some side effect which I can't easily understand and explain here.",
            "Now you see some strange packages."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo it looks like here we have something artificially created, possibly used for future customizations of some apps, \nbut we don't have it now.",
            "Okay, so we will select only one package here and our code will be USR2 Add Reality Visits \nprocess.",
            "So now you see Auto add realty visits process and you see we have code and title.",
            "Great.",
            "So the main idea \nof handling object events the help of start signal."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nTechnically you can use custom programmed signal, but object signal is the most commonly used and we have to \nspecify object which we want to listen for our event handling.",
            "Of course, this is our reality hidden UI object, this one.",
            "And we have only three supported events so far."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nBut for added and modified it's definitely after add and after modification because when we do selection from the \ndatabase, it shows that data was already added or modified.",
            "So in my case I plan to handle insert event.",
            "So record \nedit and in."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nIf you run your process with no background option, it means that from user point of view, insert or update will take \nsome time plus time for running of your process because it will Be started at the same scope at the same thread.",
            "So \nwithout background perceived speed of your solution will be not so perfect."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\n--- Page 13 ---\n\nWe can name this signal realty added which means that once the signal is triggered, it means that some new record \nwas added.",
            "Okay, so we can start the process with the help of signal.",
            "But what we have at the moment of start, \nunfortunately we don't have so much.",
            "We can switch to advanced module advanced settings and we only have one \nsingle parameter unique identifier of record which triggered our signal.",
            "So this record triggered this signal."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nTo insert a visit we need parent realty and some additional columns.",
            "So let me use add data item which object to \nadd data of course to the visit.",
            "Be able to visit one record.",
            "Okay, and we can specify columns of added visits.",
            "Of \ncourse it will be parent realty."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOkay, and visit date and time can be something like current date and time and then we can go to formula.",
            "So for \nexample, we can add some days, add days and let it be just one day forward.",
            "So one day into future from current \nmoment.",
            "This is just a simple example.",
            "We can name it add visit."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nLet me show you go to realty section, try to copy data, save it, look at it.",
            "Now you see new visit was automatically \nadded.",
            "Automatically added and visit date and time is somewhere in future.",
            "So you see that it works.",
            "We can make \nmany visits as one operation."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nMonica and possibly Paddy, are you following me today?",
            "Should I make poses for you?",
            "Please confirm if everything \nis okay with speed of our solution.",
            "Thank you Monica.",
            "Okay Adrian."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\n--- Page 14 ---\n\nThis condition will include double click on n parameter then comparison greater than zero.",
            "So if this boolean \nexpression is true, then my conditional flow will work and will be used here otherwise.",
            "So this is another sequence \nflow.",
            "I will turn it into default flow."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo while n is greater than zero, we go back, we do one more insert and then we go back to this formula and \ndecrease N Again here we have N equals to zero.",
            "This is just a title, but it will show us that it's the end.",
            "Here it will be \nlike finish item.",
            "Okay?",
            "And as you can see, it's very easy process."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOnce I save it, this process is already actual.",
            "So I do not need to start it with a special button.",
            "Then I will go and \ncheck it again.",
            "For example, we have an apartment in Florida.",
            "We have no details, okay."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo execution diagram sometimes may help you to understand how exactly your process started, how it worked.",
            "And \nthis can be helpful if you go to process work details.",
            "You see we add visits, add parameter and again if we enable \ntrace, then we will see all the values of the parameters at each step of our process.",
            "You can also see duration in \nmilliseconds.",
            "And you can analyze and understand what is the slowest part of your process, what is the fastest part, \nwhere you spend the most of resources."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWhen I say about low speed, you see point two second.",
            "It means 200 millisecond for execution.",
            "It's probably not so \nmuch, but if you work with multiple records.",
            "If your task is to process data with as fast as possible way.",
            "So having \nsuch time spent on it probably will be not the perfect, not the best idea."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd once you start to use it, for example before insert you see system generated some code, we can copy it.",
            "Then \nwe can look at open process button.",
            "So it's important to mention that any creatio object has its own unique \nindividual embedded process.",
            "This embedded process is designed only for one process purpose only to handle\n\n--- Page 15 ---\n\nobject events."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo with your current entity with its data row, you can use entity methods for it.",
            "But there is a very strong \ndisadvantage of using this approach in general, and this disadvantage is quite serious.",
            "This type of event handling \ndoes not work in packages compiled as separate assembly, simply speaking for all.",
            "So for any modern package \nwhere this option is turned on in order to make fast compilation, your event handling with embedded process will not \nwork.",
            "And it only works in old styled packages where you have no compiling into separate assembly."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nCrtui let's check or maybe base something.",
            "CRT core base package.",
            "Yes, CRT core base this one Contact object if \nwe open it, as you remember Creature has open source for base product configuration.",
            "We can see events."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSorry, quite obvious.",
            "So methods include Decoration of the class fully and including methods that you need here.",
            "And the using can be also typed manually if you want.",
            "But this stuff works only in this package because we have \nCRT core base package which is not compiled a separate assembly."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThe answer is third answer is Object events layer the most, let's say the most modern and like the most \nrecommended way to handle object events.",
            "It also still needs coding.",
            "So it means we will have a compiled code and \nit has a bit less events.",
            "Only eight supported events, but it is the most flexible and I will explain why.",
            "So now you will \nsee this example."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd also we have very interesting and unusual event called saving before and after save.",
            "But what is save?",
            "It's \ninteresting that save was used in order to make the same handler if you want to organize the same logic for adding \ndata and for updating data record.",
            "So saving is triggered in case of insert and in case of update.",
            "And here we can \nsee the exact order of execution."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThank you.",
            "So here we have a set of events for creating record, set of events for updating and obviously for delete.",
            "Thank you, thank you.",
            "So eight supported events and I told you that it's very flexible."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo we can listen any existing system object, no matter how far it is developed inside of our package hierarchy.",
            "This \napproach does not care about package dependencies at all.",
            "The only condition for it to work is presence of \ncorresponding object at our environment."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd it's important to mention that this kind of event handling will be performed as well at server side.",
            "So no matter \nhow technically this insert will happen.",
            "Like we add data from user interface page or we add data with the help of \nbusiness process, or we add data with the help of API calls, processing it at server side will trigger this event \nhandling.",
            "So this event handling is inevitable for server side and there is no way how you can suppress such event \nprocessing."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo okay, it's not correct too much.",
            "Yeah, you see we have some limitation here.",
            "Okay, what about this?",
            "Okay, looks \ngood.",
            "So here you see our commission, our huge price with 9000 of three dawns."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo let's do this, select our package add source code.",
            "This is a special type of item which is designed to provide a \npure source of a C Sharp which we can develop inside of creature.",
            "Or we can create it separately using powerful \nexternal editors.",
            "But creating of C source should be done from this editor.",
            "Adrian is asking when do we use the \nserver side validation instead of client side?"
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\n--- Page 17 ---\n\nOr we can make a hack now trying to edit data in our list utilizing our editable list features.",
            "And when you see that if \nwe have no any event handling and we did not care about the handle, by the way, we don't have any no code options \nso far to make a custom handling of list edit events.",
            "So now you see we easily bypassed this.",
            "So I just wanted to say \nthat client side validation is good, but it's not perfect."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThis is only for page and it's limited on the page.",
            "So if data comes some other way not from your page.",
            "So your \nvalidation will not work if you do it in client side.",
            "Server side is much more reliable.",
            "It will work anytime when entity \ndata model is used."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nI'm too lazy to compose a different title, so I will make the same title because it's technical thing.",
            "No one will be \nselecting it from any list.",
            "So let it be my package no description because I'm lazy again.",
            "And we have this example \nnow you see all we have here is list.",
            "So just small set of properties and no localizable string and here we will have C \nSharp code here."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe will finish probably in 10 minutes, so it's not so hard.",
            "Thank you for your time.",
            "You will watch videos.",
            "So I will \nshow you how to integrate it with Visual Studio because it's much more efficient than typing your code manually \nhere.",
            "So we can save our new created source code schema source code item into our package."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThat's why having a friendly name is important because it will be good looking at our disk and also at our version \ncontrol.",
            "So here we see some bit of metadata.",
            "We do not care about it too much, but a real T events CS file.",
            "It's a \npure C Sharp code that we can develop into and we can develop with Visual Studio.",
            "So let me show you how to use \nVisual Studio for this."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo inside of a package folder we have files and we have csproj file.",
            "This project file was generated by creatio.",
            "It has \nseveral sections of libraries with references which makes it possible to add the custom libraries if you want to \ninclude them into this project.",
            "But the most important is that this csproj file is used to get your compiled library of\n\n--- Page 18 ---\n\nyour package.",
            "So what you need to know that all necessary for your Visual Studio to run and to work with your code \nis already created by creation by its own."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd then I have to open this C Sharp project file CSProj open it.",
            "Studio will think for a couple of seconds, but it will be \nstill very quick.",
            "And if you want to do the same with a package which is not compiled as separate assembly, you \nhave to look at special part in terms of configuration.",
            "SLN solution."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo if we can find this C sharp file C sharp code of course, I already created an example, it will not take too much \ntime.",
            "Entity event listener so my code is ready.",
            "I only have to copy it for you into chat.",
            "You'll be able to download chat \nmessages along with video files."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo this is quite powerful editor with intellisense and Autocomplete we have to perform a class with couple of usings \nand inside of some namespace.",
            "There is a tradition to keep your configuration code into terrasoft configuration \nnamespace.",
            "But in general you can decide yourself and you can create and support your own namespaces if you \nwant.",
            "So here we have terracelot configuration just because of tradition using some system namespaces."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo this line number seven is very important because it shows what object we plan to listen.",
            "Very important.",
            "We can \neasily make a mistake here.",
            "If we do, then nothing will happen and we will have no listening at all.",
            "You have to \nspecify name of existing object here."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAccording to our documentation we have some arguments here and for before events we have reference to our data \nrecord which is an instance of an entity class and also we have some before arguments.",
            "Such arguments are quite \ninteresting and important."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo for example, if user tries to add new data and provides too big price then system says okay, no error messages.",
            "But when user will start to check it will turn out that corresponding record was not inserted or updated.",
            "So this \nsilence sometimes is not so desired and we can make our operation like with some noise and it will be quite rude \nloud noise with throwing exception."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe already saved our code, open it from embedded editor and we can create localizable strings and our code is \nvalues too big.",
            "We use this localizable code and our localizable text message is here.",
            "Prices more than certain limit \nare not allowed.",
            "This text helps us to get localizable string from properties of this schema.",
            "Then we use String \nformat to replace some pattern with a certain number with a certain string and then we show this message for user."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd user will see that operation was not done and there is a reason why it failed.",
            "So we will see this error message.",
            "Okay, sorry, not ready.",
            "Just a second.",
            "It okay, so we can save our C sharp source code."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe can compile our package the first time we have to manually to do this our package and compile action \ncompilation takes some time and first time probably it will take maybe 30 or 40 seconds.",
            "Next time for the same \npackage it may take just 10 or 20 seconds.",
            "So it's quite good performance and it will be way faster than compile all \nof your system.",
            "So now you can see it probably took 30 or 40 seconds to compile and it finished with no mistakes, \nno errors."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo we have definitely greater than 1 billion.",
            "So our logic, our comparison condition here checks.",
            "I did not explain how \nit works actually.",
            "So sender is an argument object.",
            "We can run some parent implementation of the same handler if \nnecessary."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\n--- Page 20 ---\n\nSo it will show me some error message now because can also enable browser developer console control shift I in \norder to make so and go to network tab in order to see all text or requests that will happen here.",
            "So this value is \ndefinitely greater than 1 billion.",
            "So let's try to create new record.",
            "Now you see that insert failed prices more than 1 \nbillion are not allowed.",
            "And you see that insert query finally finished with error 500 internal server error."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nEverything is quite obvious that something is wrong.",
            "So we can fix our data.",
            "Let's make it not so big like this.",
            "When \nwe save it's okay.",
            "And you see that insert query now executed successfully."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo you see we cancel such attempt only if we will edit it in a value that is below our limit.",
            "Then we can save it and \nupdate will work normally.",
            "Data is processed normally and it works efficiently.",
            "The same business logic will work in \ncase if insert is performed from business process or if insert is performed with the help of API calls.",
            "We will study \nAPI calls and integration techniques."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSave everything to file system because we had changes at our localizable strings business processes.",
            "So save \neverything and then committed to version control.",
            "Thank you very much for your time.",
            "Our session is over."
          ]
        }
      ],
      "code_sections": [],
      "languages": [],
      "key_concepts": [
        "module",
        "entity",
        "schema",
        "detail",
        "integration",
        "data",
        "page",
        "customization",
        "configuration",
        "client"
      ],
      "keywords": [
        "process",
        "speaker",
        "page",
        "data",
        "let",
        "okay",
        "code",
        "use",
        "user",
        "make"
      ],
      "topics": [
        "speaker"
      ]
    },
    "method": "hierarchical_structural"
  }
}