{
  "summary_id": "901b066590a7",
  "content_id": "751f211990f5",
  "summary_type": "hierarchical",
  "summary_text": "Document: Speaker 1\n\nMain Sections:\n• Speaker 1\n  - # Speaker 1\n\nToday is session number six of our development on Creature Platform Guided Learning.\n  - Today I want you to see \nsome additional materials related to Classic UI and Freedom UI and migration.\n• Speaker 1\n  - # Speaker 1\n\nBut in future so it will be not developed, it will be not improved, you will not see new tools or components for the \nClassic ui.\n  - And most development is focused on Freedom ui.\n• Speaker 1\n  - # Speaker 1\n\nThen you can create a handler as a function add methods section.\n  - And in general I think it's easier because more \ntransparent work with object model, more transparent operation with view model data.\n• Speaker 1\n  - # Speaker 1\n\nUnfortunately we don't have any automated procedures for this.\n  - And especially this becomes additionally complex if \nyou have some programmed code in Classic ui.\n• Speaker 1\n  - # Speaker 1\n\nSuch items which have section in their name or page in their name, they usually designed as Classic ui.\n  - If you look at \nthe pages and you see form page or list page, it's a Freedom ui.\n• Speaker 1\n  - # Speaker 1\n\n--- Page 2 ---\n\nAt the source part we have Classic section, this one and as expected result, we would like to make one more section, \nbut showing the same data in Freedom UI server side part, for example, we have objects, we have maybe some \nserver side logic, maybe we have some business processes.\n  - So server side part will remain the same.\n• Speaker 1\n  - # Speaker 1\n\nSo it will be possible to switch.\n  - First of all, I need to tell you about some important settings related to such view.\n• Speaker 1\n  - # Speaker 1\n\nSo let me show you system settings and this system setting is called like Freedom use Freedom UI interface.\n  - This \nsetting generally turns on or off this background frame stuff.\n• Speaker 1\n  - # Speaker 1\n\nAnd we can also go to Workplace Management System Designer.\n  - This page go to Workplace System Setup.\n• Speaker 1\n  - # Speaker 1\n\nSo we need to enable Freedom UI back, use Freedom UI Interface, open it, set it again, save it, close it and yes, let's \nlog out and log in again to see back our background Freedom UI setting, which is default setting now and which is \nrecommended to work with Freedom UI sections and also with some Classic sections.\n  - It's still supported.\n• Speaker 1\n  - # Speaker 1\n\nFor example, some users are really stick to some Classic UI solutions.\n  - They are not ready to switch to Freedom ui.\n• Speaker 1\n  - # Speaker 1\n\nSo this is a page which will be temporary important for you, so it will be not forever for you.\n  - And finally you will \nswitch to Freedom UI all your necessary business sections and then you will feel quite okay with it.\n• Speaker 1\n  - # Speaker 1\n\nSo how we do this, how we can make a migration, I will explain it right now, I will show you, I think the easiest way.\n  - So let's go to Settings, then go to Application Hub so we can create new app.\n• Speaker 1\n  - # Speaker 1\n\nWe can compose kind of icon for it.\n  - And we will use this very important feature link to an existing object.\n• Speaker 1\n  - # Speaker 1\n\nIt only uses existing object and then creates several client module.\n  - So I don't expect it to last longer than 20 \nseconds.\n• Speaker 1\n  - # Speaker 1\n\nWe can hide unnecessary columns.\n  - We can add the columns that we need you.\n• Speaker 1\n  - # Speaker 1\n\nI prefer to control what's going on at configuration section because probably I'm too stick to development and I don't \nreally trust only no code tools.\n  - So I always want to check what is going on there.\n• Speaker 1\n  - # Speaker 1\n\nForm page is Freedom UI edit page for a section for an object.\n  - And as you can see it has its own properties in our \npackage code title.\n• Speaker 1\n  - # Speaker 1\n\nSo you will see such node if colon was already shown somewhere and you will not see it if colon is present in your \nobject model but was not shown on the page here notes for example, the colon which is designed to work with \nattachments and that's why it was not shown as a separate component here and I do not plan to show it.\n  - Okay, so in \ngeneral it looks like this.\n• Speaker 1\n  - # Speaker 1\n\nThere is so big difference between such platforms and code that now developers did not implement any kind of \nautomation and transition or business logic that is designed in Classic UI and you want to see the same in Freedom \nui.\n  - So if such logic exists, you will have to reprogram it Working at code source code part of the client module.\n• Speaker 1\n  - # Speaker 1\n\nThis is a result of some browser cache issues.\n  - Okay, let's cancel this log out, log in, go to Freedom UI section.\n• Speaker 1\n  - # Speaker 1\n\n--- Page 5 ---\n\nNow let's go to Studio Realty Classic and Migration is somewhere at the Antifa world.\n  - I expect to see my sections on \ntheir places.\n• Speaker 1\n  - # Speaker 1\n\nSo you will have to implement the same settings that you made for Classic UI again manually at Freedom UI pages.\n  - But having the data stuff the same.\n• Speaker 1\n  - # Speaker 1\n\nSo it's really hard to.\n  - Now we switched to Freedom UI and that's why Classic UI edit page is not working normally.\n• Speaker 1\n  - # Speaker 1\n\nSo finally when you do migration, you will use this help of Application Hub.\n  - You will get new package for your \nmigrated stuff.\n• Speaker 1\n  - # Speaker 1\n\nSo server side part of your migrated stuff will be the same and you just need to check that it still works as expected.\n  - In case of any questions, I would be happy to hear.\n• Speaker 2\n  - # Speaker 2\n\n--- Page 6 ---\n\nYeah, I have a question.\n  - Is realty.\n• Speaker 1\n  - # Speaker 1\n\nCurrently we position Classic UI as still like working tool, but we do not recommend to create new solutions on it.\n  - So \nit's like you have an old PC and new PC and you think about installing some program.\n• Speaker 1\n  - # Speaker 1\n\nBecause in Freedom UI you have in like in several times more available.\n  - No code, controls, components and \nFreedom UI will be developed in future and it supports or is going on.\n• Speaker 2\n  - # Speaker 2\n\nThanks Amelia.\n• Speaker 1\n  - # Speaker 1\n\nThank you Paddy.\n  - Thank you for your question.\n• Speaker 1\n  - # Speaker 1\n\nAnd we have some tools as I showed you that intended to help you with it.\n  - But personally I think that once you \nstarted to switch, it's better to make it quick and then to continue improvements already in Freedom ui.\n• Speaker 1\n  - # Speaker 1\n\nOkay, so if you have some real life examples, some kind of like practical interest and practical experience with the \nmigration also tell me, it's interesting what you think of it, what unexpected outcome you have.\n  - Probably so anyone I\n\n--- Page 7 ---\n\nthink may have something unusual and expected and even in creation we sometimes can't implement all possible \nscenarios.\n• Speaker 1\n  - # Speaker 1\n\nSo probably I have to start that in any package.\n  - Now we see we have some set of items of different types.\n• Speaker 1\n  - # Speaker 1\n\nSo object is a server side item, but its changes are applied easily without need to compile.\n  - So generally C code is not \nso let's say heavily used for objects and replacing objects.\n• Speaker 1\n  - # Speaker 1\n\nFinally to compile and get executable DLL libraries and then use such libraries at its website.\n  - So C Sharp sources \ndefinitely require compilation.\n• Speaker 1\n  - # Speaker 1\n\nIn general, it's recommended to have as less as possible for code in your processes.\n  - Because processes are \noriginally designed to be a no code tool and possibility to code into it.\n• Speaker 1\n  - # Speaker 1\n\nData is also metadata, not compiled and import.\n  - We can import dll items if they are written in.net and add them to \nour packages and use them in Our compile bot stuff.\n• Speaker 1\n  - # Speaker 1\n\nSo in general C Sharp sources for sure some business processes and user tasks they are compiled and finally they \nare turned into.\n  - Let me show you what they are turned into DLLs that you can find in Bin folder here.\n• Speaker 1\n  - # Speaker 1\n\nWe will make an example now and I think that the easiest possible way to demonstrate how you can write and run C \nSharp code at creation platform is to make a business process which will execute C Sharp script task into it.\n  - I \nintentionally avoid making our own C Sharp sources at the beginning.\n• Speaker 1\n  - # Speaker 1\n\nOr maybe it's better to say lookup package installed application.\n  - It's possible to minimize number of existing \npackages for you if you connect all your editable applications with some packages that you already have.\n• Speaker 1\n  - # Speaker 1\n\nI need to explain that what business process is because some of you probably already have experience with \ncustomizations and some of you probably already know that business process is a server side functionality which is \ndesigned to automate some business steps that you expect to be performed by system.\n  - And in general business \nprocesses are interpreted.\n• Speaker 1\n  - # Speaker 1\n\nAnd we have a special process engine, so it's a backend server side item quite important and very big which is \ncapable to get such metadata and execute it step by step according to the diagram items.\n  - Okay, let's start.\n• Speaker 1\n  - # Speaker 1\n\nSo my business sense is to make a process which will do some calculation at server side.\n  - And my calculation will \ninclude selecting some data and calculating average price for realty record.\n• Speaker 1\n  - # Speaker 1\n\nIf not just type Minus which means you are only watching and I can do it faster.\n  - Okay, thank you.\n• Speaker 1\n  - # Speaker 1\n\nSo if your process has no incoming flow, it means it's the start of your process.\n  - So take care.\n• Speaker 1\n  - # Speaker 1\n\nIn general, you know that Business Process Editor has two types of items that you can add.\n  - System actions which \nare executed quite quick, they do not require user feedback and they are executed automatically at server side.\n• Speaker 1\n  - # Speaker 1\n\nYou can also consider going to our customization course where my colleagues teach how to manage processes.\n  - So \nwhat my plan is I user.\n• Speaker 1\n  - # Speaker 1\n\nNow you see when you slightly move it then you correctly put it on the flow.\n  - So you should practice a bit with placing \nitems on the diagram and making sure that you do it correctly.\n• Speaker 1\n  - # Speaker 1\n\nSo now you will see that we can write some C sharp code here and then save apply changes for our process and it \nwill turn into automatically generated class and our code here in this C sharp script will turn into a method.\n  - It will not \ntake too much time for us because I already have some pre developed examples for you and it will be server side \nNDPTS schema query for calculation.\n• Speaker 1\n  - # Speaker 1\n\nOkay, so I copy and paste this code to the editor.\n  - We can also expand this editor to see like in more comfortable \nways.\n• Speaker 1\n  - # Speaker 1\n\nProbably also using a tool called class Factory and you may create instances of classes that will Work as helpers for \nyou.\n  - Then you can just make corresponding setting and run corresponding methods.\n• Speaker 1\n  - # Speaker 1\n\nOkay, so I will save my code example.\n  - It's not finished yet.\n• Speaker 1\n  - # Speaker 1\n\nLet me show you a bit more examples like apartment in will be an apartment for sale.\n  - Okay.\n• Speaker 1\n  - # Speaker 1\n\nWe need to take into consideration only records with a certain type in order to split apartments from houses.\n  - And \ndefinitely we have to filter data according to offer type splitting sales from rentals.\n• Speaker 1\n  - # Speaker 1\n\nAnd physically how we do this is the C Sharp code written in this editor.\n  - And yes, I agree that if you don't know C \nSharp, it could be quite hard for you to write it without mistakes.\n• Speaker 1\n  - # Speaker 1\n\nOkay, so let me explain in general what is happening here.\n  - I plan to operate with creation database.\n• Speaker 1\n  - # Speaker 1\n\nAnother approach which we will study a bit later is based on direct database selection from its tables without use of \nobject model.\n  - So we will be able to write down our own selects some columns from some tables where some \nconditions without taking care of support of object model.\n• Speaker 1\n  - # Speaker 1\n\nAlso Entity schema query supports caching at server side.\n  - If the same data is obtained too many times at the server \nside, it's possible to organize your code in the way that this data was first obtained from the database and all second \ntimes it maybe will update will be taken from the server side application cache and that's how you may do your \nselections more efficient.\n• Speaker 1\n  - # Speaker 1\n\nEntity schema query is a class which supports object model and it has only one single purpose select list of records \nfrom the database.\n  - It has some arguments when we run its constructor.\n• Speaker 1\n  - # Speaker 1\n\nAlso you may ask me if we type this code like this how we know about present functions, methods properties and so \non.\n  - We have some Academy server side documentation.\n• Speaker 1\n  - # Speaker 1\n\nWe only make sure that we have the same columns as we plan to work with and we don't have any obvious rude \nmistakes here.\n  - So let's look at our reality Object just to match our columns we need to select price and area.\n• Speaker 1\n  - # Speaker 1\n\nSo it's better to always add only columns into your selection which you really need to analyze later.\n  - In my case I need \ntwo columns, price and area and making such methods to our entity schema query will result into adding couple of \ncolumns.\n• Speaker 1\n  - # Speaker 1\n\nBut it's possible you can use this argument as a special column path expression.\n  - Column path may include joins if \nyou use lookup columns of your main entity.\n• Speaker 1\n  - # Speaker 1\n\n--- Page 13 ---\n\nSo we have root schema which is the main from table of our select statement and it's possible to add connections \nto other entities and using direct connections when you select city, you can join to the sanctuary countries to get its \nname or you can use reverse connections when you have account and you would like to.\n  - Or in this case it looks like \nyou select cities and you would like to join all accounts from this city.\n• Speaker 1\n  - # Speaker 1\n\nI plan to get corresponding values for my filters with the help of no code tools.\n  - So I expect to get such values.\n• Speaker 1\n  - # Speaker 1\n\nBecause we know for sure that by default our ESQ filters has end logical connection logical conjunction operator.\n  - That's why we have it without any special setting.\n• Speaker 1\n  - # Speaker 1\n\nSo when we finished with building entity schema query, adding columns and adding filters, we can consider at as it's \ndone and we can run the main function for selecting data.\n  - This is getentity collection method, which finally returns \nas some collection.\n• Speaker 1\n  - # Speaker 1\n\nSo generally when we user connection in our code it represents current user context and this is mandatory to \noperate with creature database.\n  - So each time when you will run any kind of query that you want to be finally \noperating with your database, you will have to provide user connection because this one is like in general what you \nplan to select.\n• Speaker 1\n  - # Speaker 1\n\n--- Page 14 ---\n\nAnd as we get this collection, we have to process it line by line.\n  - So we can use for each statement or there are other \nways to process collection.\n• Speaker 1\n  - # Speaker 1\n\nSo simply speaking, this is the line how we get exact decimal price from our data.\n  - And next line is getting the same \napproach for getting decimal area.\n• Speaker 1\n  - # Speaker 1\n\nCurrently it looks like our code is ready.\n  - We don't have corresponding parameters so far, so possibly we have to \nimplement it and then save and publish.\n• Speaker 1\n  - # Speaker 1\n\nC Sharp sources inside of business processes can get some data from process interpreted part and then return \nsome data into processes interpreted part.\n  - The best way to do this is to use parameters.\n• Speaker 1\n  - # Speaker 1\n\nAnd when we use get generic expression on getting grid value and this parameter as an argument we ask system to \nread corresponding parameter value from the process and also we will do with the offer type.\n  - So I copy its name \nshow it for you Go to process parameters.\n• Speaker 1\n  - # Speaker 1\n\nSo creating parameters you like declare variables for your process and the final result will be my average price \nparameter and it will be decimal.\n  - So add decimal parameter and I will do it like this.\n• Speaker 1\n  - # Speaker 1\n\nSo my plan is to use as much as possible of no code here.\n  - And for example we can select a source certain record or \nwe can open certain page.\n• Speaker 1\n  - # Speaker 1\n\nIt will be also unique identifier so we can call it realty ID parameter and here its title will be reality id.\n  - Title is \nimportant for user display and code is important for programming.\n• Speaker 1\n  - # Speaker 1\n\nWhat we will do with this id, I will use a bit of no code tools.\n  - Read read data item carefully placing it on my diagram.\n• Speaker 1\n  - # Speaker 1\n\nThis filter will be enough to make read data to select just single record from my database and we can name it read \nreality.\n  - Read reality will be its title and it will be also shown here.\n• Speaker 1\n  - # Speaker 1\n\nWe are interested in type and offer type.\n  - So originally we expect to get only ID of the certain reality record.\n• Speaker 1\n  - # Speaker 1\n\nSo we will use getting data from read data into process level parameters and we can do it easily with formula.\n  - Formula is simply just an assigning operator for a left part of it will be your parameter that you want to set formal \nvalue to.\n• Speaker 1\n  - # Speaker 1\n\nMy process will be started Set type it this is our formula title the same approach another formula drag and drop it \ncarefully will be used to set offer type id.\n  - So parameter target parameter is offer type ID and form of value takes data \nfrom process elements.\n• Speaker 1\n  - # Speaker 1\n\nSo if anything should be shown or explained, tell me please.\n  - If it's not clear what we are doing also please ask.\n• Speaker 1\n  - # Speaker 1\n\nSo Monica, if any assistance needed, just tell me that we know now.\n  - You see, I saved my process and I did not \nexplain what is happening here.\n• Speaker 1\n  - # Speaker 1\n\nYou saw dotnet Xeno you see.\n  - So here we have parts of.\n• Speaker 1\n  - # Speaker 1\n\nSo now you see our realty package has initial setting compiled into a separate smart.\n  - This option means that our\n\n--- Page 17 ---\n\ncontents that we design in our.\n• Speaker 1\n  - # Speaker 1\n\nThen we have method inside of it and you can see oh, this method is a constructor.\n  - Okay, not so interesting.\n• Speaker 1\n  - # Speaker 1\n\nBut until we are not using any like reverse engineering tools, we probably will not be really successful with analyzing \nthis code.\n  - But you may just trust me that finally this code includes business logic and our class stuff here.\n• Speaker 1\n  - # Speaker 1\n\nSo we have this set of C files and bin folder here turns into this DLL.\n  - So now you see 11 megabytes of executable \ncode, which is quite a lot.\n• Speaker 1\n  - # Speaker 1\n\nYes, I understand this idea, but I do not like this, because it will be not clear for me at what moment of time this \nparameter will initialize its value and at what moment of time this parameter will change its value.\n  - So possibly we \ncan do this.\n• Speaker 1\n  - # Speaker 1\n\nWith this formula, if we use parameters directly mapped to read realty, it will be not clear for me when exactly \nparameter will be changed.\n  - And so I think that our example will lack obviousness and lack visibility of what is going \non.\n• Speaker 2\n  - # Speaker 2\n\nI have a quick question about the.\n• Speaker 1\n  - # Speaker 1\n\nDLLs if that's okay.\n  - I do.\n• Speaker 2\n  - # Speaker 2\n\nIs it possible when we're creating them this way that we can call other DLLs maybe outside of this package?\n• Speaker 1\n  - # Speaker 1\n\nOkay, we can.\n  - Sure it's possible.\n• Speaker 1\n  - # Speaker 1\n\nAnd this will be normally compiled and executed.\n  - So it's quite common thing how you can add Other libraries and \nnamespaces with usings and these usings will form into.\n• Speaker 1\n  - # Speaker 1\n\nBut in real life, when you do development of your own solution, of course you will get compilation issues, you will get \nerror messages, so you will have to go to your code, find corresponding lines, fix it, save again, publish again, and \nfinally you'll have to make your process work normally.\n  - Please note if your system is saved in a state, that means you \nhave compilation errors.\n• Speaker 1\n  - # Speaker 1\n\nAnd you will not be able to easily apply changes in your compilable stuff because each time you try to compile you \nwill get the same errors.\n  - So it's recommended to keep your system to be saved in a healthy state when any \ncompilation finishes successfully.\n• Speaker 1\n  - # Speaker 1\n\nI understand we are going a bit behind with the schedule and today we will spend maybe 10 or 15 minutes more.\n  - So \nthis is our page design.\n• Speaker 1\n  - # Speaker 1\n\nThis will be our action title Action value will be run business profile process this one run process which process to \nrun calculate average reality price.\n  - And we have different modes to start our process regardless of the page means \nwith no parameters for selected page means for edit page data and it means we can only pass record ID as \nargument.\n• Speaker 1\n  - # Speaker 1\n\nIn previous versions this drop down showed all the columns or I mean all the parameters and generally it's not good \nbecause all parameters included integers included decimals so not suitable for grid and we only now see some \nfiltered stuff.\n  - So realty will be recipient of our ID of currently edited record.\n• Speaker 1\n  - # Speaker 1\n\nWe can rename it so menu item cog average price just to make it easy to find if we ever needed to find in our view \nconfig diff so as you can see this action is quite easy to do.\n  - Let's go back to actions list and we can check how it \nworks.\n• Speaker 1\n  - # Speaker 1\n\nSo let's make one more bulk action like cultivate average price.\n  - Our action will be again run process where.\n• Speaker 1\n  - # Speaker 1\n\nLet's just start to test it.\n  - So we can close the editor.\n• Speaker 1\n  - # Speaker 1\n\nSort by date of start, read set formulas, calculation finish.\n  - It looks like everything went correctly here.\n• Speaker 1\n  - # Speaker 1\n\nOkay, so this one is our list Selected data Calculate average price successfully started.\n  - I expect to run only one \ninstance of a process here.\n• Speaker 1\n  - # Speaker 1\n\nBut in order to make this example fully working, we need some more items and we need debugging to make sure \nthat our code works accordingly our expectations.\n  - I just wanted you to see how we can run this calculation for \nmultiple scenarios.\n• Speaker 1\n  - # Speaker 1\n\nYou see start and end date is status.\n  - We will see how you can how we can debug this especially C sharp part and \nalso how to check its performance.\n• Speaker 2\n  - # Speaker 2\n\nI have a quick question, if that's okay.\n• Speaker 1\n  - # Speaker 1\n\nYes, yes, please.\n• Speaker 2\n  - # Speaker 2\n\nIt's just about business processes.\n  - So at the moment we're tying them to.\n• Speaker 1\n  - # Speaker 1\n\nIt's possible, sure.\n  - But I try to keep it simple and use it as possible of no code.\n• Speaker 2\n  - # Speaker 2\n\nI understand.\n• Speaker 1\n  - # Speaker 1\n\nI'm just curious manually.\n  - But yes, Later I will show you how we can trust trigger some business logic that will start \naccording to data change.\n• Speaker 1\n  - # Speaker 1\n\nSo you can do it in much more complicated way and trying to keep it simple.\n  - Because we are studying.\n• Speaker 2\n  - # Speaker 2\n\n--- Page 22 ---\n\nThanks a million.\n• Speaker 1\n  - # Speaker 1\n\nThank you.\n  - See you soon.\n\nKey Concepts: module, entity, json, schema, detail",
  "key_points": [
    "module",
    "entity",
    "json",
    "schema",
    "detail",
    "page",
    "data",
    "customization",
    "configuration",
    "client"
  ],
  "keywords": [
    "ui",
    "process",
    "speaker",
    "like",
    "code",
    "classic",
    "data",
    "freedom",
    "page",
    "freedom ui"
  ],
  "topics": [
    "speaker"
  ],
  "summary_length": 4684,
  "original_length": 14987,
  "compression_ratio": 0.3125375325281911,
  "confidence_score": 0.9,
  "created_timestamp": "2025-07-23T16:52:58.987562",
  "metadata": {
    "structure": {
      "title": "Speaker 1",
      "sections": [
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nToday is session number six of our development on Creature Platform Guided Learning.",
            "Today I want you to see \nsome additional materials related to Classic UI and Freedom UI and migration.",
            "And then we will fully switch to work \nwith server side.",
            "So recently we managed to create a fully separate Classic UI solution."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nBut in future so it will be not developed, it will be not improved, you will not see new tools or components for the \nClassic ui.",
            "And most development is focused on Freedom ui.",
            "And you also remember some interesting feature, \nsome feature for voice recognition, you remember we still missed it in Freedom ui.",
            "And you also can do details, you \ncan program buttons or actions."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThen you can create a handler as a function add methods section.",
            "And in general I think it's easier because more \ntransparent work with object model, more transparent operation with view model data.",
            "I will show you more \nexamples later.",
            "And this is just a quick brief introduction for you.",
            "If you will work with some Freedom Classic UI \npages in this case, this possibly can help you."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nUnfortunately we don't have any automated procedures for this.",
            "And especially this becomes additionally complex if \nyou have some programmed code in Classic ui.",
            "So I will show you the most practical way how you can switch from \nClassic UI to Freedom ui.",
            "I will also show you some settings and system settings for this which impact on how you \nsee your system."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSuch items which have section in their name or page in their name, they usually designed as Classic ui.",
            "If you look at \nthe pages and you see form page or list page, it's a Freedom ui.",
            "Of course, physically they are totally different."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\n--- Page 2 ---\n\nAt the source part we have Classic section, this one and as expected result, we would like to make one more section, \nbut showing the same data in Freedom UI server side part, for example, we have objects, we have maybe some \nserver side logic, maybe we have some business processes.",
            "So server side part will remain the same.",
            "Data, items, \nlookup contents, everything will be the same.",
            "The only change we expect to do will be our user interface area."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo it will be possible to switch.",
            "First of all, I need to tell you about some important settings related to such view.",
            "And \nI would like you to see this background like frame."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo let me show you system settings and this system setting is called like Freedom use Freedom UI interface.",
            "This \nsetting generally turns on or off this background frame stuff.",
            "And if we just for test purpose want to turn it off so use \nFreedom UI interface was originally on we turned it off and it's cached.",
            "So in order to apply this we will need to log \nout and log in again.",
            "Now you will see how system will look like with the Classic UI set of section and the top search \nbar."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd we can also go to Workplace Management System Designer.",
            "This page go to Workplace System Setup.",
            "Let's \ncheck our customer 360 workplace and you see use only in shell in like in usual words.",
            "If we want to translate it into \nsomething that you can easily understand, it means that use only in Freedom UI background settings."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo we need to enable Freedom UI back, use Freedom UI Interface, open it, set it again, save it, close it and yes, let's \nlog out and log in again to see back our background Freedom UI setting, which is default setting now and which is \nrecommended to work with Freedom UI sections and also with some Classic sections.",
            "It's still supported.",
            "You see, \nwe have Freedom UI background, but we have Classic UI stuff inside of it."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nFor example, some users are really stick to some Classic UI solutions.",
            "They are not ready to switch to Freedom ui.",
            "They work with some basic UI sections and it's critically important for them.",
            "So you can manage this stuff for\n\n--- Page 3 ---\n\ndifferent users."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo this is a page which will be temporary important for you, so it will be not forever for you.",
            "And finally you will \nswitch to Freedom UI all your necessary business sections and then you will feel quite okay with it.",
            "So you will not \nreally need to switch back to Classic ui And that's how I recommend you to follow this personally."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo how we do this, how we can make a migration, I will explain it right now, I will show you, I think the easiest way.",
            "So let's go to Settings, then go to Application Hub so we can create new app.",
            "As you remember, application is like a \nnew top level setting or like application entity which may include one or several packages inside.",
            "We already have \nFreedom UI reality section, but we don't have any classical representation for it."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe can compose kind of icon for it.",
            "And we will use this very important feature link to an existing object.",
            "This is very \nimportant.",
            "So this is a key feature of all this migration idea.",
            "We will use existing realty Classic UI main realty classic \nentity."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nIt only uses existing object and then creates several client module.",
            "So I don't expect it to last longer than 20 \nseconds.",
            "So let's see how it works for us.",
            "And then you will see the main idea of migration.",
            "So Generally it's pretty \nsimple."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe can hide unnecessary columns.",
            "We can add the columns that we need you.",
            "Now you see all our classic object \ncolumns are here.",
            "So we can specify say okay, we want to see name, price, type, offer type and comment and then \ndate of creation.",
            "Order of selection is important here."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nI prefer to control what's going on at configuration section because probably I'm too stick to development and I don't \nreally trust only no code tools.",
            "So I always want to check what is going on there.",
            "And that's why we go to \ncorresponding new created package.",
            "You see this package must have dependency from dev Classic.",
            "Yes, has it."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nForm page is Freedom UI edit page for a section for an object.",
            "And as you can see it has its own properties in our \npackage code title.",
            "Great.",
            "And we can specify columns as we wish."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo you will see such node if colon was already shown somewhere and you will not see it if colon is present in your \nobject model but was not shown on the page here notes for example, the colon which is designed to work with \nattachments and that's why it was not shown as a separate component here and I do not plan to show it.",
            "Okay, so in \ngeneral it looks like this.",
            "We can also try to specify drop down for types."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThere is so big difference between such platforms and code that now developers did not implement any kind of \nautomation and transition or business logic that is designed in Classic UI and you want to see the same in Freedom \nui.",
            "So if such logic exists, you will have to reprogram it Working at code source code part of the client module.",
            "So I \nalready saved it.",
            "You can close it.",
            "Now you see some changes."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThis is a result of some browser cache issues.",
            "Okay, let's cancel this log out, log in, go to Freedom UI section.",
            "Also I \nwould like it to be present in my.",
            "Let me show you in my studio Workplace.",
            "So let's go to Workplace Studio."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\n--- Page 5 ---\n\nNow let's go to Studio Realty Classic and Migration is somewhere at the Antifa world.",
            "I expect to see my sections on \ntheir places.",
            "Yes, Realty is our new Freedom UI original setting Classic is our Classic UI original stuff.",
            "And migration \nis our Classic UI data shown in Freedom UI user interface.",
            "Trying to open the edit page shows us Freedom UI page \nfor migrated stuff."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo you will have to implement the same settings that you made for Classic UI again manually at Freedom UI pages.",
            "But having the data stuff the same.",
            "It's so doesn't take too much time because your data is data model is ready.",
            "And \nwhat is interesting, we have special parts of section like folders like tags and notes.",
            "So nodes will be taken correctly \nfrom Classic UI part."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo it's really hard to.",
            "Now we switched to Freedom UI and that's why Classic UI edit page is not working normally.",
            "But for different users it's possible to set up.",
            "So Classic UI open the page.",
            "As you can see in Classic UI I open the \npage and I see Freedom UI edit page."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo finally when you do migration, you will use this help of Application Hub.",
            "You will get new package for your \nmigrated stuff.",
            "From Classic to Freedom we will have set of client modules and all logic that you miss."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo server side part of your migrated stuff will be the same and you just need to check that it still works as expected.",
            "In case of any questions, I would be happy to hear.",
            "As usual, video recording is performed."
          ]
        },
        {
          "heading": "Speaker 2",
          "key_points": [
            "# Speaker 2\n\n--- Page 6 ---\n\nYeah, I have a question.",
            "Is realty."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nCurrently we position Classic UI as still like working tool, but we do not recommend to create new solutions on it.",
            "So \nit's like you have an old PC and new PC and you think about installing some program.",
            "Of course it makes sense to \ninstall it on UPC unless you have very serious reasons to use Classic UI for it."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nBecause in Freedom UI you have in like in several times more available.",
            "No code, controls, components and \nFreedom UI will be developed in future and it supports or is going on.",
            "Classic UI is now supported only for existing \ncomponents.",
            "No new components are created for Classic ui.",
            "We still have thousands of customers with running \nClassic UI solutions and it is quite good."
          ]
        },
        {
          "heading": "Speaker 2",
          "key_points": [
            "# Speaker 2\n\nThanks Amelia."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThank you Paddy.",
            "Thank you for your question.",
            "Okay, so now you know how to do first steps."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd we have some tools as I showed you that intended to help you with it.",
            "But personally I think that once you \nstarted to switch, it's better to make it quick and then to continue improvements already in Freedom ui.",
            "So not to be \ntoo long in this intermediate stage where some users are working in Classic, others are working in Freedom."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOkay, so if you have some real life examples, some kind of like practical interest and practical experience with the \nmigration also tell me, it's interesting what you think of it, what unexpected outcome you have.",
            "Probably so anyone I\n\n--- Page 7 ---\n\nthink may have something unusual and expected and even in creation we sometimes can't implement all possible \nscenarios.",
            "So if you will have something unusual, just tell me, I will try to help with it."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo probably I have to start that in any package.",
            "Now we see we have some set of items of different types.",
            "So we \nhave items with different types.",
            "If you try to add an item manually, you now will see we have objects and we also \nstudied what is replacing object.",
            "We have pages, so client modules of different types."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo object is a server side item, but its changes are applied easily without need to compile.",
            "So generally C code is not \nso let's say heavily used for objects and replacing objects.",
            "Of course, C Sharp source codes, if you design it \nseparately in source code item will definitely require some configuration."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nFinally to compile and get executable DLL libraries and then use such libraries at its website.",
            "So C Sharp sources \ndefinitely require compilation.",
            "All JavaScript part this all this JavaScript part obviously does not require compilation \nbecause it's a set of JavaScript files.",
            "They are executed as interpreted code at browser side.",
            "So when you save and \napply any change in JavaScript part in client module part, it also does not require any compilation."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nIn general, it's recommended to have as less as possible for code in your processes.",
            "Because processes are \noriginally designed to be a no code tool and possibility to code into it.",
            "It's not its primary purpose.",
            "The primary \npurpose of a process is to make your business logic a set of steps that you can easily construct with using of your \nmouse and which will not require programming and then you can get your business work done."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nData is also metadata, not compiled and import.",
            "We can import dll items if they are written in.net and add them to \nour packages and use them in Our compile bot stuff.",
            "So if in general such DLLs if we import them are included into \ncompilation, so we can consider this stuff as involved in compilation.",
            "Now you see only four types of items that\n\n--- Page 8 ---\n\nsomehow touch the compilation and in general that's how we can say that creation has compilable server set."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo in general C Sharp sources for sure some business processes and user tasks they are compiled and finally they \nare turned into.",
            "Let me show you what they are turned into DLLs that you can find in Bin folder here.",
            "Or you can also \nfind DLLs as a result of compilation in many packages."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe will make an example now and I think that the easiest possible way to demonstrate how you can write and run C \nSharp code at creation platform is to make a business process which will execute C Sharp script task into it.",
            "I \nintentionally avoid making our own C Sharp sources at the beginning.",
            "So first I plan to show you how we can make \nprocess with some piece of programming inside of it.",
            "We need some package for this.",
            "I prefer to do it in my realty \npackage."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOr maybe it's better to say lookup package installed application.",
            "It's possible to minimize number of existing \npackages for you if you connect all your editable applications with some packages that you already have.",
            "And we \nalready did it avoiding creating one more package for Customer360 customization.",
            "So this is something that we \nalready studied."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nI need to explain that what business process is because some of you probably already have experience with \ncustomizations and some of you probably already know that business process is a server side functionality which is \ndesigned to automate some business steps that you expect to be performed by system.",
            "And in general business \nprocesses are interpreted.",
            "It means you construct such kind of diagram and then ask system to run it."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd we have a special process engine, so it's a backend server side item quite important and very big which is \ncapable to get such metadata and execute it step by step according to the diagram items.",
            "Okay, let's start.",
            "So I need \nto provide a code usr and I need to explain the business sense of my future process."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo my business sense is to make a process which will do some calculation at server side.",
            "And my calculation will \ninclude selecting some data and calculating average price for realty record.",
            "So my process name will be something \nlike Coke Average Realty Price process and the title of the process will be Calculate Average Realty price."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nIf not just type Minus which means you are only watching and I can do it faster.",
            "Okay, thank you.",
            "Thank you.",
            "Monica, \nAdrian, Eddie.",
            "Thank you to share."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo if your process has no incoming flow, it means it's the start of your process.",
            "So take care.",
            "If you accidentally drop \nitems on your diagram without incoming flows, it will be treated as a beginning.",
            "So please be careful.",
            "Okay?"
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nIn general, you know that Business Process Editor has two types of items that you can add.",
            "System actions which \nare executed quite quick, they do not require user feedback and they are executed automatically at server side.",
            "And \nwe have items called user actions.",
            "User actions are designed to show some page for a user, usually waiting for \nsome feedback after it."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nYou can also consider going to our customization course where my colleagues teach how to manage processes.",
            "So \nwhat my plan is I user.",
            "I use system action script task, the only item in all business process which requires coding in \nthis diagram.",
            "So this item should be carefully put on the diagram.",
            "I can intentionally show you how you can do it \nincorrectly."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nNow you see when you slightly move it then you correctly put it on the flow.",
            "So you should practice a bit with placing \nitems on the diagram and making sure that you do it correctly.",
            "Now this item has incoming flow, it has its own C \nsharp body."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo now you will see that we can write some C sharp code here and then save apply changes for our process and it \nwill turn into automatically generated class and our code here in this C sharp script will turn into a method.",
            "It will not \ntake too much time for us because I already have some pre developed examples for you and it will be server side \nNDPTS schema query for calculation.",
            "So I already have some example which will work for us."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOkay, so I copy and paste this code to the editor.",
            "We can also expand this editor to see like in more comfortable \nways.",
            "And if you ask me about is it possible to use modern powerful editors like Visual Studio or Visual Studio code \nto type code like this.",
            "Unfortunately for business processes it's not intended to be used so it's not supported."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nProbably also using a tool called class Factory and you may create instances of classes that will Work as helpers for \nyou.",
            "Then you can just make corresponding setting and run corresponding methods.",
            "That's how you may keep this \ncode quite small sized and do not need to create very complicated logic just here.",
            "So it was not intended to be used \nfor complicated logic."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOkay, so I will save my code example.",
            "It's not finished yet.",
            "I will just show you what happens if you try to save."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nLet me show you a bit more examples like apartment in will be an apartment for sale.",
            "Okay.",
            "And yeah, it should be \nreloaded probably.",
            "I just feel okay, it's apartment and this also is an apartment for sale.",
            "So what I wanted to show \nyou we have different types of realty like houses and apartment."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe need to take into consideration only records with a certain type in order to split apartments from houses.",
            "And \ndefinitely we have to filter data according to offer type splitting sales from rentals.",
            "So when we do this average price \ncalculation we will need to have filters or offer type to include only rentals or only sales and general realty type to \ninclude only apartments or only houses.",
            "And then we will calculate total Amount of all selected records, total price."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd physically how we do this is the C Sharp code written in this editor.",
            "And yes, I agree that if you don't know C \nSharp, it could be quite hard for you to write it without mistakes.",
            "So if you type some code here, if it has mistakes, \nsystem will not show it immediately for you.",
            "For example, if you write something like this with a missing name of \nyour method, so if you do some mistake with spelling, then you will note about it."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOkay, so let me explain in general what is happening here.",
            "I plan to operate with creation database.",
            "We have two \ndifferent ways to operate with the database.",
            "And now I'm using the approach which supports entity data model."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnother approach which we will study a bit later is based on direct database selection from its tables without use of \nobject model.",
            "So we will be able to write down our own selects some columns from some tables where some \nconditions without taking care of support of object model.",
            "But now this approach shows you this possibility with \nsupport of object model."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAlso Entity schema query supports caching at server side.",
            "If the same data is obtained too many times at the server \nside, it's possible to organize your code in the way that this data was first obtained from the database and all second \ntimes it maybe will update will be taken from the server side application cache and that's how you may do your \nselections more efficient.",
            "So entity schema query supports caching."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nEntity schema query is a class which supports object model and it has only one single purpose select list of records \nfrom the database.",
            "It has some arguments when we run its constructor.",
            "We have several overloaded constructors \nfor this class and it has arguments.",
            "One of them is quite standard so you will always use it.",
            "And second argument is \na text representing our object code."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAlso you may ask me if we type this code like this how we know about present functions, methods properties and so \non.",
            "We have some Academy server side documentation.",
            "Let me show you backend development.net classes \nReference Go here and we have set of cluster libraries for creation.",
            "Server side you can search for entity schema \nquery class.",
            "Here you will see all of its definitions structures so you will see all of its constructors 1, 2, 3, 4 four \ndifferent overloaded constructors."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe only make sure that we have the same columns as we plan to work with and we don't have any obvious rude \nmistakes here.",
            "So let's look at our reality Object just to match our columns we need to select price and area.",
            "Here we \nhave USR price USD column and USR area.",
            "Okay, so it looks like the same."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo it's better to always add only columns into your selection which you really need to analyze later.",
            "In my case I need \ntwo columns, price and area and making such methods to our entity schema query will result into adding couple of \ncolumns.",
            "So the part of our selection statement that we will finally start at the database overcrowc select then set of \ncolumns that we do from our realty table.",
            "From this table is called root entity which is the first one which will be \nused for construction of our query."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nBut it's possible you can use this argument as a special column path expression.",
            "Column path may include joins if \nyou use lookup columns of your main entity.",
            "In this case it's called direct join or if you use lookup columns of join the \nentity.",
            "In this case construction will be a bit more complicated and it's called reverse joins."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\n--- Page 13 ---\n\nSo we have root schema which is the main from table of our select statement and it's possible to add connections \nto other entities and using direct connections when you select city, you can join to the sanctuary countries to get its \nname or you can use reverse connections when you have account and you would like to.",
            "Or in this case it looks like \nyou select cities and you would like to join all accounts from this city.",
            "And this article will let you know more about it."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nI plan to get corresponding values for my filters with the help of no code tools.",
            "So I expect to get such values.",
            "I will \nshow you how to operators process parameters a bit later.",
            "Now we consider we getting it with a special get \ncommands from process parameters."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nBecause we know for sure that by default our ESQ filters has end logical connection logical conjunction operator.",
            "That's why we have it without any special setting.",
            "So if you want only for debugging purpose, you can get SQL text \nfrom your query, so it's possible it's supported."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo when we finished with building entity schema query, adding columns and adding filters, we can consider at as it's \ndone and we can run the main function for selecting data.",
            "This is getentity collection method, which finally returns \nas some collection.",
            "Also you may notice that we use special arguments here and here.",
            "And this argument is called \nuser connection."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo generally when we user connection in our code it represents current user context and this is mandatory to \noperate with creature database.",
            "So each time when you will run any kind of query that you want to be finally \noperating with your database, you will have to provide user connection because this one is like in general what you \nplan to select.",
            "But user connection is an important argument which tells the system who exactly is running this \nquery."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\n--- Page 14 ---\n\nAnd as we get this collection, we have to process it line by line.",
            "So we can use for each statement or there are other \nways to process collection.",
            "In my case I prefer to use for each and we use it for each row or as many rows we have \nin collection.",
            "We will have as many runs of our cycle body inside of our cycle."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo simply speaking, this is the line how we get exact decimal price from our data.",
            "And next line is getting the same \napproach for getting decimal area.",
            "We have some counters here which we use to collect all the prices and all the \nareas."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nCurrently it looks like our code is ready.",
            "We don't have corresponding parameters so far, so possibly we have to \nimplement it and then save and publish.",
            "But it looks like we need some like say five or ten minutes or break.",
            "So let's \nmake it break and then we will continue this stuff and you will see that finally it's not so boring.",
            "And I will also show \nyou how to debug such code today."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nC Sharp sources inside of business processes can get some data from process interpreted part and then return \nsome data into processes interpreted part.",
            "The best way to do this is to use parameters.",
            "So parameters can be \nconsidered as a variable for the process and process.",
            "Items also may have their own parameters.",
            "So in general we \ncan think of parameters as global variables for the process or for certain values of process items."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd when we use get generic expression on getting grid value and this parameter as an argument we ask system to \nread corresponding parameter value from the process and also we will do with the offer type.",
            "So I copy its name \nshow it for you Go to process parameters.",
            "Also I need to explain if you click on some process item it will show you \nselected item properties."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo creating parameters you like declare variables for your process and the final result will be my average price \nparameter and it will be decimal.",
            "So add decimal parameter and I will do it like this.",
            "Okay, I hope you are quite good \nin doing it.",
            "So my question is for Monica and Paddy.",
            "Please confirm when you finish this part."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo my plan is to use as much as possible of no code here.",
            "And for example we can select a source certain record or \nwe can open certain page.",
            "Then I plan to make a button which will run the process, but unfortunately we can only \npass one single data value as argument when running no code parameter processes."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nIt will be also unique identifier so we can call it realty ID parameter and here its title will be reality id.",
            "Title is \nimportant for user display and code is important for programming.",
            "Okay, and we can set this parameter as input \nparameter.",
            "Input parameter will be designed as read only.",
            "So process expects this data to be set at the beginning of \nthe process when process is called and it's not expected to be changed it."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWhat we will do with this id, I will use a bit of no code tools.",
            "Read read data item carefully placing it on my diagram.",
            "You see, there is a special display when you put it properly.",
            "Okay, my read data item will be used to get ID of type and \noffer type.",
            "So read first record of separate selection."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThis filter will be enough to make read data to select just single record from my database and we can name it read \nreality.",
            "Read reality will be its title and it will be also shown here.",
            "In general, it's good idea to provide corresponding \ntitles for all of your items and no need to sort if you have just one record and reading all columns.",
            "I do not \nrecommend you to use this option."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe are interested in type and offer type.",
            "So originally we expect to get only ID of the certain reality record.",
            "Then we \nwill look into database to get its type and offer type and then we will use read data item to get such type and offer \ntype.",
            "Once we obtain it when process is started, results of such data records will be saved somewhere inside of this \nread data item."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo we will use getting data from read data into process level parameters and we can do it easily with formula.",
            "Formula is simply just an assigning operator for a left part of it will be your parameter that you want to set formal \nvalue to."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nMy process will be started Set type it this is our formula title the same approach another formula drag and drop it \ncarefully will be used to set offer type id.",
            "So parameter target parameter is offer type ID and form of value takes data \nfrom process elements.",
            "Read data offer type double click and then we have this macro save it.",
            "That's how we save \nthis offer type ID here this item.",
            "We can call it calculate average price or calculate AVG price."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo if anything should be shown or explained, tell me please.",
            "If it's not clear what we are doing also please ask.",
            "Thanks Betty.",
            "Thanks Monica.",
            "If you have any questions, don't."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo Monica, if any assistance needed, just tell me that we know now.",
            "You see, I saved my process and I did not \nexplain what is happening here.",
            "So when I saved it system.",
            "Oh, thank you, Monica.",
            "Thank you."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nYou saw dotnet Xeno you see.",
            "So here we have parts of.",
            "NET Core framework which is used for creation and it's \ncompiling our assembly in a dot net library.",
            "As a result, we extract expect to get set of DLLs and our package is set \nto be compiled as a separate assembly.",
            "Let me explain now, probably I will be not happy."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo now you see our realty package has initial setting compiled into a separate smart.",
            "This option means that our\n\n--- Page 17 ---\n\ncontents that we design in our.",
            "Oh, Monica, you have to leave.",
            "Thank you.",
            "Thank you."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThen we have method inside of it and you can see oh, this method is a constructor.",
            "Okay, not so interesting.",
            "This \nmethod is implementation of our script task.",
            "As we did not name our script task into something useful, then this \nscript task has named Script Task 1.",
            "Let me show you our process."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nBut until we are not using any like reverse engineering tools, we probably will not be really successful with analyzing \nthis code.",
            "But you may just trust me that finally this code includes business logic and our class stuff here.",
            "Okay, so \nfinally we compiled our solution.",
            "It turned out into a DLL saved on disk.",
            "This DLL is used as part of our application \nwebsite."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo we have this set of C files and bin folder here turns into this DLL.",
            "So now you see 11 megabytes of executable \ncode, which is quite a lot.",
            "And this is result of compilation of big number of base product packages that finally form \nthis dll.",
            "So recompilation of such DLL takes much longer, probably three or four times longer than compiling of \nseparate assembly."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nYes, I understand this idea, but I do not like this, because it will be not clear for me at what moment of time this \nparameter will initialize its value and at what moment of time this parameter will change its value.",
            "So possibly we \ncan do this.",
            "You can try.",
            "And each time when your read data changes or it gets new results, your parameters should \nhave corresponding mapped values from read data."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWith this formula, if we use parameters directly mapped to read realty, it will be not clear for me when exactly \nparameter will be changed.",
            "And so I think that our example will lack obviousness and lack visibility of what is going \non.",
            "And is it more secure to use formula?",
            "Oh, I think it's the same.",
            "So it should work when you map parameter \ndirectly, but mapping parameter directly."
          ]
        },
        {
          "heading": "Speaker 2",
          "key_points": [
            "# Speaker 2\n\nI have a quick question about the."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nDLLs if that's okay.",
            "I do."
          ]
        },
        {
          "heading": "Speaker 2",
          "key_points": [
            "# Speaker 2\n\nIs it possible when we're creating them this way that we can call other DLLs maybe outside of this package?"
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOkay, we can.",
            "Sure it's possible.",
            "Let me show you.",
            "We have also process level methods."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd this will be normally compiled and executed.",
            "So it's quite common thing how you can add Other libraries and \nnamespaces with usings and these usings will form into.",
            "Let me show you pkg configuration pkg Then your \npackage, then your source automatically generated source."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nBut in real life, when you do development of your own solution, of course you will get compilation issues, you will get \nerror messages, so you will have to go to your code, find corresponding lines, fix it, save again, publish again, and \nfinally you'll have to make your process work normally.",
            "Please note if your system is saved in a state, that means you \nhave compilation errors.",
            "You will not be able to apply any changes in compilable area until you fully fix your issue \nwith compilation.",
            "So it's better and it's like strong advice for you."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nAnd you will not be able to easily apply changes in your compilable stuff because each time you try to compile you \nwill get the same errors.",
            "So it's recommended to keep your system to be saved in a healthy state when any \ncompilation finishes successfully.",
            "So we already have some part of our process which finally performs some \ncalculation.",
            "We can register our process at our section."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nI understand we are going a bit behind with the schedule and today we will spend maybe 10 or 15 minutes more.",
            "So \nthis is our page design.",
            "My plan is to run my process by a button, but I predict that I will have a bit more different \nactions, so possibly I can use a button with sub menu.",
            "Let me show you how we can do this.",
            "For example, we can \nput a Button somewhere here modify its size, style and title like actions."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThis will be our action title Action value will be run business profile process this one run process which process to \nrun calculate average reality price.",
            "And we have different modes to start our process regardless of the page means \nwith no parameters for selected page means for edit page data and it means we can only pass record ID as \nargument.",
            "This is good for us.",
            "And also we have new mode which appeared recently the selected records in list it \nwill get list argument."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nIn previous versions this drop down showed all the columns or I mean all the parameters and generally it's not good \nbecause all parameters included integers included decimals so not suitable for grid and we only now see some \nfiltered stuff.",
            "So realty will be recipient of our ID of currently edited record.",
            "And as you can see this is a no code \nsetting so it doesn't require any special coding for us."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nWe can rename it so menu item cog average price just to make it easy to find if we ever needed to find in our view \nconfig diff so as you can see this action is quite easy to do.",
            "Let's go back to actions list and we can check how it \nworks.",
            "So action will be always available.",
            "We can just save this page.",
            "Also in recent version we had an unique option \nto run processes by for list for selected records in the list."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo let's make one more bulk action like cultivate average price.",
            "Our action will be again run process where.",
            "Oh, it's \nmy fault, I do it incorrectly.",
            "Sorry for this.",
            "Not."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nLet's just start to test it.",
            "So we can close the editor.",
            "You can also close this one.",
            "Maybe let's reload just to fight with \nany possible occasion of browser cache.",
            "So let's calculate something for houses for sale."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSort by date of start, read set formulas, calculation finish.",
            "It looks like everything went correctly here.",
            "We do not \nknow exact values, exact numbers.",
            "We will study debugging of it tomorrow.",
            "Now we just make sure that the process \nstarts and normally finishes."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nOkay, so this one is our list Selected data Calculate average price successfully started.",
            "I expect to run only one \ninstance of a process here.",
            "Yes, it was correctly started seconds ago.",
            "We can see all the steps were done.",
            "We can \nalso see execution diagram which will show us these steps executed."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nBut in order to make this example fully working, we need some more items and we need debugging to make sure \nthat our code works accordingly our expectations.",
            "I just wanted you to see how we can run this calculation for \nmultiple scenarios.",
            "For example, houses for sale, houses for rental and apartments for sale.",
            "We have three selected \nrecords.",
            "We can run this process and I expect to run three instances of processes."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nYou see start and end date is status.",
            "We will see how you can how we can debug this especially C sharp part and \nalso how to check its performance.",
            "So today's session is over.",
            "The most interesting part will be tomorrow when we \nwill run this process and display some data and also how we will debug this process.",
            "Thank you very much for your \ntoday attention and education case."
          ]
        },
        {
          "heading": "Speaker 2",
          "key_points": [
            "# Speaker 2\n\nI have a quick question, if that's okay."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nYes, yes, please."
          ]
        },
        {
          "heading": "Speaker 2",
          "key_points": [
            "# Speaker 2\n\nIt's just about business processes.",
            "So at the moment we're tying them to.",
            "We're binding them to buttons."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nIt's possible, sure.",
            "But I try to keep it simple and use it as possible of no code.",
            "That's perfect."
          ]
        },
        {
          "heading": "Speaker 2",
          "key_points": [
            "# Speaker 2\n\nI understand."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nI'm just curious manually.",
            "But yes, Later I will show you how we can trust trigger some business logic that will start \naccording to data change.",
            "So we will do data change and for example insert of new reality.",
            "And then we can run \nsome business process that will start only in certain conditions.",
            "And for example, only if house or apartment for \nreality was added."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nSo you can do it in much more complicated way and trying to keep it simple.",
            "Because we are studying."
          ]
        },
        {
          "heading": "Speaker 2",
          "key_points": [
            "# Speaker 2\n\n--- Page 22 ---\n\nThanks a million."
          ]
        },
        {
          "heading": "Speaker 1",
          "key_points": [
            "# Speaker 1\n\nThank you.",
            "See you soon.",
            "See you tomorrow."
          ]
        }
      ],
      "code_sections": [],
      "languages": [],
      "key_concepts": [
        "module",
        "entity",
        "json",
        "schema",
        "detail",
        "page",
        "data",
        "customization",
        "configuration",
        "client"
      ],
      "keywords": [
        "ui",
        "process",
        "speaker",
        "like",
        "code",
        "classic",
        "data",
        "freedom",
        "page",
        "freedom ui"
      ],
      "topics": [
        "speaker"
      ]
    },
    "method": "hierarchical_structural"
  }
}