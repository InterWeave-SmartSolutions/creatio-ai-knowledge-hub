{
  "video_id": "a76b4482f3f4",
  "file_path": "ai_optimization/creatio-academy-db/developer_course/videos/Recording8.mp4",
  "title": "Recording8",
  "duration": 0.0,
  "transcript": " Today is session number eight of our development on creation platform guided learning. And we will continue to work with server side features and functionality. So today we will focus on web services, making our own classes at creation server side and make it work at the web service, right C sharp code and practice with calling of web services from creation site and from third party applications. So today is quite, quite big plan. I hope we will have enough time for this. So possibly we will spend a bit more than two hours. I will try to squeeze it into our today session. So what about web services and why we needed an in general. Observices are server side items. The tuition is in the call from client side with the help of HTTP queries. So when you look at your network tab, for example, when you open any record page, you see plenty of different service requests with different HTTP calls that were executed from server side. So from client side to the server side is different request party with different responses. And in general, all our website operation is set of different queries, different HTTP requests and then getting some responses at client side. Creature has a lot of embedded out of the box. The services, some of them are system, the services, some of them are developed at configuration. And we can create our own web services if necessary. So we can do some certain functionality and it will be much more efficient than to do the same functionality at client side. Because client side is less safe, less powerful, not so fast as server side. So client side definitely is not the place where you would like to perform some sensitive data operations or calculations. So server side is a natural place to do some complicated business logic, like doing some calculations, data processing, file processing, and so on. So web services can be created in configuration. And if you're interested, you can look at existing examples, if you search for C-sharp sources, that contain the word service in their name or title, conditioners contains. You will see a lot of examples. You can randomly select any item and you will see some C-sharp code inside. So the reason why we have so many web services is need to have and to run different functionality at server side. Usually it's written in C-sharp. And today I plan to explain how you can create your own web service, how you can make it to run, and how it can be useful for you. So we have a lot of existing examples. But the most important you need to remember that web service is a special piece of functionality that was specially designed to be called from client side. And this piece of functionality usually has no own user interface. It can only be called the help of HTTP queries like this. You can see examples of HTTP query. Here you can see request URL, request method type. You can see some payload, which means data parameters you can see some response, and so on. So in general, web service is something that we can call from client side, which works at server side. Usually it gets some argument data. Usually it returns some result data and also makes some useful work at server side. And that's why we needed so it's a very common functionality to use to run different business logic. We have a lot of standard-based platform web services. Like web services to get data like this one. This web services called data service. We have a lot of other web services like file API services, like system-setting services, and a lot of other services, so probably hundreds of them. And also, creation configuration offers us a ability to build our own web service, to provide our own server side functionality that can be called from client side. And it's not, doesn't matter which kind of client side you are using. Is it free-don user interface for if it's a classic UI? So you can use web services absolutely the same because server side is only single item and requests and payload and response data will be first and will be processed absolutely the same way. So we will study how to make our own web services. I also want to mention that server service can be used with a third-party application. So this is a tool. How other system may call some functionality at creation and may probably transfer some arguments and then get some results. So we will study how to do this and before we continue, I recommend you a couple of very useful examples. As you can see, we have better examples here in basic integration. If you random this select, then you'll probably will face unnecessary complex examples, which will be hard to use it for training purpose for your study. So that's why I recommend you to use couple of very useful and simple examples. First one is a crypto. Cryptographic service located in CRT-based. So it's a base platform item and it will be found in any creation system. So you can find it at any environment. You can open it to see its code. So physically this is a C-sharp source code item. This of code written in C-sharp and then to be compiled inside of a package or inside of an application. By the way, it's interesting. CRT-based seems to be a package that is not compiled as separate as somebody. Yes, so it means that contents of this package will be compiled in all terms of configuration. So then you will have terms of configuration, DLL as a result. Okay, so this is a simple C-sharp code. As I told you at the beginning, it is expected that creation developer has some experience in C-sharp in JavaScript and also in SQL scripting. So here your C-sharp knowledge will be requested, it will be important. So physically what we have here, we have a class which is declared in the C-sharp module. We have set of usings and also namespace decoration. There is a tradition to put your custom classes into the result configuration namespace, but you can also make your own namespace and put your logic there. So it will work absolutely the same. We use a set of standard, based platform and system namespaces that are necessary to declare our class to use some functions that we need inside of it. And mainly all this stuff is made possible thanks to system service model namespace. And I need to say that creation uses .NET framework back to create web services based on WCF, Windows Communication Foundation web services. So there are several conditions how we can make such a WCF web service. We have to declare a class. In our case it's recommended strongly recommended to inherit it from base service. I will explain it a bit later why this is so recommended. But generally you have to create a class and decorate it with a special C-sharp attribute. Service contract attribute and ASP net compatibility requirements attribute. And then inside of this class you should make at least one method to turn it into endpoint. So something that we can call and this endpoint must be decorated. This method must be decorated with operation contract attribute and some additional web and ball attribute. All such rules how to make it were delivered from WCF. So it was not invented by creation developers. We just used WCF based approach for making creation web services. So when we have such class decorated with attributes, when we have at least one method decorated with corresponding attributes, when we compile our package or when we compile our full creation solution, system will make DLL based on it and also it will host. So it will register and points and it will host our web service at our website. So after compilation, this service will be fully operational and it will be ready or calls that will be done from client side. It could be done from creation or client side or even from third party applications. client side we will demonstrate how you can use it. So I will show you. So the main reason why we need to chose it is to make some functionality. It can be easily called from client side of creation page or from client side of third party application. So we can also use it for integration purpose. Okay, let's look closer how it general works. We can create at least one method decorated with attributes and it makes sense to organize some kind of attributes that will be fast into this method and get some results back. Also we will have some business logic functionality that also can include access to database, operating with some files, running other web services and so on. So we can use some useful method body. But in general, you should expect that web service method can get some option parameters, can return some results. If your data type of arguments and results, if this data type is simple and standard like string, decimal, integer, GUI or Boolean or something like this, which is very easy for creation to decode it to parse. Then you need no additional settings and the system will be capable to run such a service and you will be able to transfer such relatively simple parameters as arguments or get result data. But it can happen that you will need more complicated arguments like structures, like instance of classes objects and so on. And you may need to return some complex responses and complex result data. As an example, you can see when we run some query at our creation list page, you see some request and response, which usually includes a lot of properties, a lot of different values. Definitely for such complicated request body, we need some classes and we need to organize it in more or less structured way. And also response usually includes a lot of additional subordinate properties, values and so on. So it's also important to have a corresponding data type spread. So in case if you transport as arguments or get as results, complex data arguments, you need some additional classes to that WCAF, know how to de-sidialize of arguments and sidialize of results. Why I'm saying about sidializing because server side will be a DLL, a library with a runtime code, which will be capable to operate with some data with a certain data type. When client-side calls a web service, it usually packs, so parses, maybe encodes your arguments into a stream. Here you can see an example of a big JSON string. So when server side receives such string, it must know how to convert the string into an instance of a class. And this procedure is called de-sidialization or de-sidializing, which means getting a string and then converted into a class instance. This de-sidializing should be done according to some class information and that's why we need a definition of the class which was used to transfer this data. The same task will happen when server side already finished the execution of a method and needs to return some data. So server side return data also represents some class with some properties and then it's necessary to serialize it back into a string because originally, HTTP query will transport some string for you as a result. So sidializing and de-sidializing is an important part of any web service call. And in case if your data is complex, so system will fail to de-sidialize it without additional information, you should use special classes, such as data classes. Let me show you another example. So let's remember, first one is cryptographic service, which I recommend you to look at as a very simple and very useful template for your own services and one more a bit more complicated data. No, no, no, no, no, no, no, no, no, visa data service. We need to look at all packages. Visa data service service. It's a good example. Of a web service, which is designed to get some arguments and return some results using complex data type. In this example, request options is an complex argument that is provided as an argument for your method. So we need to find corresponding class somewhere here. These classes call request options. And you can see that in case if you need to transfer complex data arguments, you must relate such a data type, such class for your data transfer. And you must decorate it with data contract C-sharp attribute for a class. And data member C-sharp attribute for all fields or properties that you plan to see their lives, that you plan actually to transport. So this is example of a much more complicated arguments for your data transfer. And if you need it, so you have a lot of examples how to do this. You have samples in creation. You can easily open it and find it. So don't forget about this visa data service. It's a bit more complicated example. So it will really work well for you. Why you need such examples? Because it's really hard to remember all necessary settings and implement it just by your memory in next example. So decorating a class with such attributes. Decorating methods with such attributes, it's quite hard to remember. So I prefer when I need to create my own new web service. I prefer just to copy and paste some pieces from this example. It works well and it saves your time. So I think it's one of the most efficient ways to create your own web services. Now I will show you how to make our own web service, how to use Visual Studio for its development, to make it more efficient, to make possible development of complicated functionality. This is a powerful editor. So let's do our own example. And also later I will show you how to run it from Creationsite, from Freedom UI, from Classic UI, and also from third-party application, like Postman. Let's go to our Freedom UI package. And our creation of the web service starts with making of a new C-sharp source code item. We can create it only from embedded editor. So we select our package and source code. When doing it, it makes sense to provide some good-looking friendly name, because this name will also appear at file system. It will travel to version control. So having this name well-spiled is a good idea in general. So let's call it a reality service. And we can make the same title for this source code item, save in our package, no description, and just apply. So as you already remember from yesterday's example, with handling object events, C-sharp source code item is just a big set. So it's just a code, part of a C-sharp module, and possibly you can also add some recognizable strengths into it. So we can put our code here if you work in cloud conditions, or I'll just put some simple code if I work in my local environment. I have to save this item, because we need to properly organize and make this item save before running official studio to make our development. And now I need to explain you some business center. So my plan is to create a web service that will work at server side and will be capable to calculate maximum price of reality objects, filtering them by type and offer type. This is important because it's not good idea to mix apartments, houses, parking, and so on. And also it's a good idea to filter by offer type because it's definitely not correct to mix rentals and sales. So the business sense of my web service will be to do some database calculations to do some operation with database. And also it will work as a good example for you how you can use alternative ways to operate with data without use of object model. So let's move on. Here is our C-sharp item. Sandemme code is here, no localizable strength so far. Okay, great. We can, as you can see, we have a star here which means not all the items were fully saved on disk. So let's do this. Download packages to file system. This usually is a save action. It helps us to get all things right at the database. Now you still see this star. So sometimes you will get this star, but it doesn't show that something is really missing on your disk. So sometimes we have scenarios where the star doesn't disappear, but in general everything is okay with our data and all the stuff was saved on disk. Let me show you what you can see on disk now. So we go to our app folder, tells of the web, tells of configuration, pkg. Then we go to reality package folder, skimus, reality service. Now you will see some metadata files. I strongly recommend you not to modify anything manually here. And C-sharp file which we will fill in now with the right good looking code. As usual, I prefer to use local environment, advanced which and one of them is user file system and user external editors. So we can use Microsoft Visual Studio and using community edition to operate with this code using external powerful editor. And previously we worked with reality events. Now we have one more item here. So possibly it will be updated quite soon. Now you see some realty service code and it's just not set properly. Okay. So let's do something here. As you remember from yesterday's session, here we have full support of IntelliSense, auto complete, and you can put user system, service model and so on. I already have an example which implements all this logic and that's why probably it makes sense to do it faster. So let me show you. Here is my example of code. It's too big to fit into one. Zoom message in chat. So we try to fix it. And two messages. Okay, this one. And another is this. Okay, good. So now if we want to can get it from chat message, so I will put it into my C-sharp code. When I develop user visual studio, finally, I must save my changes. Otherwise, creation will not see it and will not include it into our compilation. What is inside here? This example was originally made based on cryptographic service example. So I copied this part. I copied this part from it. And of course we have our own name for the class. My class is named a reality service. Resident Tradition of creation developers to name classes which represent the services with the help of service suffix. So if you do something, when you develop C-sharp class for the service of it, it will be do something service. And it's quite common tradition. You may find a lot of examples in base product. So we made a class, reality service, and inherit it from special base service class. I need to tell you a couple of worrying sentences about why we need to inherit from base service. And generally, the most important reason. So let's go and use visual studio tools to help us to understand what web service is. So we can click here. You can see decompiled sources of base service class. And because it's name space, it's a bit common, provide it as a DLL. So actually we don't have original services of this class. But thanks to deconpulation features of visual studio, we can see some code from it, at least in the face part of it. And it has a lot of useful things. And the most important thing is property that is named user connection. Let me show you. A lot of libraries. Struct class for service. Yes, this one. The most important property, user connection. So user connection is a reference to a class that keeps context of our current user session and current user connection to the database. As you remember, user connection is used always when you operate with the database. And it's used in many other places where you have to provide some current user credentials data and current user session information. So if you make your own web service without inheritance of base service, you have to get this user connection, for example, from HTTP context, you are self. Let me show you. Here you can see examples. So we have HTTP context. Usually, like this. And this works only for .NET framework question. But also this code and this application may run in .NET core conditions in, for example, Linux operating system. So for Linux, there is another way of getting user connection. And this base service class helps us to hide all this complexity of getting user connection reference. And we just use it as a property. So you can see examples here. This property user connection is inherited from base service. And you feel no troubles. So user base service is strongly recommended, especially if you plan to make your solution that will be portable, so it will be transportable and compatible with .NET core version on Linux. So inheriting from base service is strongly recommended. We have also other useful properties that now you should remember that inheriting from base service helps to get user connection and helps to get initialized properly. But your method started. Your user connection property of your class will be already initialized. This is important. Also, next, what you can see here is a strange interface named iRidonlSessionState. This makes sense only for Windows and doesn't make any difference for Linux. And this is a marker interface, which means it has no methods. But it tells to the iIS that your service has no code thing say that changes session state variables. And if your code does not change such session state variables, it means that iAS can afford running your methods simultaneously, utilizing multi-thread support, utilizing multi-core CPU, and generally making your service calls processed much faster. So in general, declaring of support of this interface costs you nothing because you have no methods to implement but it tells iAS that it can process your web service calls with the fastest possible way. So in general, it is a good result for high load conditions and for for situations when you have performance issues at iIS because of multiple calls or the same service and not so fast-throsis in the inside of this calls and just for better performance. So I'd recommend you to use it. And if you are curious, you can also find how many times let's go and make some research. We look at all types of configuration order and for the beginning we can search to find any, not any, all files that include service contract attributes. So now I'm searching through C sharp files which include service contract attribute. And then we'll find approximately 200 of services created out of the box and create studio project. Okay, 157 files and possibly a bit more with services inside because one file may include more than one with service. But in general, okay, so 157. Now let's search for iRidon.ly session state interface usage. So now we find only 54 places where this interface was used. In general, it is recommended to be used for any Windows based creation of service and there you see that each time when developers modify some code when they improve existing web services, when they rewrite such code, reorganize it, refactor it, they usually add such interface decrypting and decryption into code and that's why from time to time, the number of such items is increasing from release to release. Okay, so this is only for better performance. What we have inside, we have some method but probably I have to start with this. This is a simple method which is just gets no argument, returns some string and is organized as a web service method because of operation contract attribute. So tells to WCF that you have to turn this method into endpoint and register it at our website. And we have setting get HTTP method, the easiest possible way to call a web service. So we will be able to run this web service from browser address bar. The reason why we do this is to make sure that our service is normally posted, is normally operational. So our compilation was successful and the node troubles with server cell. So this method is only to check availability of our class and power web service. In general, you can create a lot of other methods in your class and some of them may be well be decorated with operation contract. If method is decorated with operation contract, it will turn into endpoint. If you have just a single method which has no decoration, it means that it will be just a regular method that can be called by other methods but not by HTTP query, not an endpoint which is registered at our web server. So as you can see creating of web services in WCF is not so technically complex, especially if you understand how to write C sharp code. So in my example, I have two methods. One of them is very easy to get example. So this is just an example of a method which will return us OK string. And if we get it, it means that our web service is present, normally compiled and fully operational. This method gets max price by type ID. So I decided to name this method like this. We'll go to the database and search for a realty writer to his corresponding type of her type and also I plan to make it more universal and to call my service from different sections. That's why I need to transfer my source table which I plan to use for my calculations. So for freedom UI section, my source table will be USR reality and for classic UI example, I will have USR reality classic. So different source tables but very similar columns, similar conditions and filters. And that's why I will use the same selection statement to work with different tables. Inside of my code, at the beginning, make sense to make a very simple check of our arguments. And if any of them is empty, then we will return minus one. So we will do nothing. By the way, we return decimal result and we get three string arguments. So we use only standard data types, which means we will have no problems with serializing and decedalizing and we do not need any additional data contract class. In case if you have more complicated scenario, of course, it makes sense to use data contract and so you may pass much more parameters, properties and you can easily extend such structures. Okay, we have several arguments. We check it out if they are empty or not. And then I will show you another approach to get data. Previously, you probably remember we used entity schema query. Approach to get data. Let me show you business processes and calculating average real to price. It was a couple of days before. And we used this code and we used entity schema query class to make data selection. And then we processed it with forage statement. And we used entity data model here because as a result, we get collection of entity collection of entity class instances where we have special columns with data values and we can get such values from each data row. So this approach with support of data model worked for us and it respected column names, it respected lookups and joins and access rights restrictions and so on. Now I will show you another approach to operate with data which will not use data model at all. So this is alternative approach to operate with data. But of course, we need to know source table name here entity name is used as table name at the database. Of course, we need to know exact column names and also for lookups. You need to remember that at database, corresponding columns have ID sathics. But at your object level, such columns have no ID sathics. Let me explain what I'm talking about. Let's go to objects find our reality. Freedom UI object. And let's take a look at type column. Now all the columns will be loaded here, USR type. This is a lookup column named USR type based on the reality type lookup. And we have a dropdown list here. And as you can see, no ID sathics at column code. But when you go to the database, let's go and check our database. D1, you can make filter for tables and change USR. Now we have just little set of tables USR reality columns. Now you will see that type column has sathics ID. And you may also notice such sathics ID for author type or city, for country, and even for created by ID and modified by ID. So for any lookup column in your object here, system creates corresponding grid column at the database table. But let me show you. You see that at the database table, it always adds ID to column name. So it's kind of creation architecture. It's not like that it will be changed in the future. So you may rely on it and you should expect exactly the same data columns of your tables. And in general, when you operate with database like this, you must go to the database physically to see corresponding table, corresponding columns, just to make sure that all your columns that you work with are present and so they represent what you expect from them. Okay, in my case, I'm using direct database operation with select statement. It's also possible to use insert update delete and even store procedure classes which will operate with the database directly without user for object model. And the best way how you can study how to use such classes is I think searching or existing examples. Let me show you how you can do this. You need to use some tool that will help you to find out files at file system. You can use Visual Studio Code, or in Usage of Studio, or Total of Commander, or in my case, I'm using Power Manager tool. And inside of TESO of the Web folder, maybe even inside of TESO configuration, we can use search for all C-Shirt files. Where we have, for example, new select class usage, we will find more than 200 examples, maybe even 300 examples, almost 300 examples. And there are a lot of different, so random reselecting them, a lot of different examples how you can create such class instance, how you can set it up, how you can use it, and finally get a result data from it. Let's look at another random example. Maybe not so perfect here. You see, creating an exact example from where it's possible to use hints. It's possible to use different operators like Groove by having, and sometimes you will notice that use of direct database approach gives you more flexibility and more powerful tools than using just entity support and using entity schema clearing methods. So depending on your task, you can choose Roper tool. And this select class works a bit faster because it doesn't include entity data model, it doesn't create corresponding instances for working with entities and in general, it consumes less memory. And I think it will work a bit faster than entity schema curing. So we have a lot of examples of select class usage. I'd like it to see one of the best examples I think, this one, it's like Canonic iconic examples. So here you can create class instance, then you already finish with settings and filters. And also it's important to mention, you create class instance, and then in order to set it up, you use different methods like top method, colon method, maybe many time, from method makes to run at one time, where method is equal method and the order of others. So finally, running such methods. Well, configure your class to read corresponding columns from corresponding tables. You can use joins, you can use different conditions and types of filters. And finally, you will have select class. You also have to turn it back to select type. And then you can use it for data selection. Data selection might be performed into steps. First, you need to ensure the B connection. Physically, it means get one of the three database connection threads from thread pool, from connection pool, because connection to database is pooled, and you have like set of available threads for it. Then you take it, and this is the B executor reference. And then you run your select statement with the chosen DPS executor. And finally, you will get data reader. This data reader holds your data and offers your possibility to process it row by row. And you can run its read method to get next line of data. And you can use get colon value method to collect corresponding result values from your result data collection row. In case if you have many rows, you can use while or if statement or something else which will organize your cycle. So while read returns you true, you can try to get some data and you can put it somewhere in order to analyze in future. So this tool is helpful to get data selection with many columns, with many data rows. And also you may notice some strange things here and here. Normally C sharp code correctly operates so its data allocates and releases memory with the help of garbage collector. But here, as you can see, developers do not trust into garbage collection. The reason is when you run ensure the B collection or when you run execute reader some subordinates functions are executed which are implemented in visual C and they implemented as a non-managed code. Simply speaking, attempt to get some data from the database runs some code that is part of Microsoft SQL Server client software written in non-managed way. And that's how that's why you need to handle memory yourself. So when this method was executed, some memory was allocated and in order to properly release it, you need to dispose created a class instance. You need to dispose this to be executed or you need to use special using operator which will do this dispose automatically when this code finishes its work. So you need to correctly dispose memory from ensure the B connection and also dispose memory after executing reader. If you will not follow such recommendations, your code will be compiled and work in almost normally. But in high-world conditions especially in high-world conditions when there are many calls of the same logic in sure period of time, you will notice so-called memory leakage. This leakage will look like enormous memory consumption in your system resource or now you see one gigabyte so 900 megabyte, it's more or less okay, but you may see much more memory up to all of your available virtual memory and when it will come to a certain limit, IIS will suddenly restart your website. And you will not know why this happens so it will be very unusual for you and the reason is that non-allocated so not dispose memory will be leaked and so you have no way how to fix it until you will make this using operator protection. So you may find a lot of examples where creation developers do ensure the B connection and supporting it with using operators. This is mandatory. If you do not follow this, you will have memory leakage. And this works well for selections of some number of columns and number of rows, but in my example, you may notice that we don't have using protection. We just use execute-scalar method, which is a genetic method and it accepts expected data type of our result. And execute-scalar is useful in case if you plan to read only one data row and you expect to read only one column value there. So execute-scalar returns you first row and first value of the first column that you select. In my case, running this aggregate function guarantees that I will have just one data row. Having only one column in my columns selection list is obvious and I will get only one column as result. And that's why execute-scalar is perfect for such scenarios. All necessary protection to use using for two methods for data selection is already performed inside of execute-scalar. You can try to see it with possible to decode a scalar as seen. But let's see, you see decompailed stuff. The executor you see using. Yes, so first using is already used here. Ensure special the executor. Then internal execute-scalar sync. Probably here. Faveover execute. And somewhere. So you probably may find another using here in this decompailed code. But you can just trust me that execute-scalar performs all correct operation with memory. So you do not need to handle and to care here with additional protection. And finally, it returns you expected data type value. In my case, this is decimal and this is our maximum price from some records where type equals certain argument and offer type also equals to another certain argument. So this is quite simple data selection procedure which makes one single SQL query and runs our data selection. So my example here is not only how to organize your observance, but it's also how to operate with the database and how to use alternative data selection approach with some data that we expect to get and return. I tried to make it simple without needed to collect many data records with many data columns inside of it. If you want, you can find more examples and base initial sources and make more complex calculations. This example just shows you general approach. And you can see we have user connection as argument. Thanks to base service class, we get this user connection as a property and this property is ready for use when at the moment when our method is called. So WCF and to our base service class makes all that is necessary to initialize user connection at the moment when our customer runs this HTTP post method. By the way, we used post because it's very common for creation. You may find that for example, we can search for all sources where we have just get method information. We will find probably 15 or 16 places including so 15 base product places where get method is used. So you can see not so many. We have 150 plus examples and only 15 base product examples. And when we will search for the post example, we'll find more than 150 examples because this is very traditional, very typical to creation. For creation to use post, it offers us quite comfortable way to handle data. We can set our lives almost anything as a post request body. So post request data. That's why it is so comfortable. And also it's well protected. It's better protected with security settings. Again, if we compare it with get, I will explain and you will see it later. So post is very typical. And okay, when we finished, we can save it. All the code samples are available for you. So we can save this code. As you remember, compilation must be performed inside of creation. So our code is ready. We can just check that columns are the same as we expect to get it. And let's go back to our app and select our package. We can also see our recent 3L2 service item. It has all these code already. So it was loaded from the file system. And we can compile it. Confiling package makes correction of all of its sources, including automatically generated items. And like process code, if processing goods, C-sharp, brick tasks. And then it performs compilation of our CS project. So this one, this C-sharp project will be compiled. We have several compilable stuff here. We have set of assemblies used in this project. And that's why we can compile it normally without any error messages. And in general, this compilation was quite fast. But in your case, probably, you will face some additional difficulties, mainly caused by of assemblies, lack of some references, or just incorrect code, which operates with classes, which were not mentioned in usings. So in my case, compilation was successful. And in case if you will have compilation error, you will see a big error page with information about lines of code, type of the error. And you will be able to look at it even after you go to this page. You will have a special button in this list, compilation error. So developers tried their best to support you. And if you have some troubles, you will be able to look at the list of the troubles in order to fix it. So once our web service was successfully compiled, it is already hosted at our application server. And we can easily check it out. So we can check with get example method that our service is present. Let me show you how we can do this. We can use our browser to run get HTTP queries easily. We need to get our browser URL, copy, go to separate tab, paste. So this is my web server address in good and zero application address. This is zero is very important. But may remind when we register our application, our website at creation at IIS. So I have a structure of default website, which uses port number 80. Then I register at my D1 studio app, this one is part of your URL. And then we have a zero application address for main application part, which is physically saved in terms of the web folder. So this zero is very important. You will face it almost everywhere when you compose your URL for creation. So this zero is pointing to main application part of creation platform. If you run creation on Linux, you will not see this zero. On Linux in dotnet core, we have all the stuff placed in one root folder. So it's a bit different, but all creation configuration will work absolutely the same. So we have functions that should return main application URL. And for Linux, it also returns everything correct. So don't worry, if you write something and run it on Windows, there is a very high chance, but it will also normally work on Linux. Okay, so let's move on. We have this main web server part of your including zero application address. What's next? We have to use special word that is used for automatic registering of all our configuration endpoints. So this word is rest, L-E-R-T. Okay, rest. But then we have some standard how the A-Show registers all our endpoints and it uses class name. Let's go to studio, find our class name, copy, paste. So we use zero, slash rest, slash reality service, slash method name. If you use your I template, your method name may be different, and then your call it your I will be different, but in my case, it's very simple. I will just use this get example method name. I'm lucky to have no arguments here, so my query will be not so far too. I will copy this URL for you, so you can also practice and check it out how it works. And let's move on. Let's check. Also enabling browser developer console, go into network tab, clearing all the console. So let's see how it works. I press enter. Now you see that my get example was successful. 200 means successful execution. Here is my full request URL. I have some request headers. I have some response parameters, and here is you see my response trace on string return with some data. It looks like everything is okay. So this is a very easy and the quiet practical way to check the validity of your web service. For example, if you have compilation issue, your web service will not be hosted at creation of observer, and your query like this will return you 404 not found. So to show you that there is no legitimate service with this address. So in my case, it looks good. And it was get query, which is very easy to get from your browser. But our main working query is a post query, and we have to make a special steps to do this from our creation page. Let's make a five or seven minutes break. So just a quick, I hope to make it quick. Understand some of you have other plans after the finish of the session. So let's make a seven minutes of the break. And then we will move on with calls of our service. We will make call of the service from creation page. And also I will show you to make how to make it from ridom UI page, from classic UI page, and from third part applications. In case if you will have questions, please type in your chat and we'll answer. So let's make a quick break right now. So today, now our task will be to call creation of service from our client page. How can do this? You already probably guessed that we'll have to write some code. Unfortunately, we still don't have no code options to call a web server like we start a process, for example. So possibly we'll have something like this in future. And now we have to write some code at our creation client side in our browser JavaScript, in our browser page, a JavaScript part. So let me show you. I already had all of the examples. It will not take too much time today. So I will show you how we can call the service from creation client side. Of course, we need to go to our page code. Let's go to edit page. And then we can open its code. Also, I can show you faster way to open source code. And save and open it. Or you can go to client module. In my case, it's a reality form page. You go to this right part, this actions, three dot button. And then we have open source code action. I think it's more practical and faster than to do like this. But okay, I will recover closed page. This one relative one page. Okay, at least one. Let me show you what we need first. So we need first some button that will start our code. And then we will implement it. So that's why I recovered this page first. Let's go to our actions menu. We already have one item here. So we can create another one. Another menu item. This menu item will code, calculate max price. And the action could be just some random action that we need temporary here. Because we will replace it with our own program method program handler. Let's use in data. Let's use icon. Let's do some some. You can use some kind of things. Okay, let's take this one. So we will use it for calculations and element code. Okay, let's call it. Code max price menu item and confirm. So and then we have to save this. Our menu item will appear in actions menu. And then we go to its code part. So let's go to open source code. You can close this editor. So not to accidentally save anything. Let's search for our max price item. And as you can see, this is somewhere like number 116. So here we have our menu item in the euconfig div area. And we will just remember this line 116 because we needed a bit later. So let's collapse. Your config div, your model config, collapse everything. Now we will make one more handler in our code. So please be careful. I put comma. And I plan to paste here an example of handler for my calculation. Example over the service code. I work from 3d, you know, example, random service in 3d, you know, so this code will be quite big. I will copy it into parts for you. But first of all, let's pay attention on the definition of our module. I copy it for you. So you'll be able to reproduce the same. So in this line where we define our module, we started to request one more additional module named create your devkit common. This module is kind of utility set of tools in which includes a lot of useful things including HTTP service. So we requested this module to be created in our dependency modules list. So our required GS framework will first look at this array, find this array item, create its instance, return it as an argument when our factor function will be code. So we can call it SDK. As we did it here. So we call it SDK here. And if you forget about line number one here, your next code samples will not work because we will have no these utility modules. We have this SDK now and it's time to implement our handler for our menu item. I will copy and paste it in parts for you because Zoom has limitations on size of code that is possible. So size of chat messages. Okay, three parts. And then of course I will copy it fully into my hand layers area. Here. Take and care about commas. Take and care about syntax. If you do some kind of syntax mistakes like this, you will immediately see this parsing error. So please be careful avoid such errors and provide correct indentation. Don't forget about any trace here. And now I have to explain how it will work. So this is one more handler in my handlers array. And this handler has its own request properties. So it's a handler name. And you see there is a tradition to name your own custom handlers with usr prefix. And base product handlers are usually provided with CRT. Okay, we can name it as we wish. Then we have a handler implementation as a synchronous function. So this function finally makes some useful code for us. And first of all, we do some console output just to make sure that our button, so our menu item normally worked. Then we have to compose some arguments to call our observes. And the main idea is, so we select a page which already has type value and offer type. So if we selected for example apartments for sale, we have this type value and offer type. That's what we need to run our observes. So we plan to get type from our page. But when we operate with it, we will get an object in JavaScript. This object will encode several properties. And if we need ID, of selected data record, we will look at value property. If you need to look at display text of a lookup value like this apartment, you have to operate with display value property of this object obtained from a lookup column. I also need to make sure that I'm using correct names. Let's go to view model config, sort for type. And now we see this attribute name. I will collapse unnecessary parts. So you will easily see what we have here. So we need to look here type. Represents this attribute name. So I have to copy it. Find my handler and paste it this one. So pds usr type and there is a unique name for this attribute. So that's how we will get with a wait operator. We will get our type lookup value, which represents an object. And if this object is not empty, so it's include something, then we will try to get value property. In case if it's empty, we will keep it clear. So we will not use it. The same is for type. Let's go and find offer type attribute, copy, paste. And we get offer type. If it's not empty, we get it's value. This is important to get corresponding arguments for type and for offer type that is required for our service. Now we will use our devkit library in order to get HTTP client service out of it. So we can ask SDK to create one. And that's how we get this JavaScript class instance in our code. We have to combine and collect your URL for our service. I'm using TerraSault. Base, product, client site, JavaScript framework. It's a core framework. You cannot change it easily. And it has some functions to provide web service base URL. So we have this base URL, then we combine path in order to get rest, then class name, then method name. By the way, my method name is called, where is my visual studio here? My method name is called get max price by type ID. I have to fix it. I have to fix it in my code here. Get max price by type ID. So it was mistake because I renamed this map recently. And finally, my endpoint URL will be combination of the base URL, slash method name, slash this rest like template part, then class name, then method name. Okay, great. My endpoint is ready. And here you can see some example of my endpoint. I will name better here. Something like this. Okay, now we have to prepare parameters and perform sending of an HTTP post query. We have the RAMs. This is a JavaScript object with several properties. And it's very important. Property names must match your web service method parameter names. Realty type ID here must match this. Over type ID here must match this and entity name here matches with this. And also I have to fix my code because this one already changed its name, so my object is named usr. Okay, this is important part. And parameters will be passed as a part of our request HTTP request body. So parameters will be encoded into a string. And thanks to this SDK library, it will be done by this method post method, not by us. So we just wait or get response running post method. If you need to run get method, you will have a get instead of both endpoint is a URL. And perhaps is a JavaScript object with parameters. Now you can see we have a synchronous code here. It actually includes two parts, sending a request, then waiting for some time, and then getting response. So physically it may take some time like 30 or 50 or 100 to milliseconds. So you should understand that even if it looks like easy thing and line by line execution, physically it is a synchronous code, which means we send requests, then browser waits, then we get some response. Okay, we got response object, which is a JavaScript object instance. We can look at its properties, the subject will have a body property, and then we'll have property name the same as our method name. Plus result suffix, get max price by type ID result. So this is our max price response. And when we finish, we just continue normal execution of potential other handlers with this typical return. So I had to make fixes in my video and such fixes were not down in the code in our chat. So please take care and modify this code accordingly to the video if you plan to perform your own examples of the same. Then we have to save this carefully because if you have mistakes, of course, you will see it doesn't work. And also let's remember about our your request name and return back to line number 115 or something like this. Let's go. Here we have our main new item, our action item, and we have clicked event with request name. Originally, we set it to some random save request, but of course we will replace it with our own code. So I will highlight it in our chat so don't forget about this. We need to organize a running of our handler by manual changes in our diff view config diff error. This is responsible part. So please be careful. Please don't accidentally remove any break it any comma or so or something like this. So please be careful and then we can save it. Great. Everything saved correctly. We can close this editor. Probably can just close and open the page. So now we have apartment or sale that will be argument. And let's try to find our action calculated max price. Go to network and clear or produce history. So now let's check how to work for us. It looks like status 200 means it was collected correctly, web service runs and returns our maximum price for apartments for sale. Okay, let's see network tab details. This is our request. Properties. This is full URL. Let's create it correctly. We have some request headers, response headers, our request payload. Physically it was a string, but we can parse it and to look at it a bit more comfortably. So here we have all the parameters that were sent as arguments. And we have response. Response was some number correctly calculated by our server site and return. And some timing information. Now you see it's quite fast execution. So two only 31 milliseconds to run. It's a very good speed. Okay, let's look at another example. We have a lot of apartments for maybe houses for sale. Let's search for random house and calculate max price. Now you see it's calculated correctly. We return the data. This is our max price return by our system. And let's check out what was the payload. What is the response? So here we have our response date. We can check it out. If you go to our main list and sort by price. Yes, it looks like 99, 99, 99 million. Yes, it's okay. This is our max price according to current data. So it looks like correct calculation. So our freedom UI page calculation worked well. In case if you have any questions, please ask. I'll be happy to answer. Oh, I want to view to see the same call. How it can be done in classic UI? Some of you probably will do some classic UI customizations. So you may need to know how to do some simple programming steps in classic programming page. Let's go to our edit page in classic UI. But it turns because of our migration into freedom UI page. So okay, we can try to temporarily switch our user interface into classic UI. So use freedom UI interface. Open it. Turn off save. Close. Log out. Log in. Now we see background in classic UI. We go to classic section. Open edit page. And it's also classic. Great. So now I will show you how to program some buttons in classic UI. Go to view and open section wizard. So this is an alternative of what you get used to work with edit page in freedom UI. So open section wizard from this edit page will open as an editor for a button. Unfortunately, you can't easily add a button using this page. So in classic UI, we have a lot of limitations according to controls used on the page. And we will have to use code part for it. Okay, we can go to code part. Here we have classic UI code. We need to look at deep array and add one more button there. Adrien question. Possibility of web service returns. So if it's possible to call a third party app, let's return space 64 and how to handle. Oh, yes. So in case if you want to call third party application from creation, so creation will initialize this call and do it. It's even possible to make a no code solution for this. We will study it a bit later probably tomorrow. I will show you how to make integration with third party apps and how to call third party with services. This is a bit separate from our today topic because today we create our own web service and call it from client side. Third party web services is better to call from creation server side. So you will see, it's quite comfortable. Okay, I'm trying to make a button in my classic UI. So here you see diff array, which represents set of items and each item looks like a definition of one control on the page. In my case, I have name, rise area, rise area. You see, this is area and somewhere here, just nearby, I plan to put some code for a button. I need to steal some button definition from Academy. So I will show you how you can find it. Go to guides. By the way, our training ladies will provide next, so current 813 release highlights with a video that will be released in a week. So you will see some news and it will be so probably interesting for those who keep an eye on evolution of creation tools, capabilities. So now we go to development, front, I don't know, platform customization, classic UI, page, button, examples. So I will find some simple button, button to the page. And I need to copy piece of code, which represents button properties, because it's really hard to remember them. So I just copy this part, paste it into my code. Of course, I will have to fix it. I will have to make it look correct. So comma is missing here. Here is my button definition. And I have to exclude unnecessary stuff here. And yeah, it looks like I have a lot of extra things copied. So this one is proper piece of code that I need to copy. Insert parent name. So I will do it quite fast because probably you should not focus so much on co-secure artists will be just an example. So my parent name will be the same as for nearby fields because I want to put it nearby to area. And values will include location and size settings in layout. And here layout means position and size columns. So this is 0, 1, 2, column 2 for area. Here is 0, 2. Then I will have row 3 because I want to put it a bit below. Parent name is the same button. You can call it run web service button. It will be our button name. Button title button caption should be localized to both string. This editor does not allow me to do this. Okay, that color always enabled. So I will do it always enabled. I will have to rename this. I'm run web service button click. I will have to make a method for it. And the localizable strings should be managed in its editor. Okay, so I will do it a bit later. This is our button. It will have a red color. It will have some caption item type name. Okay, I hope I have no no. Now you will see this button representation here. Go back to section wizard and save. Probably it was not the best idea because I need to implement method for the button. I also need to make my in my classic package. I also need to make a localizable string for the page. So let's make localizable string. I put my button caption. Click the run service. Okay, and try to save. Do we have any troubles with localizable strings? In previous versions we had. Okay, my button caption is okay. Go to deep in order to search for my new button. Here I expected to be presence over here. And caption should be like this. My button caption. Okay, great. A method or click run web service button click. We have to implement in methods collection. So usually you do it like this. Function. And then we have some function body. Now I plan to get examples of running the service in client side. So here is my own run the service button click. Okay, and also I need to have a call that function here. So we have two methods. I will fix it. Okay, so when I need to do this, this is my method name. I use it for a button. And method is in classic right. It's easier way to call some functionality because it just implements some function in your JavaScript object. We will get type problem and get its value. If it's not empty, we'll get offer type and get its value. We'll compose parameters. Let's check our entity name. It's called the real to classic. Yes, looks good. And we can run our web service. Run our method name. Let's check this method name that max price by type ID. Max price by type ID. Okay, great. And we need to provide call back method to accept our result. Because in classic UI, we don't have so fancy stuff like a weight and the tools used here. So your JavaScript of course will run a weight normally, but the tool that we use to call service expects to get this callback function and parameters should be executed. By the way, this tool is called service helper. And we must ask for this module service helper and get its reference here. So this is also an important part in classic UI. This is my set of methods for you. In classic UI. And this is a div for a button. Oh, probably I should care about index, but okay. So it was already saved. Item type originally was button, but one section with our saved it replaced with just a number. So it's a value of that bear or for that enumeration item that we found in our article. So item type this one turned to be a constant, which means five. By the way, you can also study your client side framework. So you can just do a terror stop. Then you see a lot of properties like item. Like to see how it looks like. I view item type. Sorry. View item type. Then you see a list of approximately 30 different options here. So it means items available for classic UI pages. And I guess I used button. So looks like everything is ready. And this is how we use special utility module. It helps us with calling of the services. We have two steps. Call service, which means send request and provide response callback function. And when response will come, this callback function will be called. That's how we will do some console output and show us returned data. Okay, finally, we can save it. In classic UI, we have to constantly think of browser cache. So we have to show the page in order to fight with cache. Now we have houses for sale. Okay, let's make a copy. cheaper one. So we have two houses for sale in our database in classic UI. Let's open. Now you see a button. Okay, let's check how it works. And the web service is the same, but we have different tables to calculate. So let's try. Our call was successful. You see maximum price was calculated. And also you can see history. You see request URL 200 was a post query. We have by word, this is our request body. And we have response. And also it's timing. Timing is quite fast, 21 milliseconds. So perfect time. Very good speed. Okay, great. We are almost done. And now we already practiced with sending of queries from client side. But you may notice, so we only work with three each of client side. It's also possible to call same queries from third party apps. Let's go back to freedom UI. We have better data there. System settings. Freedom UI interface. Enable it. Stay log out. Log in. So I plan to show you how we can use third party app to perform such service calls. As example, I will use postman app. I already installed postman app on my own. And maybe you'll be interested in some alternatives. Postman is a very helpful and useful and very like, handy software. I have a collection of different tools, which also work for the same purpose. Postman is on first position, but we have tundra client. You may use advanced rest client, rest of it in Sonya. And it would have other names. The recent one was macoon, and the telendate tester, or you can use hard code, old tools like Fiddler, so up UI or wireshark. So it's up to you what to use. Postman is one of the best from them. And no, no, no, don't upgrade now. So I need to show you, let's close all existing, don't say, close all tabs. Okay, don't say. Here is postman app, which is designed to test, to test the queries, to test the let's service requests. We can try to run it. So we can create new post query. And we can take all the parameters needed. For example, let's make a calculation of the most expensive apartment for sale. So we go there, network, try to run this button. Here, we can steal all necessary parameters. So this is our request. Okay, copy it, go to postman, paste it here, carefully. So this is our request. Great. This is a post query. Great. Body should be raw JSON. Okay, and we will provide request. Body value. We load view source. So we can copy all of this and paste it into our postman, beautify a bit, just to make it good looking view of what we're trying to do. And then we have originally no cookies. And let's try to run this query. We will see what happens. Obviously, creation, server, site, we will reject such executions because it means that we are trying to run some business functionality without any credentials. So I try to run it anonymously, of course, rejected and unauthorized error 401. Now, you need to know that if you want to call creation services from third party apps, you have to pass authentication. Creation has different ways of authentication. Now, let's go to our documentation about integration topics. We have authentication articles, basics and overview. So we have different authentication types. The most practical are forms of authentication based on cookies or both version two authentication based on application name or client name and client secret. I will show you forms of authentication because it's out of the box and it doesn't require any other special settings, any other preparation for my system. If interested, how to make all version two authentication, you can read corresponding articles. So here you will see all necessary data. And I will show you forms of authentication. First authentication is based on running a special web service. Let me show you examples. And there's no no no no no no. I need to reference for our service. So we need to run special web service, providing a request body with our name and password. As a result, we will have set of authentication cookies and such cookies will include necessary data that will work like a temporary tickets for us to operate with creation. So in order to run this business logic query, we must provide special cookies. Originally, we don't have such cookies and we will get it with the help of authentication query. So let me show you how we get how we make authentication query. This should be a post query. According to the article, we must use our web server address, service model or service plugin. Okay, copy this part here and then take our address without zero ALS because we work with root folder. So what we have here, this is our web server address, this is our root folder plus to our web service. Let me show you. This is my web server folder, service model, also service. You see some definition of this web service class and some technical information from it. So this is a root part of our application. We have to provide body, row, JSON and we have to make this body with two properties. Okay, we can copy it from here. User name should be our name we want to use and password. Right, this. Okay, no special headers, only body is required here. So let's try to run it. First of all, I would try to run with incorrect password. You will see error message. So 200 here, but error message code one in valid user name or password. Okay, and obviously, we will not get full set of cookies. So we are getting only just one temporary cookie, which is not enough. Of course. Okay, let's provide correct. Now, now you see 200, which is okay. No error messages in response and four cookies obtained. Only four. It's strange. I expected five cookies here. Let me think. What is missing? It was missing. User name. Okay, it's not so difficult. Okay, we have four cookies. Normally, it's five cookies, but probably something changed. The most important are BPMCSRF and A-Speaks OV. Okay, so we have some set of cookies, which will be working as a temporary tickets. Such cookies will work not forever. It will work just within our user session. Inside, we're having such cookies. We can run query using postman. In this query, we already have set of cookies. Thanks to postman sharing cookies with the same sites. And then we can run our query. And it looks like we have one more error for all three. But this time, this error is not because of authentication. This is because of additional protection from CSRF attacks. If you have time, you can find what is CSRF attack. It's a cross-site request forgery. Special type of attack where a hacker may use current user session credentials and ask a user to run specific code, which will turn into some change that was intended by hacker. So, use of current user session in order to do some malicious functions cross-site request forgery. So, we have special protection for it. For this type of attacks and in order to run post queries, we have to make a header in post query named BPMCSRF. And the value for this header must match the same cookie BPMCSRF. So, I take cookie value carefully, put it to value of our BPMCSRF header. And in this case, my calculation is correct. The response is 200 and I have some response date. So now, I successfully called creation method from third party app from my postman application. That's how you can do this. And also, you probably are interested to know that this session initialized by postman is not forever. And it has sliding expiration. We have default timeout for user sessions. Let me show you. It's about some session date information. So, we almost finished for today. And let's go to system settings. I can show you timeout. Timeout. User session timeout. And you see, original value was 60, which means 60 minutes, one hour. I already changed this timeout to 600, which means 10 hours. The maximum value here is 720, which means 12 hours. And the minimum value is 10, which means 10 minutes. So, this is user session timeout. If you run any query within this timeout, then your session will be extended. So, creation has sliding expiration of such cookies. And simply stick. And if your run query is too often, so often enough, like every 10 minutes or every 20 minutes, you will have everlasting session. So, your session will never die. In practice, in real practice, such sessions will be finished if you do nothing for some time. So, in case if you plan to do some integration, of course, first you will do authentication, then you will do some integration steps. And also, you can check how it goes. And you can check current user sessions if you go to system users, find your user, go to access rows, detail, then sort by start of the session. Now you see two different sessions, initialized by our supervisor user. And one is browser based by our Chrome. Another is made by Postman. Both sessions are active now. You can close such sessions if you want. That's how you can track history of your users. And in general, you can see this history also in database if you will do something like this. This user session. So, if you do something like this in your database, you will see all user sessions created initialized by any user in your system. And you will see session end date, session start date. You can calculate how long your users will work in, who worked and who did not work in your system. So, this may be really helpful for you. And you see, we have different session end methods. session end means the way how system finished your session. And there we have, like, look out scenario. We have timeout scenario. And you see different stories here, different history. Okay. At the end of the day session, I want to mention that it's also possible to make your own web services, which will not require authentication at all. Such web services are called Anonymous Services, but you should be very careful implementing that. Because Anonymous Services is simply a back door or kind of a place which could be utilized by anyone without any credentials, so potentially making it possible to do some kind of DDoS attack on your website. So, generally, it's not safe. You can read more data about Anonymous Services at our documentation. So, let me find it in the command, Observices, Examples, Anonymous Observice. So, Anonymous Observice is similar to traditional one, but it has one difference in the code. You will have no user connection. But thanks to inheriting from the service, you will have app connection. And also it's possible to get system user connection from it. So, anyway, application has its own embedded system user obsession, which is created actually by user who is specified into special system settings. And the system operations user system, setting by the photo supervisor, but we can change. And this user will be used for this background started and created user session used only for system purpose. And running Anonymous Services is also based on this approach. So, if interested in running Anonymous Services, here is the article. And the difference is that you have to check out the half user connection or not. If not, you can take app connection system user connection instead. And then you can do all the same operations as you plan the, but in order to implement Anonymous Observice, you have to perform a lot of changes in file system, which is not a problem if you deploy your Anonymous service at on-site environment where you have access to file system, but which will be a trouble if you deploy it in cloud conditions. Because you simply cannot modify such files in cloud, you only can provide manual for support team and ask them, hey guys, please, I need to deploy Anonymous Services at cloud environment. Could you help me and provide them all the necessary manuals for your web service to be deployed at cloud conditions? And as you can see, a lot of steps here. So, it requires manual for support team, what exactly you plan to say, what file to modify. And you may know that we have already a lot of based product on Anonymous Services. We can find it in inner web config file. Let me show you. Inner, it means inside of TerraSoftab, web config, search for allowed locations. And you'll be surprised how many Anonymous Web Services we already have on board. More than 30 items that could be called without authentication. So, you see when you run an Anonymous service, you should not provide any authentication cookies and it will work for you even without any authentication. But potentially, this makes a threat for you because anyone can run such queries and anyone can use such endpoints to make some kind of dose attacks denial of service, running it too often. So, please be careful with making your own Anonymous Services. And I will just show you a quick example of a service which may work anonymously. The biggest difference is this. If you have user connection, you can just get it. If not, you can get it from app connection system with your connection. That's how you use this user connection obtained with this code. And you can just copy it for you. So, if you ever need it, you'll know what to do. And then you work with the same query, but using user connection obtained with this example. Okay, that's all for today. Thank you very much for the time. We already finished the questions with making our own web services, running it anonymously, making postman queries. And tomorrow, we will continue with data exchange tools, with integration, with calling an authoritative services. So, thank you for the time today. Dimitri, I have one question if that's possible. Yes, yes, please. It is a bit off topic, but we have an opportunity where we can also leverage the business to business portal users. And we would actually like to apply a row level security. Is that possible? No, sure. We already have quite powerful security tools in creation, we just did not cover it because it's something that is described and discussed at customization course. So, we have roles, we have users. And you can see a list of users here. You can create your own users, you can provide different row permissions. So, everything is just out of the box here. We do not need to program, especially things for it. Is that what you asked before or something? And also not if they are not allowed to see each other's data. Or is it still in the possible? It's possible, but I would not recommend you to make such strict restrictions because your end users usually work as a team. And if one created a customer, someone else may need to look at it. But in general, it's possible if you plan to implement a couple of competitive teams or competitive users, so they should not see data from each other. It's possible to implement with the help of default record level permissions. You can find it here and object permissions. Then you can select corresponding entity like reality. You can enable a record level permissions. And it's possible to make situation when first user creates some record. And obviously, first user can see this record. But other users will not be able to see this record. If necessary, you can do this. Only in case if users have single user privilege, administrators will see data anyway. So they will see all the data. Okay, let's clear this. Let's try that. Thank you. Yes. And also Adren was asking about business processes and call web service. And to put our web service inside. Oh, in case if you run call web service, so it was designed to run third party web services. But let me show you we had our own examples. And when you use call web service item, it is designed to run third party web services. Google study how to do this to model. If you need to run your own service, you can write some code at client side or technically you can use call web service for your own web service. But in case in this case, you have to take care about all necessary things like authentication, passing cookies, passing parameters. And in my practice, we had successful examples where a two different creation assistants were communicating with each other using no code call web service tool. So it's possible. And what the difference between implementing a button handler and watching the web service and business process. There is a big difference because call web service is designed to run third party system, third party and points. You can use it for your own, but you will have to provide too many technical parameters. So the same number of settings that you will do it from client side. Also, I need to mention, which is not obvious, that when we run our web service methods for creation, web service from client side, we did not care about authentication. The reason was we already have all necessary cookies in our browser in client side. Let me show you. So let's look at our call again. Now you see this query. But if you look at Hedders part, you will see that we have cookies. So this is our cookies parameter. And such cookies were provided by our browser because we are running our three creation page in a browser that was authenticated to work with this website. Grouser supports all queries made from client side with cookies. And that's why our queries were executed without any error message related to security. So we had cookies in our client side when we call any query. So for example, when you do some simple step like Rivo data, you see select query was performed. You see also cookie was passed from browser side. And that's why we have no issues with running the same query from the same page. If we want to steal all this data and try to make it from another browser without cookies, of course it will fail and it was shown by postment. We will have 401. So Adrian, is it clear what we're talking? Okay, Adrian, thank you very much. Thanks all of you for today attention. We will see each other tomorrow. Tomorrow we will talk about integrations. I will show you examples of onboard protocols supported by creation or data and data service. You will see how you can use it for integration with third party apps. And also we will practice with scope of web service. And we will do some calls to third party apps without programming using no code tools. At the end of the model session, I plan to show you clear tool, explain why you needed, how you can do some system maintenance with it and how you can organize delivery with help of Clio. So thank you for your time today. And see you tomorrow. Please prepare questions because we will have Thursday and Friday sessions. You have chance to ask your questions related to development or organizing or architecture of Croatia. We'll be happy to answer. So tomorrow we will work with integration tools and Friday we will prepare for the developer action. Thank you very much for your time. See you tomorrow.",
  "summary": "Today is session number eight of our development on creation platform guided learning. And we will continue to work with server side features and functionality. So today we will focus on web services, making our own classes at creation server side and make it work at the web service, right C sharp code and practice with calling of web services from creation site and from third party applications.",
  "topics": [
    "crm",
    "bpm",
    "integration",
    "development",
    "configuration",
    "ui_ux",
    "database"
  ],
  "complexity_level": "advanced",
  "commands": [],
  "api_references": [
    "Observice"
  ],
  "code_examples": []
}