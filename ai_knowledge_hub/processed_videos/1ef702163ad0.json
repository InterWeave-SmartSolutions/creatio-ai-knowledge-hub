{
  "video_id": "1ef702163ad0",
  "file_path": "ai_optimization/creatio-academy-db/developer_course/videos/Recording2.mp4",
  "title": "Recording2",
  "duration": 0.0,
  "transcript": " you you today is session number two and we will continue to do our first steps on core data and sports solutions so you will see how it works in general. I hope it will be clear for you. Okay, so in case of any questions, feel free to ask. I'll be really happy to answer your questions. As usual, video recording has been performed. I hope that you downloaded video files from our yesterday session. I hope you made your homework and prepared your environment. So now you are fully ready to continue. If you have any questions, feel free to ask to share. Any questions? Yeah. If we have issues, we'll be in the solution of the local environment. Getting is not possible. It is better in the chat. It's related to some radius server. This is we are getting. So you post the text. So it was failed to connect to the radius. And so it's something like it was not possible to connect to radius server right now. And it was multiplexer, retrain, board connections. So first of all, thank you for setting this. So first of all, you need to look at your connection strings config to make sure that you have a correct host setting and DB number. Also, you must make sure that your radius is running. You can check it by running your Windows services. I already checked it. My food number is like in your service. So you should find your radius service running. If it's running, it means it should be okay. You can also look at the radius logs. Maybe it will be more clear for you. And which version of radius are you running? You can get this information if you go to see program files, radius, you can run the special app called Regis CLI. Then you will see something like this. You can type in for command. You will see a lot of technical information, like version number, amount of RAM used a lot of system parameters. And also you will see set of use the key spaces. So it's a database numbers used by your radius. There I can find the word number. In this one. C program files, radius. Usually if you install a radius for Windows, you will find it here. And then you can just run radius CLI X app file. It will be a command line utility for radius. So you can run different commands. Like select number of database, DB size, you can see size of the database that you selected. You can also use some dangerous commands like flash DB for clearing of your current database or even flash all for clearing of your old radius server storage. So sometimes it's necessary in rear cases where your radius already has some previous old data. And you would like to start from scratch. So removing of all previously saved values. Normally creation manages radius by its own. So you do not need any kind of assistance. And usually creation is caring about radius itself. Only in some rear cases, you will need something like this, like flash all in order to reset your radius to clear everything. And that's all. But it looks like you have a connectivity issue. So question about network name or question about port number or something like this. So is it possible to run your radius CLI and make connection to your radius? I'm doing that. So when I started radius CLI, you can just type the command flash all, which will clear full radius. And it will clear all the previously saved settings. And if you have different attempts to install creation, there is some slight chance that existing radius data may prevent you from normal start. So you can try to run flash all command. I would also type it in our chat. So this may help you to normalize your radius operations. But the most common reason I think is about connection. Strengths. So you should take care about the host and database number. You can try to choose another database number. Maybe you have some other apps using the same number. And you may try to run another one. I remember the login text response. So you did it to help to fix. Yeah. Okay, great. Thank you to Sharfa here question. I hope it was not so boring for others to hear it, especially if others will also experience same difficulties, it will be really helpful. So let's move on with today topics. If any other questions appears, feel free to ask it any moment of time. So it will give me a bit more entertainment because soon. So once you have a question, I'll be happy to answer today. We'll continue with git, with package management. And also with working with objects in general and using data items, and possibly, I will show you some advanced example with connecting database views and objects. So today we will mainly focus on general stuff, like git and object and data management. First of all, let's remember where have we finished last time? Last time we manually created new package. As I told you, the scenario for manual package creation will be necessary in examples where you do some classic UI customization. In general, you can create packages and then you can use it for freedom UI apps, but it's not so common because when you create freedom UI app, system automatically creates a package for you. So creating package manually usually means that you are planning to do some classic yourself. Just to remind you, classic UI is a special old type of user interface, which you can still find in many system sections, like system users, like system settings, like web services. You will see some specifics and no possibility to shrink columns easily. And a bit later, I will show you examples of freedom UI and you will see how you can use such tools, how to look like. So we have two different types of user interface. They have a totally different undercover frameworks inside. And that's why it's so different and we make such difference between different types of creation pages. Okay, so that classic will be intended to use for some classic UI stuff. I need some dummy example to be put into my package. Currently, you can see that we can select all packages. As you remember, we have 141. Now, let me check number of packages at our D1 database. Now we have 141. So one package was added because we added it manually. And if you select all packages, you see contents of all your old system. You can use some search. You can use by search, by title or by code. You can use this different search condition. And you can also make filtering by configurable item type that you can add to your package. In my case, if you select any package, you will see its current contents, especially if you clear search bar. So you will see current contents. And when I select my package, by default, it's empty. We can create some dummy stuff here, just to demonstrate something that is not empty inside of our package. So let me show you what it will be. For example, we can make a test process, business process, it's a type of configurable item designed for automation of some business actions in our creation system. So now I need it only as a template dummy stuff, just to make it to make my package not empty. When I design my items, I must provide code. And by default, system expects me to provide some prefix for this code. This prefix can be also set at system settings. You can search for prefix, for schemas and packages name. You can open it. You can see default prefix is USR. You can change this prefix at the beginning of your project, or you can even remove it if you do not like supporting prefixes. In my case, I do not need to disable it, so where it be as is. prefix usually helps me to detect my custom changes and defer them from base product stuff. So anything which has my prefix will be definitely made as part of my customization. So in general, I consider prefix as useful thing, but in some projects, developers decide not to support prefixes because they just tired of making them. So in my case, when I create a process, I must use this prefix, the same as my system setting, USR test process. So we can name this stuff as test process. I need it only as a dummy stuff. So I do not really plan to make some business logic here. So my test process includes some start simple event and then terminate event. So this process is just doing nothing. I have no parameters, no special settings. I only have code and title, and I can save this sample diagram. It will be saved into my package, as you can see here. So I can close it. Now my package is not empty. And you see this item added to this package. You may note this big star nearby the item name. And this star tells us that our change is performed and not fully properly saved. In case if we work in this creation, no, no, no, no, external ID mode or it's also called file system development mode, it's kind of long name for this. So file system mode. In case if we work in this mode, this star is really important and helpful because it shows us that something was changed and not fully saved on disk. But if you will turn back to creation ID, this star will be almost useless because it will represent that your changes are not submitted to the SVN. And if you do not support SVN, so you will always have a big set of such items with stars and it will not help you to detect some recent changes. So in our case, working with file system, star means item was not fully saved on disk. Why we need to save it because creation shows us some changes and they must be submitted properly in order to make correct sets of steps made correct development approach. So we can submit everything to file system, download packages to file system. The reason why we have to do this is that some changes when we do them at configuration section are not initially and fully saved on disk. They are still created and saved in database first because it was historically and originally the first storage place of creation items in database and only several years later, the possibility to save items on disk was added. And that's why we have some kind of legacy and historical stuff. And when you develop some items, they are anyway created in database first. OK, so we can run this action, download packages to file system. It will include all our editable packages over the contents and save a set of files and folders on disk. When it finishes, it will show us some report, what have been done, and you'll see this report easily. And also this star nearby the item name will disappear. Meanwhile, you can see the type of the item it was a business process. Now you can see the small report includes text that this usr process was modified on disk, so it was fully saved. Now you see the star disappeared. We can go to file system. Here is our app file system. We go to the source of the web, source of configuration pkg. Then we will find our dev-questic package. And now you will see that it's not empty. You see schemas. Now we have some special folder. We see some set of files. It's not so easy to read such files. And luckily we will not need to modify them using external editors. This is a special set of settings called metadata. Metadata is information about our configurable items stored in a special system in their format. In a JSON string, with a big number of different properties and values, and luckily we should not look here constantly. So it's just something that you need to know that it exists. So metadata represents in a structure of the item. And therefore some types of configurable items, it's not really designed to be edited out of creation. So only creation editor should be used for this. This metadata represents full structure of what we designed. And we can now have this stuff saved on disk. The reason why we saved it on disk is our attempt to organize a teamwork. So we want to make some changes then to make a common repository. Save our changes there in order for our team members to make them possible to get our changes from common repository. And that's how we will exchange settings between different developer environments within one development team doing the same project. So now as you can see, we are going closer to file system and to understanding how we can exchange settings between developers. I need to tell you that creation has two different flows of changes, two different directions of how you can transport changes. First and the most necessary to know is delivery. So when you do some your solution or you have an existing solution and you want to save it and then import it somewhere else in order to test or to run in production, you can just export this package into file. You can export any package you see. System will produce zip archive file and this zip archive file can be found on disk here like this. And this zip archive file can be also uploaded on some other environments. Such uploading can be done with the settings then you go to application hub. And then it's possible to add new application with install from file option. So that's how you can get it from file and load it. If you do it many times, you will install from file many times and package will overwrite reviews package settings. So you can do it multiple times if necessary. But this is delivery procedure, which is designed to be used only for test and production purpose. But if your task is to share settings between developers, this export and import approach is not good. Because when you import such package at your another developer environment, you will see this package will be read only. And also when it's imported, it fully overrides your contents. So it will be really hard to operate as a team where each team member can do his own, let's say, contribution to the common repository. So such export and import is not designed for sharing settings between developers. We have to use a bit more sophisticated approach. And that's why we are turned our environment into a file system development mode. So the step one is to make sure everything from your changes is saved on disk. And step two is to use any kind of version control systems to operate with set of your files and folders from your disk in order to deliver changes in order to transport your changes from files and folders to some common repository. And then other team members, other developer environments can take such settings from common repository, from other common repository to another developer environments. So that's how it can be organized as a team. And now I will show you, I will use Git as a version control system, the most popular for now. And in order to run Git, I need some kind of good Git client. I prefer to use Visual Studio Code as a Git client. So it started Visual Studio Code. Luckily it's free of charge, so we can use it freely. Here is my Visual Studio Code. Probably I need to close everything, close folders, so I need to make just from scratch. And what I need to do, so first, before you enable any folders, before you operate with your Git, if you don't have Git client, you should click on this button, source control, in order if you don't have any Git client installed, you will see only one button here, will be called something like, oh, we have to update, okay, maybe later. One single button will be install Git client. In this case, you'll have to run your Visual Studio as administrator when you click on this button to automatically download and install official Git client. And after this, you will see the same settings. I do also, you probably will need to run a couple of commands related to your client in user name and email. But this is something very common. I think you can easily fix it if you face this difficulty with new terminal window and a bit of Googling will tell you how to make full setup of your Git client. In my case, this Git client was already set, so I already have Git client normally working. So I can now open folder and in shallize repository in it. This is very important to understand how you should manage folders. So here we have our application, Tresoft the Web, Tresoft Configuration, PKG folder, and we have a lot of subordinates, subfolders here. What are they? I will explain a bit later, but now you need to remember and understand that, currently I have only one package, but very soon I will have more than one package in my solution. So if I decide to make a repository root folder, somewhere inside of my folder representing a package, then it will be really hard for me to add any other packages here. So I will need to keep several repositories for several packages, which is also not so good. So possibly we can select upper level folder, this PKG folder will be my root working copy, catalog working copy directory on my disk. And then as many packages as I need, I will be able to use inside of one single Git repository and also we will have to take care to remove from the repository. So I do not version a lot of other files here, which are not so intended to be changed and they are not part of my solution. So I plan to use a PKG folder as a working copy root folder for my solution. I will do this with Visual Studio Code and in Explorer tab, now just click open folder. I need to find corresponding folder from my disk. And now probably it's time to explain why we have so many files and folders inside of PKG. So when I opened, you will see a lot of subordinate. Yes, I trust, I trust the authors, but you will see a lot of subordinate files and folders here. So the answer of what it is is quite complicated, especially as you are beginners, so probably you will need to watch this part of recording a couple of times to understand fully. First of all, you may notice that folder names here represent some packages names from your configuration. Let's look here, let's start calendar base. Can you find it here? Yes, here is calendar base. Okay, next one, content builder. Content builder is also representing a package, okay? CRT analytics dashboard, okay, let's find it. Yes, you can see it. But total number of such folders is much less than 140. So it looks like such folders appear here as a result of presence, some packages in configuration. But for some reasons, not all the packages from our configuration form, they are owned folders on disk. So the answer of what it is is a bit complicated and it's called file contents. Let me explain what it is. So generally, any package in relation may include unlimited number of items with the different types, like objects, we will study them today. C sharp sources, et cetera, site program code in C sharp language. A lot of JavaScript client modules representing page settings for client side. We have some data items, we will discuss them and they are used to keep some data records in your system. Business processes and some other types of items. So in general, any package may include unlimited number of different configurable items. That's okay. But also, developers decided and architects of creation decided it would be nice to make a stability to add some additional file system stored functionality connected to the package. And they decided to make so called file contents. So if you have a package any package may have its own file contents. And this file contents should be saved in PKG folder then in folder name inside of it, which is the same as package name. And inside of it, we have files folder and it may include some DLLs, it may include some additional files and bin folder, which usually includes DLLs. And this file contents is usually having two types of files. It usually has some DLLs as a result of compilation. And for some cases, it may include some JavaScript stuff, JavaScript components. So generally, the answer is that in PKG folder, we have file contents, which is a legal valid part of some packages saved on disk. And we should treat it as redone this stuff. We should not remove or modify any part of base product packages file contents. So we should just simply ignore all of this stuff. So now we are going one step closer. You already know that we are interested only in packages that we design, ignoring everything else that we can see in PKG folder. Okay, now it's clear. So let's go to our Visual Studio Code, we shall work for us as a git client. Now we only opened some folder with big number of files. We are really interested only in some part of such files but we are not interested in all the contents. So let's go to source control tab. And now it's time for us to make a git init command. So some of you already have some experiences git. You already know what it means. So we need to initialize a local repository to operate with git. This is a necessary, so it looks like mandatory. Step, if you want to use git, you need to initialize a repository. I prefer to use as much as possible of graphical user interface to operate with git because it's easier. It makes less chance of mistake and much more visual. So we can see what's happening here. So I will run initialize a repository, which is the same as git init command. And it will initialize my git local repository in PKG folder. So I just click this. It performs some steps. And now we can see that at this source control tab, our git client detects huge number of modifications. Of course, most of them are at base product packages or we do not plan to version such base product file content. We do not plan to submit it to version control system repository. So we need some tool to ignore this big part of PKG folder. And we only need to keep and take care about packages that we decide to create ourselves. Now we have only one package that we are really interested in submitting. This package is called dev. Let me show you a dev classic package. So this is our package that we plan to operate. We want to ignore everything else. Custom packages also editable, but we agreed that it's not a good idea to use custom package for big project development. So I prefer to ignore custom package as well and keep it empty or only with some temporary stuff, which will be not submitted to version control. And we will be not shared with any other developers. So I have simply only one package here. So far, but soon I will have more packages. I need to ignore everything else. And from my previous experience, I already have two for this. If you have no previous experience, you probably know that in git, you can ignore some parts of your working copy folder by use of git ignore tool. And I can find good example of git ignore tool at my git hub repository. So let's go to git hub.com. I need to sign in. I use my Microsoft Authenticator for this, just a second. Authenticator helps me. Good hub. Yeah. Oh, sorry. Change number. Okay. Okay, this one. Okay, successfully confirmed my personal access in git hub. I recommend you also to register your account at GitHub. So what I need here is my repository. Confirm your account recovery. No, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, later. It's okay. So I have a lot of repositories at my account. Probably you can find it here, my repositories. And what I need here, I need some example of a recent, of a recent, git ignore file. Originally, I had no examples. So some of my colleague proposed an example of git ignore file originally made for Visual Studio. But now I have a better example. So I will have a less time to update it. So I already have some example of git ignore file. Of course, I will share it with you. git ignore file is a file with empty name and git ignore extension. And the main reason of this file is to provide set of macros, or a set of text templates, which will be used to find and exclude from the contents, all stuff, which we consider as not necessary. Usually it's designed to exclude log files, some settings files, some technical files generated by your integrated development environment, temporary files, project files, sometimes executables, if you do not need them, debug files and so on. In my case, we will use this git ignore file to keep set of base product packages names to exclude our, to exclude them from our versioned contents. So I will simply copy all of this code. I will make my own and you git ignore file inside of pkg folder. The name of the file is dot git ignore. If you will do this with your Windows Explorer, make sure you set for display of the full file names with extensions. In this case, you will not fail and you will not create a dot git ignore dot text file. So I will create new git ignore file, paste this stuff there and save it. Now you will see immediate change happening in my working copy, working copy source control tab. Now you see git ignore file, okay, great. We can also edit it here if necessary. And we still have some packages at period here. The reason is that my git ignore example was from version 812. Currently, we are running already new version. This version is 813, the latest available released version. And in this 813 version, some new changes and new file content, the period for base product packages. As you can see, CRT only channel app appeared here and I can add it to git ignore. Let me show you what happened. And also I do not need to put all of the files here. So package name is enough and CRT security. So I can type it menu, CRT, security and save it. Now you will see I cleared my versioned stuff. I only have my dev classic package here. I use the git ignore to remove big set of base product packages and base product file contents from versioned stuff. So git ignore helps me to do with this. I have a small poll for you. Could you please confirm? Do you have any experiences git? And if yes, please type plus in our chat or if you don't have any experiences git and you do it first time, then please type minus in our chat. So it will help me to understand your current level for skills and knowledge about version control because today developer, I think, must have some, say, basic experiences version control tools because it's quite inevitable to operate as a team. So thanks for all of you who replied, you have some experiences git. Those who do not reply and please don't be shy, understand that no one knows everything from the beginning. So everyone is studying every day. So some years before I also was not knowing about git at all. So this is something that you can learn. And my task is to help you with it. So now we have settings for our git client to include only necessary parts of our code and we excluded everything else using git ignore. Also, I wanted to show you in file system. Once we initialize git repository, you will see that a new folder appeared on my disk. folder name is dot git and this folder is hidden. As you can see, the file attributes here show us it's hidden. So possibly I will not see this folder easily in my Windows Explorer, but here I already saw set show hidden items and also I already set for show in file name extensions. There's not to be tricked by Windows. So now you can see hidden folder dot git even in Windows Explorer. And dot git ignore file has a dot git ignore extension, not text extension. So it is also important. Okay, so this is my local git repository. I did not perform any commits to it. So I did not submit any changes there. So it's time to make my first commit. Let's do this my first commit ever. So it's just something fun text and text for your commits is important to describe your changes in general. Like you did some new section, you did improvements in integrations or you made some data fixes or anything else. So your commit text should help you to track history of your changes in future. And it also will help others in your team to understand what actually you are changing and what is the sense of your changes or why you submit some new changes. So when I do commit, it will run git commit action and it will save changes in my files into my local repository. My local repository now became a bit bigger. So it has a bit more files and folders now. You can track it if interested. But the inner stuff here is really hard to read. So it's about some git secrets. How it saves your commits, your changes. And so my git repository is still local. So I did not share anything with my imagined team members. I need now I need remote global git repository that will be available for my team members. I will use git hub.com as a central git repository host. So it will be my git server. And I can create new repository. I will have a lot of repositories here. And I can easily create new one more new repository for our training session stuff. Oh, have some for hours. Nice. And it will be a public repository. So anyone can take information from it. So you can also read this repository. You can use its contents. You can save it at your own and see what happens if you add your files to creation. So I need this command repository to organize sharing of settings with my colleagues. This is very easy. I also avoid using commands. I use user interface because it's easier and quite straightforward. I will create new repository. It will be something like guided dev. May 2024. Let it be. This name was not used inside of my account. And no description, public repository. No readme file. I'm too lazy for this. I already have git ignore. So no need to add it once more and no lights. So anyone can do anything with my code. Simply create repository. After doing this, it's time to think about some git comments to connect my remote repository with my local one. And we have set of comments that will help us to do this. So first command is git remote at origin. So I will connect remote repository to my local git client and my local git repository. I can do it with a terminal window. Actually, I can run any command line on my PC. But I prefer to do it here just to be a bit more consistent and to show you what happens directly, not far from my visual studio code. So I just paste this code, git remote at origin. And as you can see, my remote repository has this URL. OK, let's do this. Then we have a set next command. Select and main branch on my local one. Git branch m main. And the most important command is git push, which will transport changes from my local repository. So to transport my commits from local repository to this global one, so it will become publicly available. Git push. It usually needs some internet resource. You see, compressing was used here. And finally, my remote repository was updated by a set of commits by stuff that I committed from my local one. We can check it out. So now my repository is ready. You can see some files and folders here. If you go inside, you will see that git keeps only files, only folders, which are not empty. If we compare with our physical file system, you see, for example, data folder, which is empty. And it's not present here, because git is still not supporting empty folders. But it's OK. So it's not a big trouble. If you really need empty folders, you can use some place folder files. Creation is not sensitive for this. So even if we submit to version control only meaningful part, excluding empty folders, system will still be OK with it. And now we have some stuff from our package, which is not empty. So we have some files and folders committed to local git repository and then to common repository. So now it's globally available. And I can share my repository link for you. So you can also check it out if you have any git account and you know any restrictions to access GitHub.com from your PC. So this is my repository. And what the reason why I made the repository based on PKG folder. Now I have only one package. And you can see this is a subordinate folder inside of my repository. If I have two more packages, it will be two more folders on this level. So having this kind of repositories helps you to keep minimum number of repositories and maximum number of packages inside. So I can easily add more packages to my solution. And it will still be located at one repository. You can also see all the history of my comments. You can see changes there. So we will work with it a bit later. Now I will demonstrate what usually developers do when they operate with git and how they are, let's say, set of steps should look like. We are starting some steps at our development. For example, we open some configurable items. We do something very important. OK, I'm not so lazy today. Let's do some read data. Let's say we will do some dummy thing, read data from a contact object. We are name full name. For example, equals to some value. No problem. Let's compare its value, like supervisor. This is just something that is a demo setting. So I do not actually need it so much, but this is something that I will read only one column, 18. So this is just example read. An example of what we can do as business logic automation inside of a process. Let's imagine we did something useful, something very important for us, and then we save our customization. This is an example. In real life, your package will include tens or even hundreds of items. You do some steps in your development. Finally, you decided some parts of your solution is ready. So you can save everything. Then you go to your configuration section and download all the packages to file system. The main reason is to get rid of this star and make sure that all of your recent changes are properly saved on disk and represented at file system level. Originally, when you do customizations, they are saved in database. And only if you download on disk, it will be properly and fully saved on disk. Some items are also saved on disk while you edit them, but this download action ensures that everything is properly saved. So you must do this action when finished some development steps. I have some changes now on disk star disappeared. So everything is properly saved. Let's go to Visual Studio Code. And let's see what's changed here. You see, we have some changes in disk editor for our process, something like date of modification changed. You can see changes in metadata. We have some new item added. We have some titles changed. So some position changed. It's really hard for processes to detect changes like this, but this is something that we do just an example of some customization made. Also, we have some new items appeared here probably because of our titles added to the process pieces. But okay, so we have test process and so on. So we have set of file changes. We can commit it as a commit example. Commit example one. And we can do git commit into our local repository. Great. Now we have no changes. So we have some pending stuff that should be pushed to global repository. So we can again run this command git push. Or which is easier, I think, is to click on sync button, which means pull and push. Pull and push. In my case, it's like valid set of steps. So I prefer to do this. Pull and push. And that's how this symbol automatically perform the same git push to my common git repository. Now we can go to git repository, reload it. And you see some history of changes. So we have two comets. Here is my commit history. You can see and compare changes. Oh, let me show you here. You can compare changes in each file, in each separate file, what was changed there. I agree sometimes it's really hard to perform this type of comparison. And it's because of the metadata stuff here. But anyway, technically you have tools to perform such comparison. You have tools to track changes. And you can see what is changing, what is happening in your repository. You will see all users committing. You will see all history of commits. You will understand pretty much everything. What happens with your package on a file system level. And this storage now is a common repository. So let's imagine we have another developer. Another developer originally has no own package at all. Another developer just installed new environment. And they have no package at all. So only one single developer should create a package, should commit it to file system and then to version control repository. Another developer should go to this common repository. Another developer should organize their local Git repository in VKG folder. And finally, pull changes from this common repository. You can also make some clone. But I think it's something that probably will be a bit more tricky because you will have to do it in a proper place on your disk. So finally, task for second developer will be to operate with their own VKG folder to make their own local Git repository there. And then to get this folder out from Git to local file system. We can do it with Git pull commands or Git clone commands that have a works better. And finally, creation is interested on the in VKG folder and the contents here. So finally, you will get this folder from Git repository to some another developer environment. After you do this, you will have files like this. You probably will have empty folders for items that were not used so far. Like SQL scripts and data will be empty for some time. Then second developer must tell creation that VKG folder file system has something new. Creation will not detect it automatically. So you need to push it. You need to make a punch for your creation with the command update packages from file system. So second developer will perform this operation. And second developer will see results that some new files, new folders appear it and even new package will appear at second developer environment. So that's how your package changes might travel from one environment to another. From one developer environment to another developer environment. This is very important to mention. We are talking about developer environments working with version control. Let's imagine another developer environment opens some changes or creates new items. Finally saves on disk, then commits everything to file system, then performs Git commit at Git Hub client or sorry, at Git client, probably it's a visual studio code. And then perform, get pull and get push in order to update central repository. After this repository was updated, first developer may also perform Git pull and get push. And that's how first developer will receive all changes in the package files. And then first developer must run this operation update packages from file system. So that's how you can exchange settings between developer environments. And as you can see, it's fully 100% based only on files and folders. So no any special magic or special calls or special with services are involved into this. Only files and folders are enough to save changes, to extend and to exchange your services between developer environments. As you can see, it includes plenty of files. Let me show you 30 files are here. In big projects, you will have hundreds or even thousands of files. So it's much easier to miss something, but it offers you possibility of teamwork. You can change all the some parts of it. You will commit only changed items, changed parts to commit repositories. And everyone else can do the same. So that's how you can easily save. Modify two different items of the same package and work as a team. That's some warnings about this. Some items like processes and also objects are not designed to be simultaneously edited by different developers at the same time. So you should avoid situations where you have two different method data files and you should avoid situations when you will have to merge them into one. So here you will see the main method data file which is really hard to read. And it's probably not so practical. You should not try to make any manual changes here. Even in case if you got this situation when two developers made changes to the same item, I think the best way is to sacrifice changes from one of the side and submit another side changes into repository and then ask first side to check out it and make changes again. So merge of method data is not designed and probably will not be successful. So you should not try and it's better to avoid this. So you may communicate with your team members and organize your work so they will not interfere into each other settings. But in one package, as you already remember, you may have hundreds of items. So if developer one modifies item one, if developer two modifies item two, there will be no conflict. They will successfully happily work with the same package. So you should be just worried about simultaneous access with the same item for different users, different developers. If there are any questions about it, any other ideas, feel free to ask. I will be happy to explain. So in general, now we made all major settings and you see how you can set up your common repository. Now you see how you can submit changes to this repository and we can move on with next topics. Probably before moving on, I offer you just five minutes break. For a coffee. And then we will move on. We is working with object topic and managing data. So we finished with the question of, git integration and it's time for us to think about working with objects and working in general with creation data model. So what you need to know about it is that the basis of all creation data model is a configurable item called object. You can easily create objects in your configuration and also when you do customization using no code tools. For example, when you operate with the application hub or with section wizard system is capable to create number of objects automatically. But in order to study it, we need to make some examples manually. You understand it better if you do it by hands. And the creation has a lot of out of the box existing objects. So maybe a couple of hundreds here. And a lot of them represent simple entities called lookups. Let's go to lookups and let's see what they are. So go to lookups. For example, we can sort, okay, I prefer to look here, the left fields to display, switch to list view. And it was originally entire view. So I plan to look at list view and also I need to create it on column just to make more comfortable sort. To make more comfortable sort in this list. So I can sort by name. For example, we can find a lookup called address types. So it's something simple address types. You can open it and we will see set of records representing types of addresses in creation. By column address, business address actual or lingual address and so on. We have six records here. Such records are physically saved in the database. And we can go to the database using our database management tool, make new query, select everything from address type. You can see we have the same name of the database table working with it. So now you can see the same set of addresses, store it in the database and some additional options are also supported here. So what do you need to know is any object created in creation will finally turn into a table in database. So now we talk about general objects without special chemistry, without any tricks. So in general, if you create an object, it will have its own database representation as a table. One object means one table. Sometimes participants ask me, participants are asking me about, is it possible to have one object for many tables at a time? So normally not, it's not designed to be so. If you need to operate many tables and to get some aggregated data from them, you may use database views and then you will use a specially designed object for it. But in general, when you create an one object and everything as usual, system will create and manage one database table. We can find this database table by name and this is address type. Let me find this one. So you can see table structure, all the columns. You can see it's a key field. You can see primary display, text held and some others. We have a lot of base project lookups. You can see how many we have. If you go to view in your lookup section, view summaries, the top summaries, display number of records. And now you see we have 120 lookups out of the box studio product. If you work with more complicated solutions like sales, service or marketing, you will have even more lookups. And also we can easily create our own lookups and we will need them for our future settings. Lookups are generally used at the contents of data when you have a lookup column and you need to select some values from it. So building more complex solutions usually starts from making your lookups and that's why we will do some. Now I plan to do some changes in my package and it will be necessary for my future solution in classic UI. So this will be just an example for you and I will show you how to create new object from scratch and business sense of it will be some lookup for our future section that we will design. So let's imagine in future we plan to make a new section to keep some reality data information about houses and apartments for sale and for rental and obviously we need some lookups for them. For example, we will keep realty records and we need to know information about type with the reality. So it will be a lookup, we can call it realty type and I will show you how to create it from scratch. So select our package and object. When you create a new object, it means you are creating new entity in our system. New database table will be created. Working with replacing object will be covered with the data. So now let's make a new object. When creating a new object, we can provide some properties for it. First of all, we should take care about its code. As you can see, system tries to avoid duplicates and that's why generate some unique name for our object. Of course it's not good name. We would like to make its name by our own. We still have to use prefix because we will be not reject to do or to work with prefixes and we will have this prefix, we will have this prefix, usr. And that we can provide code for our new object. It will be realty type. And also I plan to make two different solutions, one for classic UI and other for freedom UI. So for classic UI, I will have a suffix classic. So it has been a realty type classic. I do not want to share any lookups between two different solutions. So let's why I will make it fully separated and that's why all the lookups for classic part will be fully separated from lookups from freedom UI part. So this is our code. Code is very important. It must be made only of electing characters and underscore and sometimes you may also use digits but I recommend it to use only wetting characters and it must start from character. And code will be used to create database table. So system is capable to make set of queries to the database like create table, alter table and add columns and so on. So we only provide some necessary properties and system will take care about database storage itself. This is also very important. So code will turn into database table, title. It could be anything and even more, it can be translated into other languages. Currently in my environment, there are two active languages. So I can easily set values here. But in total, we have probably 21 supported language. Let me quickly check. This is very interesting. This culture, it is a special object that keeps information about languages supported for translation into our system. And it looks like we have now 23 languages. Sorry. Let's see the most recently added ones. So wow, interesting. Because previously I only remember added Japanese at the beginning of 2024. And now we have some very recently added languages. Hungarian language was added recently. So greetings to Hungary and Croatian language. It looks like HR, it's probably Croatian. HR, HR. Yes, it's Croatian language. So you see more and more, let's say, national languages are added here. And now we have 23 supported languages in our system. Some of them may be disabled, others are active. And if you want to use a certain language, you should activate it. The reason of activation and deactivation is saving of system resources. If you do not need all 23 languages, it's better to keep most of them as inactive. System will save system resources for not necessarily languages. So that's why we have active option. And you can manage active or active language in settings. Then you can find languages apart. And now you can see 23 languages. And you can activate language if necessary by opening it, setting active and then save. But please, so this is a warning for you. If you activate the language, it will consume system resources. And usually activation takes some time, maybe up to five minutes. So please be very careful with it. Now you see recently added Croatian language and Hungarian language. So this is something that is interesting. And it's new for this version. Okay, let's go back. So if support of multiple languages is important for you, I recommend you to enable necessary languages. And each time you develop some items, instantly provide corresponding translations for your items. In this case, it will be hard to forget and hard to miss something that must be translated into other languages. We have also an alternative way to support multiple languages with the translation section. But I do not recommend you to work with it because when you initially go to translation section, it will take probably 15 minutes of time for initial preparation. So it's not so comfortable and I think it's much easier to provide correct translations just while you develop it. So in my case, it will be a realty type classic or a realty type classic title, be my title. If I want, I can support translations into other languages if necessary for my project. So code and title, they are important. Parent object is not mandatory, but it's also very important, especially if you make lookups. Inheritance helps us to get standard structure for objects, especially if we need some typical use of our object. In our future, we plan to use realty type classic as a lookup. So we can inherit structure for our object from some base objects that can be helpful in our case. The most commonly used base object is base entity. It helps to inherit key-thread historical columns and some behavior, setting some event handling that is necessary to operate in some lists and some cases. So base entity is like common parent item for all clear-ish objects, but also we have base lookup. Base lookup is used, especially when you need to create new lookups. And that's why such two most commonly used items are displayed at the top and all others are shown in alphabetical order. So base entity and base lookup, the most requested, the most frequently used are shown at the top. Okay, I need base lookup for this. I have to confirm my change. And once I do this, now you see I have new inherited column list. I have eight inherited columns. The most interesting is probably ID as a key field. Its data type is unique identifier. You already saw examples of such unique identifiers in many creation tables. So such a hexadecimal, big bar, big line of code is example of a grid globally unique identifier. Physically saved as a 16 bytes integer. So such data needs 16 bytes in memory to be saved. But it's very common for creation. So all creation objects are based on unique identifier key fields, usually named as ID. Also we have name as a text, as it used as a primary display column. Name is a mandatory. You can see required. Yes, the data type is text 250, which is very typical. And you should know that creation uses unique code strings anywhere. So every text column you will find in creation is based on unique code text. It means you can simply save any national characters there, any kind of Arabic letters, Chinese letters, or even emoji can be saved into such text fields. So unique code is supported. Also we have so called historical columns created on the date of creation. It's a date time date of creation of the record and created by this is a reference to a contact. So this is a lookup column pointing to a contact of user who created the record. Modified on the last, so the time when last modification of the record was performed and modified by is a column representing who what user contact performed modification. So we have a description name and description are business columns. All others are system columns and process listeners is an integer column for a very rare cases when record level event handling is used in business processes. So what do you need to know? Inheriting from base lookup gets access and we get structure. So we inherit structure of system columns. The most important columns are ID as a key column and name is primary displayed column. And they are important to work with lookups. Also you can find in main object that some inherited properties are shown here ID property, which means key field. So this is not perfect title of the property should be named key field and ID is used as a key field. And displayed values also not a perfect title previously. It was called primary displayed value. So the main text column, which is shown in drop down list of lookups. So name will be used for this purpose, but you can change if you want. Now any other special properties, we have some event handling made for this and inherited from parent one will study event handling a bit later. So what do you need to know now when you're doing heritins from base lookup automatically receive legacy of all columns that are intended to be used inside of lookups and usually it's enough. So usually you can create just code title inherit from base lookup and then save and publish and your object is ready. In my case, I want to present and show you some additional features that could be interesting and also examples of how you can make your own custom columns in creation. So we will go to columns list and obviously we can add our own columns to the object. We have plenty of options for different database types. A lot of text options, the minimum supported is text 50 characters and we have 250 500. We have unlimited events, we have rich text which supports fonts, colors and styles like italic underscore and so on. We have special texts for phone numbers, web links, emails and URLs and we have encrypted strings to keep passwords safely which will be not displayed as a text to be always displayed as a set of stars and we're rarely used CRC type which is a collision integer and it's used for checks. So it's like a checksum columns. I never faced a working example how we can actually use it. So just something like bizarre thing that possibly you will never use in your practice. So number is obviously integer and several types of decimals. Currency is also decimal with two digits of the decimal point. The difference from standard decimal is that standard decimal is 18 digits and two after decimal point. So 20 in total, two after decimal point. That's why we have so different but you see we can choose any necessary precision for for your solutions. Okay, date and time, quite of those, we have date time value separately date separately time. Some other types like Boolean, like unique identifiers, like image link or color selection column file can be saved and lookups. Lookups are mainly, so they are generally used and based on unique identifiers but lookups also keep preferential integrity. So when you have a lookup column system creates foreign key for you. So it keeps referential integrity which will not allow you to save into lookup column any value which is not faced in your lookup table. So we can try to make some examples, like make a new text column named code. Title can be code text is 250 and as example, I can show you how default values can work for us, especially how we can make auto numbering. So we can search for default value and we can set auto number option. We can say prefix like CD which stands for code and number of digits started with two. First one will be CD01, CD02 and up to CD99 and then we will have the next number, so CD100 and so on. This is auto numbering which works pretty well and it doesn't require any programming. So this is a no code tool to make automatic numbering in your lines when you use your import ads data. That's how we can do this. And if necessary, you can use custom indexing. You can also make your own custom indexes and even complex indexes. Unique indexes can be added but generally creates you take care about indexing by its own quite well. It automatically creates indexes for lookup columns. So you probably will not face any significant performance issues in objects and data tables made by creation. So once we finished setup of our object, we have to save it. This means saving only data. So inner data format to keep information about our configurable item. This type of item is also inherited from schema but the word schema I think it's hard to understand. So let's say configurable item which will be closer to its meaning and I think it's easier for you. So when we saved this item, it will be shown in our package contents. Now you can see database update required. So object can be applied to the database but it's not performed each time you save. Only when you click publish. Publish means apply changes to current application server and current database. In our case, apply changes means create new table with corresponding set of columns and provide necessary column settings and everything should be well done at the database to make our object fully operational. If you do not publish, our object will not be able to use this object in our system. So publish is necessary to make our object operational and useful for us. Let's do this. Some years ago, publish took a lot of time. It may took up to one minute of time. Now this operation is well automated and now we have no serious reasons to separate, save and publish operation. Also, when you click publish, save is performed automatically. So you may just use publish button, forget about save button and it will work for you because publish now works really fast. Okay, so when we finished with it, we can close our page. By the way, this page is called object editor or object designer and now we have our object status is okay. So you see it's applied to the database server. So we still have a C star, which means not everything was saved on this, but at this moment, our object is already working. So it can be used for us and we can try to use it in our environment. Let me show you how we can use it. We can go to studio workplace, find lookups section. As you can see, we have 120 existing lookups. One of the recent one, you can see something strange with no name here, but if we sort by date of creation. So this is a list of registered lookups and we can see what recent registrings were done, like white list of pages, open instructions, access to tag, print, or something like base product functionality recently added here. So we can register our object that we created as lookup in order to make it easily managed and we can look at it and we can even fill it in with some data. So when we click new lookup, it doesn't create new table. New lookup means register existing object as lookup. Our object is called a real-t type. We can name custom, we can provide custom title of this lookup. So name is separate from object as you can see and we can save it. So this operation is just for registering object as lookup. Once we did it, we can click open content. And that's how we can manage our lookup contents. The easiest way to manage object data is to register any object as a lookup, then you will be able to see its contents. So we can create new record here and we can manually type some data. Like first one, real-t type which we work with, it will be probably house. So it's a private house. We can save it. This is so called editable list and we are not using any separate edit page for it. So we just manage data directly in this list. Another one will be apartment. As you can see, numbering works for us automatically. There's a no code too. Thanks developers for this. You can also use description if you want, but I'm not really needed. So we can also add more real-t types. What else? It could be office space. It could be parking lot. And something very unusual like a castle. Just an example. And I also wanted to show you some additional behavior here with a numbering. So let's imagine you tried to create new one. But then no data or something else. So you think that, oh, you don't want to create it. You see the code was generated, but then you just cancel. OK, if you create one more, you see the number goes on. You cancel. If you create one more, you see numbering is going on. And it will be not rolled back. The reason of why it performs. So when it generates, it does not know. Are you planning to save it or not? So it generates new number, keeps, currently created numbers, somewhere in the database in so-called sequence in the database structure. And then we have no option to roll it back. Because while we are inputting such data, someone else also may create new records. So if system is expected to be used by sound ends of users, we have no option to easily roll back such numbers. But it's not a big problem. Even if you have some gaps and missing numbers, it's not a problem, but it will. So you see that numbering is generated using database tools. This is extremely reliable. And physically, sequence database object is used for it. Bus is telling us about an appointment. And we've watched the video. Thank you, Bus. See you tomorrow. Thank you for your message. Any other questions? Please, you are welcome at any time. So now you understand. We input some data here. This data is physically saved in our real database. Let me show it for you. An example select ID, name, ROM, USR, realty, type, classic. This is the name of my object. I expect to see the name, the same name of my data table. Now you can see the same five records with some IDs are created. I can also search for created on and also USR code. So here are my columns. You can see you can select all the data. So this is physical data saved in my database. It's pretty simple. And of course, when you develop your big project, you will not pay so much attention to every single lookup. You will do it in much more automated way. But this is an example which will let you understand and will make better feeling of what object is and how it works. That's why we discuss it in so technical details. If you need to change something in your object, you can open it for editing. You can find corresponding property and change it easily. If necessary, you can customize your columns. You may rename some columns. You can add the new columns for existing columns. You can slightly change their properties. It will be not possible to change the column code. But you can change column title if you want. So for the inherited columns, there are some limitations on what is available for you for change. So generally speaking, you can manage your object. You can change them. Then you can say you can publish. That's how it will be applied. In big scale solutions, you will create tens of different lookups and create your escapeable to help you with it with automation of lookup creation using application hub tools or using section wizard for classic UI. So it will be not so boring each time when you create new object. This is technical right now just because we need some practice. We need to look at object structure. So OK, we have our object ready. We have some data here. So how we can share it with our team members or how we can deliver it to test environment. Of course, we need to download the ecosystem if we want to submit everything to the poster. But here is very frequent mistake that a lot of the beginners usually do. This will be about data part. So saving anything to disk here is OK. And in our package, we only have test dummy process and we have our object. If we submit this contents to version control repository, it will mean that our package only includes structure. So it will be included in this object. And some test process. If other developers install our changes, they will not see contents of lookups and they will not see registered object as a lookup. So this is a very typical mistake of beginners. They see their environment. They fill in with data. They think that everything looks OK. And then they just export their package install, for example, in test environment. And then they realize they miss lookup contents and they also miss lookup registering data. So we have technically only two options. How we can transport such data. The most recommended option is item called data. Data item is a special part of the package. And second option, which is also supported, but it's harder to use is asco script. Asco script can be used for any kind of data changes or any kind of asco operations that you want to run when your package is installed on some target environment. Asco script is much harder to manage. And in general, it's much more powerful and much more dangerous. So you should only use asco script. If you have enough asco experience, and I always recommend you to check your code with someone else who also have experience in asco just to make sure you will not do anything dangerous in your database. Asco script can be easily used for permanent schedules, damage for your system. So your creation will not work anymore if you do intentionally some deleted system data. So two options to transport data, data items or asco scripts. I recommend you to use data items as much as possible. And when you create data item, these two actually is a snapshot of some data records taken from your source developer environment. Obviously, we need to specify what source object will be used for it. In my case, I should select for my object code, which I recently used to register my lookup and lookup section. Unfortunately, you have to remember this code named by hard and this object is called lookup. This lookup object includes a list of registr it. Objects in our lookup section, and in general, we'll have 121 records here. So, 121 records and each single record in the lookup section represents registering of the object as lookup. We need it because probably we would like to be able to go to this lookup section to find corresponding object to open its contents on test environment just to check out that we have everything correctly here. So, this registering was done as developer environment and it makes sense to transport it as part of our solution to test and production. Such data is saved in a system object named lookup. That's why we go and search for the object named lookup. We can find it by name, by code. And we can also provide some unique name here. For example, we can add something useful, reality type class, something like this. I do it just to make it unique and good looking and self-explanatory. So, it will be easy to understand why we created this data item. As you can see, the system offered us a set of columns, but we can also add a couple of more columns here. I'm interested in date of creation created on column here in the list of saved columns. Data item is a snapshot of data. So, we will take this data from our source database and save it as part of our package. Bound data taps represent exact records to be saved into our data item. So, you can manually add such records. In total, we have 121 records, but most of them are based product contents. So, we do not need to transport based product stuff. We expect it to be present at our target database. So, we do not need all of them. We can use our created on date column to sort and easily find without user filters. You can also use filters, but I prefer to make it as easy as possible. So, we can sort by descending order, by date of creation, all registered lookups. And that's how we can easily find our reality types single record. This is a registering of the reality type object as a lookup. We can only select this data, select button, and that's how we saved only one data row in this data object. Then we just click save, and our snapshot of data, which includes only one data row, will be saved into our package now. You see data item is created. This is only registering over an object that's not the contents. So, for the contents of the object, when we open it, we have five records here. This is our contents. We need to make one more data item. This is quite easy. Add, again, data, and we select an object. We have to specify object code here. Thanks developers because code is unique. USR, real to type classic. You can easily find it. I prefer to use codes because they are always unique, and system keeps this uniqueness. And titles sometimes are a bit ambitious, especially if you use non-English language. So, you may struggle with finding some corresponding title, and I prefer to use codes. We can provide some common suffix just to make sure what we are doing here. If necessary, we can add more columns. But the most important, of course, is bound data. And we can select all the records. All the records we have from source environment will be saved into our package as a special part, as a data item. And we save it. And now, our data item becomes part of our package. Now, you see stars here, which means our items are not fully saved. So, we have to perform download packages to file system action. In order to save our stuff, no need to use camera standard, because it will be recorded. So, we'll stop it. Okay. So, changes were saved on disk. Stars disappeared. You can find all the items in our package here, including data part. Now, you see some data records are saved as a JSON data values. And you can see translations into all our support of 23 languages here. So, data items also include translations. And it fully saves on disk. Everything is correct. And now we have object and couple of data items are presented at a distribution of object as a lookup and represented contents. Our object. So, now our solution is full. And if we export this package as zip archive, then if we import it somewhere on test environment, to work and user will be able to find our new lookup and lookup section. User will be able to find its contents and user will see such data. Maybe it's time to practice with Git. And let's make one more commit. Now you can see a lot of changes. 80 different changes mainly. This is our data parts. Also, we have new object here. And physically it means big set of files and folders used inside of our package folder. So, we can name something like real. Teap. Type. Classic. Workup added. This is the sense of our change. We perform Git commit to our local repository. Then we do Git. And push to submit our changes to the common repository. Great. Everything is done. Now, common repository also felt such changes. You see three commits. And you can see comment history if interesting. You can see all the changes here. So, it will be easy to check previous various current values and so on. So, what I need to tell you about data items in addition. What do you know now? Data items can be used not only for inserts. They are also used for updates. Let me explain what I'm talking about. So, originally we have five records for our data. And let's imagine we already exported our change. We imported it somewhere to test and production and everything is okay. So, our solution was successfully delivered to test and production and our users are happy. But sometimes later, probably analysts or business owners decided to do some changes. For example, they decided to rename office space into just office. And we can do this only at developer environment because we need to share all such changes to all other environments including testing production. So, such changes should be started from developer environment first. And then someone decided to rename parking lot into just parking. So, now we have some changes made at developer environment and we need to populate them to all other systems. Data items can help us with it. But you need to know how to properly set it up. Let's open this data item for the contents of our lookup. You can also sort by date of modification to see the most recently updated items first. So, we can see this one the most recent. Let's open it. Now, I will tell you a bit more about how system operates with data. So, let's imagine such data items are... So, such data items is being loaded at target environment. System is capable to prevent duplicates and it uses key columns to detect presence of the record, which is being processed right now. As you can see, we have key or ID. So, ID column is set as key and when system will load within the procedure of loading your package, it will take first row, it will take this ID and then it will check. Do we have such data record at our target database or not? Yeah, it's okay. It will just insert all the columns that we have for this data record. And it's not a big deal, not a problem. But if record exists, system is capable to update existing record. And here, you will face something which is a bit tricky and you may fail for the first time. And you will have to look carefully at the settings of your columns. Because system will perform update only for columns marked with the first update option. And by default, as you can see, no updates are asked here. So, when record will be found, system will just skip it because no columns should be updated. So, if you changed names right here and you know that such data was already traveled somewhere and you need to update it. So, you go to your corresponds data item. You make sure you set first update option for columns that you need to update. Also, you may check some other columns if you're not sure and you also want to update. So, you know the source of truth is your developer environment. So, if something else was changed at your target system, then you have to update it anyway. So, first update is not set by default. If you expect to perform update operation, you should take care about it. And once you do this, your update will work. Also, I need to tell you that in our real database, now we have office and parking. And if you carefully look here, you will see that we still have old values here. This is a proof of this concept, what I told you previously, that data item is a snapshot of your database contents, taken at a certain moment of time. So, when this data item was created, we had older values here. That's why we can see it here. If you want to actualize it to make it actual and read it from your database, you can just click actualize data. When you do this, system will refresh data item contents. And now you see office and parking exactly as in our database now. Let's check column settings, correct, and now we can save it. So, if you create your data item like this, and if you took care about the first update option, then you changed some source data records in your source database. You should actualize data, make sure your data records are fully properly updated, and then just save it in your package. Of course, your date and time of the item will be changed. And next time when you export your package and import in some target environment, because of change the date of modification, this item will be processed and corresponding updates will be performed. The same happens with our system shared with the git. So, we need to save everything in file system. Then we will commit our changes to our common repository. And it will be an example of how we can do some updates in data and populate it on other environments. Now you can see we have only small part of changes here. So, we have only some data changes, but they are present. So, it will be woke up data updates. Or maybe it's better to say, real team type data updates. Okay. So, we can commit it to push and that's how our changes will be correctly saved and it's about updates. You may ask me about the delete scenario. What happens if in our source database, we finally realized that castle will be never used and should be deleted from developer environment and for testing production. Unfortunately, data items cannot help us to delete such data. So, if you really need to remove your data from target environments, you have the only way for this is SQL script. So, as example, I will show you how we can write such script. We can use search by name or by ID. And we can create this SQL script in our package, add the SQL script. You should be really, really extremely careful with it. We will provide its name like you as are, Dal, castle, real, tea type. Of course, in real life, you will probably never use this, but this is some like a training example for you. So, you can create SQL scripts for some specific needs. The type determines the way, the moment of time, when your script will be executed in the scope of package loading procedure. Before package is at the very beginning, after package means after new tables will be created and processed. So, after schema data, it's after package data was loaded and uninstall app is the very rare case when you will need to run some scripts when your application is removed from the system. So, when it be at the very end, after schema data, we're not using backward compatibility because we're so strict conditions. So, it makes your SQL scripts almost useless. And the backward compatible is just an information appropriately. We can just keep it off. So, I will write some script like delete from usr, real, tea type, classic. This is our name of the object. And then where name equals something like this. So, this is an example of a script which intentionally removes some data. And this script will remove nothing if no data found. This is easy example. I do not use ID and I'm using this three name just to make it simple and easy to understand. Such scripts are dangerous. So, you should be very careful in doing such things. You can validate it, you can check, okay, no problems, you can save such script. And also, which is interesting, you can even run such scripts on your environment. As you can see, status needs to be installed in database means that this script was not executed at this database. So, if we run it now, you can go to actions in right part here, then install, which means run as go script. You can do it carefully. And if script finishes with an error, it still will have status. And also, you will see its properties and last error message text will show you last error which happened with running this script. In my case, it was successful. So, my script executed with no errors. And now we can check our lookup columns, lookup contents. Now you see castle disappeared. So, it was physically removed from our source database. And also, when this script will go to our package and will be executed on some target environments. Also, the script will remove necessary records from our target environments. You should be careful because if someone already started to use such data that you plan to remove, you will have some cascade problems with it. So, you will have referential integrity exceptions. You will need to look at connected data. And ideally, you should think of it in your script. You should process such scenarios. And you should think of what to do with connected data entities. And also, the script is not saved on disk. So, if I will click on what packages to file system, I will have everything saved on disk. Our session comes to an end today. And it looks like we have no enough time to work with a complex example of virtual objects. And I will show it a bit later. But today, I plan to make a couple of more proportional steps for us. So, now we saved everything on disk. And later, we will start with the building of our new applications. And we will need some base product parts, which are very common to be used. I'm talking about contacts and accounts. And also, we will need some additional tools. So, my plan is, at the end of the day session, to show you how you can add some necessary, frequently used marketplace add-ons that will really help us to operate in future. So, here my example with the lookup is almost done. And also, when we removed some data from the lookup, you see our snapshot still keeps this castle. So, this castle is no longer present on our database. And it makes sense to actualize data. Now, you see I removed it. Even though, if I do not remove it, my item was not changed. So, it's not correct. I think that if I keep some data here, which is not present in real database, this is mistake. So, I should avoid such mistakes. I should actualize data, not to keep any, like, non-existent records in my contents of the package. So, actualized data saved it. Now, everything is consistent. So, my castle fully disappears from my contents here. And we can also save it again to disk. So, my plan for today session end is to show you how to install some necessary marketplace add-ons into your environment. We will need it later. So, I have opportunity to show you. Let's go to settings. Then go to application hub. This is a special part of managing our system with cell code applications. I will discuss and explain what application is tomorrow. Currently, we will use this application hub only for inserts. So, only to add some useful items into our environment. So, add new application, marketplace powered. So, we can find a word of application there. And also, we have some base product tools made by creation. Now, I need customers 360 because it enables contacts and accounts section in my system. So, simply speaking, when you install customers 360, you will have new sections in your system. You will have accounts and contacts designed in Freedom UI. This is very useful. Very commonly used. So, almost any project implementation on creation uses contacts and accounts. So, we will definitely need it out of the box. The toolbox, stuff of our studio system does not include this. I will explain why a bit later when we will talk about composable apps. So, let's install customer 360. There is a high degree of integration and seamless connection between my local website and marketplace.creation.com. So, I just click install. You see some automation works. It asks me to confirm. Okay, no worries confirm. One more confirmation about app that I plan to install. Anyway, confirm where it be. So, it will take just several seconds, possibly up to 30 seconds to install this app. And as a result, expect to see accounts and contacts sections added to my system. They will be displayed in Freedom UI. So, you will see the first Freedom UI page at our sessions today. And the main reason why I do this is I need contacts and accounts in my future examples. When you added something to your app, it makes sense to download installation logs. This includes a lot of technical information, but sometimes it could be really helpful. And this installation logs can be kept for some time on your disk just for future reference. Because even in case of successful installation, sometimes you may face situations where you see something that you do not expect. And working with such logs can be efficient to check it out and to see some technical details about your installation. At least we can see how much time it took. So, 1437 till 1510. It looks like 33 seconds. So, took on the 33 seconds to install this app and all the technical steps that were done here are listed. So, if interested, you can see and find no warnings, no errors. You can see even some SQL scripts were installed. And also, I just forgot to say that SQL script is database dependent. So, when I created my own script, it was only for, let me show the properties here. It only for Microsoft SQL type of the database. If you need a similar script for POSGREE, you have to create another SQL script. That's why base creation product, if you will filter by SQL script only, it always includes three types of SQL scripts. For each business action that we need. For example, let me scroll down and find any kind of procedures. I create on the channel tables for POSGREE separately for Oracle separately for Microsoft SQL. Three different SQL syntaxes are supported. And that's why if your solution is intended to be supporting several different database engines, you have to make several scripts for it. But mainly when you develop your projects, you will know for sure target database type. So, you only, you can focus only on corresponding focus, corresponding target database type. It could be most frequently. It could be Microsoft SQL or POSGREE. If you expect to deploy your solution in creation cloud, it's highly likely that you will have POSGREE SQL in the cloud condition. So, it makes sense to use the same type of the database for your own local development. But it's not mandatory. If you develop on Microsoft SQL and then deploy your solution on POSGREE, it will also work. If you support all necessary database dependent settings like necessary scripts also for POSGREE not only for Microsoft SQL. Main part of configuration is notes and database specific. So, when you develop an object, it will normally work in any type of supported databases. Okay, it was just a distraction. So, let's go back to our logs. Now you see it took only 33 seconds to install. It's interesting to see results. Probably we need to reload main page just to suppress any kind of browser cache issues that possibly can appear. So, now we can see a bit more workplaces. Originally, we had only one studio. Now we have OAPS work place studio and we have new one, which is called customer 360. We have contacts, the rhythm UI section here. You can easily check if the section is freedom UI or not because only freedom UI section offer you. They offer you to shrink list columns easily. In classic UI, you cannot do this. So, let's go for example into look up section. You can't do this. You only can shrink columns by going to setup summaries. To setup columns that filled to display and that's how you can do that shrink manually. In freedom UI, you can do it easily. So, that's how you can easily detect which type of UI you are working with. But also you can remember position of buttons in freedom UI, managing buttons are usually the right part. And fonts are different. The style of the list is a bit different, a bit different functionality of buttons in list. And you can see you can hide and freeze buttons, freeze columns in list. So, freedom UI is much more rich with UI capabilities and it's considered as a future of creation. And classic UI is now considered as a legacy which has a lot of implementation. So, probably, there are thousands or even tens of thousands different solutions are currently running all over the world in classic UI. So, creation supports both types of UI so far. This is example of a classic UI, sorry, freedom UI list. You can open edit page. You will see page reach of controls with, oh, no, no, no, no. This is a classic UI stuff. So, this is still an example of a, it's not the glitch, it's kind of behavior connected with a cache and server side. So, we have to log out. We will need to log in. I'm going to use my name. What's happened with my saved users? Yeah. Sector wise here. I want to use this. Okay. Probably developers changed some behalf and login page which now made it a bit harder to use saved passwords and browser. Okay. So, I logged in again, contact section. Now, you will see edit page with no any cache issue. This is example of a freedom UI edit page. You still see some freedom UI capabilities like possibility to shrink lists, more reach components with colors, customizations and so on. So, we'll study how to build such pages. You will know. And if someone of you already passed our customization course, you already know how to do such things. So, this is example of a freedom UI user interface accounts also shown as a list and edit page. So, context represent physical persons with names, emails and dresses and so on. Accounts represent companies like Samsung, like Tesla, like others. So, some companies that you may work with and you need to keep information about them in your system. This was example of customers who 16 stored into our app into our system. I have a couple more tools to be installed. Let me quickly show it for you. It would be end of the day session. So, not so hard. Still a bit strange. The application hub is empty here with me, but this page because something unusual. Yes, now it's better. Now you see customers 360s already installed and we will study what an application is out works. Now, we will just install couple more apps from our market face because we will need them in future example. So, market face powered here, I need to named data binding. I will search by the word bind easily finding this data binding tool, select it. Click install button. Thanks for automation here. Confirm and install this installation will take a bit longer because it will need to compile my environment during this installation process. So, this takes a bit longer, but it's still okay. And I need this data binding tool because it helps to create data items easily. So, data items can be automated and you can create them with several clicks and it's easier than to make everything manually. So, data binding tool takes some time to install. It's pretty old tool. I think it exists maybe for five years and is designed for an older version of creation. And it also has a lot of support in classic UI. But now mainly we need it to support our creating of data items. And this help, so this tool helps to save our time and to reduce boring part of the work. You can download installation of all to see how long it took to load this. Let's check it out. Our session is almost over. So, you see 24, 15, then 25, 16. It looks like one minute and one second and like 61 seconds took to install this solution. No errors, no any warnings here. Perfect. Everything is okay. Everything is okay. So, our app was installed and one more final thing. So, we can do this and you see data binding item. One more item which I want to install from Marketplace is a special tool called maintenance tools for creation. This maintenance tools was made by partner which previously was named CISO. You probably saw its icon. Now it's named Neo Technologies from Switzerland. And they use just a standard creation API. And this tool has two major functions. Clear a red disk cache, but you don't really need it often. But the most important and useful feature is restart the app. The start application. Unfortunately, creation doesn't have this function out of the box available in user interface. And partners from Neo Technologies decided to fix this issue. And they just made a UI button to do this. So, this app simply adds a couple of buttons into our creation user interface to make it easy to restart the app or to clear a red disk cache. I will use this restart app. We will need it. We cannot avoid it. Unfortunately, and in our examples, you will see it. You see 2708 started 2718 finished so it took only 10 seconds for installation. You probably will ask me about why am I so obsessed with installation time. This is important because this is 10 seconds of downtime for your system. If you do some kind of installations on your production, your end users will not be able to operate with your system during this installation procedure. So we still have non zero downtime. And this is important to track along it took for creation to install something, especially if you do it in the middle of working hours. So, my installation was successful. We can also go back again to application hub. Now you see one more app, Internet Stools. And I can show you where this maintenance tools can be found. It will be into our settings page, physical, it's called system designer. But now developers decided just to call settings. At the end of this page, you will see new buttons originally we had only advanced settings. But also now we have clear ready and restart application will need restart application later. Unfortunately some some let's say study like learning examples will require this restart application action and we cannot avoid it in some cases. And today session is over. Thank you for your time today we moved forward with work and objects. We discussed how to build data items how to operate with lookups. We also worked with Git and tomorrow I plan to show you one more example with data this view and we will move on with building user interface. I went to focus on freedom UI mainly on freedom UI. And if we will have some significant demand on classic UI stuff, for example, you expect to work or support existing classic solutions. We will have to take time also to discuss some classic UI tools, but mainly my focus will be on freedom UI and programming inside of it. So thank you for your time today. Our session is over in case if you have any questions feel free to ask now. Your homework as usual is to watch this video to represent all the steps or produce all the steps for today session working with your package creating new lookup, new object register it as lookup and practice with data items. So this will be your homework and tomorrow we will continue doing more complicated things. Thank you. Thank you for your time questions, Padi. Yeah, I do. Just with the apps installed are they installed then similar to how you would set up a packet on the backend. Oh, yes, physically they represent as packages if you reload our configuration section, you will see that we have couple of more packages here and for example, the package named GLB data binding represents our data binding tool and maintenance tools. I find it. It's called CSL maintenance tools is changes customizations now setting space to enable couple of buttons. Yeah, and customer 360 see 30 300 okay, see the customer success surprisingly low. I need a bit more. Okay, let's search just for 316. Yeah, customers in 60 represents 3 packages in one archive. So we will study how application worked how it is created and what is inside tomorrow. You will see that application finally keeps some packages behind it. And when we load such applications physically will load one or several packages. Here you see customers to 60 it includes several packages. So that's how it works and to. Physical application is a bit artificial thing physical, we operate with packages. So anyway, you can see everything which was customized here as a package and the package contents inside of configuration section. Thank you. Thank you. Any other questions, please. Thank you. When I am going to advance sitting the configuration configuration page doesn't work. It just reload. It's because you're probably using windows home. If you use windows home, you have to close previous page. In this case configuration page will be working normally. Yeah, let me. I have no options how to make it better. Unfortunately, probably you can consider. I didn't do. You can upgrade to pro windows pro version. In this case, you will have no such issue. This is kind of limitation connected to this web socket. And this is something that makes home different from pro and it's not so comfortable. I agree. Thank you. Thank you. Okay. And it looks like to share. Had a question. Yes, to share, please. If we have a new look up like if we have three more look up and we want how we can then update it. And like a system designer, do we have to create the data file again or. We can update in the existing data file. If you are. So probably you are talking about new data records added to exist in lookups table. Am I right? No, like if you suppose it is total number of your books are 121 right now. If we add like five new lookups. Then how we can bind those. Oh, if you have five new lookups, you have finally to create 10 new data items or maybe less than 10 because one data item for lookups can include many records for registering. So the minimum amount of data items in your case will be six one for five lookup records and five others for each separate data contents of your lookups. So simply speaking any lookup should include data item for registering of the lookup and data item for the contents of the lookup. In this case, it will be the most comfortable for your end users because they will always find all your lookups in production and lookups section. And they will be able to open it to see their contents normally and data items guarantee such transport of records. Thanks. Thank you to Sharer and that's all for today. If you will have more question and understand that probably questions will appear later when you try to practice. So you may use my email. These send me messages. I will try to find time to answer you. So I will tomorrow session will be as usual and we will continue working with objects and we will start to work with user interface programming. Thank you very much for your time. See you tomorrow. Good luck. See you tomorrow. Thank you. Bye.",
  "summary": "you you today is session number two and we will continue to do our first steps on core data and sports solutions so you will see how it works in general. I hope it will be clear for you. Okay, so in case of any questions, feel free to ask.",
  "topics": [
    "crm",
    "bpm",
    "integration",
    "development",
    "configuration",
    "ui_ux",
    "database"
  ],
  "complexity_level": "intermediate",
  "commands": [],
  "api_references": [],
  "code_examples": []
}