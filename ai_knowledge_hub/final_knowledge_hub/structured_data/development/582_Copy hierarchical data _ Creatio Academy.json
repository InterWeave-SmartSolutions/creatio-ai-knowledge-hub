{
  "id": 582,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/8.0/back-end-development/data-operations-back-end/copy-hierarchical-data",
  "title": "Copy hierarchical data | Creatio Academy",
  "category": "development",
  "description": "Copy hierarchical data to copy both the database table records and the records of the connected tables. You can copy the hierarchical data of [ProductHierarchyDataStructureObtainer] and [ProductConditionHierarchyDataStructureObtainer] Creatio tables out-of-the-box. To copy the data of other tables, customize hierarchical data copying.",
  "content": "This is documentation for Creatio 8.0 . For up-to-date documentation, see the latest version ( 8.3 ). Version: 8.0 On this page Level: advanced Copy hierarchical data to copy both the database table records and the records of the connected tables. You can copy the hierarchical data of [ProductHierarchyDataStructureObtainer] and [ProductConditionHierarchyDataStructureObtainer] Creatio tables out-of-the-box. To copy the data of other tables, customize hierarchical data copying. You can use hierarchical copying in a custom web service . For example, if you copy data from an external service to Creatio or connect to an external database. For example, the Products section is based on the [Product] database table. The product page contains custom details. If you copy the section records hierarchically, Creatio will copy the data of both the record and the connected details. Creatio applies the table's access permissions when copying. For example, the user lacks access permissions to read and add records to the [Contact] table. If they try to copy hierarchical data, Creatio will not copy the record and notify them that it is impossible to execute the operation. Structure and operational procedure of hierarchical data copying ​ View the components of hierarchical data copying in the table below. Components of hierarchical data copying Name Description Classes and interfaces Controller Controls the copying process IHierarchyDataCopyingController HierarchyDataCopyingController controls the copying of the database record and the connected database data. Obtainer Obtains the structure of the current table and connected tables from the database HierarchyDataStructureObtainerContext selects the algorithm to obtain the hierarchical structure of the table and connected tables. IHierarchyDataStructureObtainer HierarchyDataStructureObtainer obtains the hierarchical structure of the table and connected tables BaseHierarchyDataStructureObtainer ProductHierarchyDataStructureObtainer obtains the hierarchical structure of the [Product] table and connected tables. Container Saves the structure of the current table and connected tables HierarchyDataStructure saves the information about the hierarchical data structure. Mapper Manages the structure IEntityCollectionMappingProcessor EntityCollectionMappingProcessor obtains the structure from the database and copies data. View the class chart of the hierarchical data copying on the figure below. The operating procedure of hierarchical data copying. The service class calls the copying process controller and passes the table name and ID of the original record to the controller. The controller makes a copy in several stages: Retrieve the structure of the table and connected tables as a unified form. Save the table structure as a unified form. The controller copies records according to the structure obtained on the saving stage. Saving as unified form saves the table structure to the object of the HierarchyDataStructure type. If the table has connected tables (a column links to the record of a different table via an external key), the controller will place them to the object (to the object collection of a similar type). Should you need to expand or update the structure obtainer mechanism, the unified form will let you process the new structure without additional modifications to the controller code. See the template of the unified form the controller uses to save the table structure below. Template of the unified table structure form /* The class contains the hierarchical data structure. */ public class HierarchyDataStructure { public string SchemaName ; public List < string > Columns ; /* If the current structure object does not have a parent foreign table name, use null here. */ public string ParentColumnName ; /* The child structure list. */ public List < HierarchyDataStructure > Structures ; /* The filter list. */ public HierarchyDataStructureFilterGroup Filters ; } Customize the hierarchical data copying ​ You can customize hierarchical data copying in several ways: Add a custom data obtainer implementation (the HierarchyDataStructureObtainer class). Modify the data obtainer implementation (the HierarchyDataStructureObtainer class). Modify the controller implementation (the HierarchyDataCopyingController class). Add a custom hierarchical data copying implementation. Add a custom data obtainer implementation ​ The ways to add a custom data obtainer implementation (the HierarchyDataStructureObtainer class) are as follows: Use the base interface. Inherit the base class. Use the base interface to add a custom data obtainer implementation ​ Create a class that implements the IHierarchyDataStructureObtainer interface. Name the class according to the following template: [NameOfTheObjectToCopy]HierarchyDataStructureObtainer . Add a custom implementation of the ObtainStructure() interface method. Make sure to specify the virtual modifier. See the example of the data obtainer implementation that uses the base interface in the ProductBankCustomerJourney package → the ProductHierarchyDataStructureObtainer and ProductConditionHierarchyDataStructureObtainer classes. Inherit the base class to add a custom data obtainer implementation ​ In this case, base implementation is the standard record copying process that does not affect the connected records. The BaseHierarchyDataStructureObtainer class of the base NUI package implements the obtainer. Create a class that implements the BaseHierarchyDataStructureObtainer interface (the NUI package → the BaseHierarchyDataStructureObtainer class). Name the class according to the following template: [NameOfTheObjectToCopy]HierarchyDataStructureObtainer . Extend the base obtainer implementation See the example of the data obtainer implementation that inherits the base class in the ProductBankCustomerJourney package → the ProductHierarchyDataStructureObtainer class. Modify the data obtainer implementation ​ Create a class that replaces one of the following classes: BaseHierarchyDataStructureObtainer (the NUI package), ProductConditionHierarchyDataStructureObtainer (the ProductBankCustomerJourney package), ProductHierarchyDataStructureObtainer (the ProductBankCustomerJourney package). Add a custom implementation of the base class's ObtainStructure() replacing method to the replacing class. Modify the controller implementation ​ Create a class that implements the IHierarchyDataCopyingController interface. Name the class according to the following template: [ObjectName]HierarchyDataController . Add a custom copying algorithm to the CopyRecord interface method. Call a single method of another class as part of a single algorithm step. Also, create a class object to call or minimally prepare data to pass to the method as part of the step. Add a custom hierarchical data copying implementation ​ Add an implementation of the copying process controller ( HierarchyDataCopyingController class). The controller must call the structure obtainer ( HierarchyDataStructureObtainer class), the structure processor ( EntityCollectionMappingProcessor class), the structure container (the HierarchyDataStructure class) gradually. Add an implementation of the hierarchical data structure obtainer ( HierarchyDataStructureObtainer class). Create a class that implements the interface. Name the class according to the following template: [ObjectName]HierarchyDataProcessor . We recommend adding the processor class interface. This will let you add another implementation and replace the existing implementation, as well as unify the processors. Create a class that implements the IEntityCollectionMappingHandler interface. Add the calls to the structure obtainer (the HierarchyDataStructureObtainer class), structure processor (the EntityCollectionMappingProcessor class), structure container (the HierarchyDataStructure class) methods to the CopyRecord controller method. Create the HierarchyDataCopyingController class object in the custom class. Example that creates the controller object var copyController = ClassFactory . Get < HierarchyDataCopyingController > ( new ConstructorArgument ( \"UserConnection\" , UserConnection ) ) ; Call the copyController copying method. Example that calls the copying method copyController . CopyRecord ( schemaName , recordId ) ; Call hierarchical data copying ​ You can call hierarchical data copying from the front-end and back-end. Call hierarchical copying from the front-end ​ Use the callService() method to call hierarchical copying from front-end . See the call example in the ProductBankCustomerJourney package → the ProductConditionDetailV2 schema → the callCopyRecordService() method. Example that calls hierarchical copying from front-end /** * Call the record copying service. * @protected */ callCopyRecordService : function ( ) { this . showBodyMask ( ) ; var config = this . getCopyRecordConfig ( ) ; this . callService ( config , this . copyRecordServiceCallback , this ) ; } Call hierarchical copying from the back-end ​ Create the HierarchyDataCopyingController class object in a custom class to call hierarchical copying from back-end . Example that calls hierarchical copying from back-end var copyController = ClassFactory . Get < HierarchyDataCopyingController > ( new ConstructorArgument ( \"UserConnection\" , UserConnection ) ) ; To manage table data using the column mapping : Create a mapper class object that implements the IEntityCollectionMappingHandler interface in a custom class. Example that creates a mapper class object var entityCollectionMappingHandler = ClassFactory . Get < IEntityCollectionMappingHandler > ( new ConstructorArgument ( \"userConnection\" , UserConnection ) ) ; Call the mapper methods via the object. Example that calls the copying method entityCollectionMappingHandler . CopyItems ( data . SchemaName , columns , filterGroup , relatedColumnValues ) ; note If you create an object using the interface name, the developer will be able to replace the existing mapper implementation using a custom implementation. If you modify the implementation of an existing mapper, Creatio will recompile only the mapper class. The classes that use the implementation do not need to be recompiled. Learn more about creating objects using the dependency implementation mechanism in a separate article: Replace the configuration elements . To obtain the structure of a particular table as an object of the HierarchyDataStructure type: Create a HierarchyDataStructureObtainerContext class object in the custom class. Example that creates the table structure obtainer var _hierarchyDataStructureObtainer = ClassFactory . Get < HierarchyDataStructureObtainerContext > ( new ConstructorArgument ( \"userConnection\" , UserConnection ) ) ; Obtain the structure of a particular table. The ways to obtain the structure are as follows: Call the ObtainStructureByObtainerStrategy method and pass the schemaName parameter that contains the table name whose record to copy to the method. Call the implementation of the existing structure obtainer: ProductHierarchyDataStructureObtainer or ProductConditionHierarchyDataStructureObtainer . See also ​ Custom web services Object operation permissions (user documentation) Replacing class factory Structure and operational procedure of hierarchical data copying Customize the hierarchical data copying Add a custom data obtainer implementation Modify the data obtainer implementation Modify the controller implementation Add a custom hierarchical data copying implementation Call hierarchical data copying Call hierarchical copying from the front-end Call hierarchical copying from the back-end See also",
  "markdown": "This is documentation for Creatio **8.0**.\n\nFor up-to-date documentation, see the **[latest version](/docs/8.x/dev/development-on-creatio-platform/back-end-development/data-operations-back-end/copy-hierarchical-data)** (8.3).\n\nVersion: 8.0\n\nOn this page\n\nLevel: advanced\n\n**Copy hierarchical data** to copy both the database table records and the records of the connected tables. You can copy the hierarchical data of `[ProductHierarchyDataStructureObtainer]` and `[ProductConditionHierarchyDataStructureObtainer]` Creatio tables out-of-the-box. To copy the data of other tables, customize hierarchical data copying.\n\nYou can use hierarchical copying in a [custom web service](https://academy.creatio.com/documents?ver=8.0&id=15262). For example, if you copy data from an external service to Creatio or connect to an external database.\n\nFor example, the **Products** section is based on the `[Product]` database table. The product page contains custom details. If you copy the section records hierarchically, Creatio will copy the data of both the record and the connected details.\n\nCreatio applies the table's [access permissions](https://academy.creatio.com/documents?ver=8.0&id=262) when copying. For example, the user lacks access permissions to read and add records to the `[Contact]` table. If they try to copy hierarchical data, Creatio will not copy the record and notify them that it is impossible to execute the operation.\n\n## Structure and operational procedure of hierarchical data copying​\n\nView the **components** of hierarchical data copying in the table below.\n\nComponents of hierarchical data copying\n\nName| Description| Classes and interfaces| Controller| Controls the copying process| `IHierarchyDataCopyingController` `HierarchyDataCopyingController` controls the copying of the database record and the connected database data.| Obtainer| Obtains the structure of the current table and connected tables from the database| `HierarchyDataStructureObtainerContext` selects the algorithm to obtain the hierarchical structure of the table and connected tables. `IHierarchyDataStructureObtainer` `HierarchyDataStructureObtainer` obtains the hierarchical structure of the table and connected tables `BaseHierarchyDataStructureObtainer` `ProductHierarchyDataStructureObtainer` obtains the hierarchical structure of the `[Product]` table and connected tables.| Container| Saves the structure of the current table and connected tables| `HierarchyDataStructure` saves the information about the hierarchical data structure.| Mapper| Manages the structure| `IEntityCollectionMappingProcessor` `EntityCollectionMappingProcessor` obtains the structure from the database and copies data.  \n---|---|---  \n  \nView the **class chart** of the hierarchical data copying on the figure below.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/HierarchyData/scr_class_diagram.png)\n\nThe **operating procedure** of hierarchical data copying.\n\n  1. The service class calls the copying process controller and passes the table name and ID of the original record to the controller.\n\n  2. The controller makes a copy in several stages:\n\n     1. Retrieve the structure of the table and connected tables as a unified form.\n     2. Save the table structure as a unified form.\n  3. The controller copies records according to the structure obtained on the saving stage.\n\n\n\n\nSaving as **unified form** saves the table structure to the object of the `HierarchyDataStructure` type. If the table has connected tables (a column links to the record of a different table via an external key), the controller will place them to the object (to the object collection of a similar type). Should you need to expand or update the structure obtainer mechanism, the unified form will let you process the new structure without additional modifications to the controller code.\n\nSee the template of the unified form the controller uses to save the table structure below.\n\nTemplate of the unified table structure form\n    \n    \n    /* The class contains the hierarchical data structure. */  \n    public class HierarchyDataStructure {  \n        public string SchemaName;  \n        public List <string> Columns;  \n      \n        /* If the current structure object does not have a parent foreign table name, use null here. */  \n        public string ParentColumnName;  \n      \n        /* The child structure list. */  \n        public List <HierarchyDataStructure> Structures;  \n      \n        /* The filter list. */  \n        public HierarchyDataStructureFilterGroup Filters;  \n    }  \n    \n\n## Customize the hierarchical data copying​\n\nYou can customize hierarchical data copying in several ways:\n\n  * Add a custom data obtainer implementation (the `HierarchyDataStructureObtainer` class).\n  * Modify the data obtainer implementation (the `HierarchyDataStructureObtainer` class).\n  * Modify the controller implementation (the `HierarchyDataCopyingController` class).\n  * Add a custom hierarchical data copying implementation.\n\n\n\n### Add a custom data obtainer implementation​\n\nThe **ways** to add a custom data obtainer implementation (the `HierarchyDataStructureObtainer` class) are as follows:\n\n  * Use the base interface.\n  * Inherit the base class.\n\n\n\n#### Use the base interface to add a custom data obtainer implementation​\n\n  1. Create a class that implements the `IHierarchyDataStructureObtainer` interface. Name the class according to the following template: `[NameOfTheObjectToCopy]HierarchyDataStructureObtainer`.\n  2. Add a custom implementation of the `ObtainStructure()` interface method. Make sure to specify the `virtual` modifier.\n\n\n\nSee the example of the data obtainer implementation that uses the base interface in the **ProductBankCustomerJourney** package → the `ProductHierarchyDataStructureObtainer` and `ProductConditionHierarchyDataStructureObtainer` classes.\n\n#### Inherit the base class to add a custom data obtainer implementation​\n\nIn this case, base implementation is the standard record copying process that does not affect the connected records. The `BaseHierarchyDataStructureObtainer` class of the base **NUI** package implements the obtainer.\n\n  1. Create a class that implements the `BaseHierarchyDataStructureObtainer` interface (the **NUI** package → the `BaseHierarchyDataStructureObtainer` class). Name the class according to the following template: `[NameOfTheObjectToCopy]HierarchyDataStructureObtainer`.\n  2. Extend the base obtainer implementation\n\n\n\nSee the example of the data obtainer implementation that inherits the base class in the **ProductBankCustomerJourney** package → the `ProductHierarchyDataStructureObtainer` class.\n\n### Modify the data obtainer implementation​\n\n  1. Create a class that [replaces](https://academy.creatio.com/documents?ver=8.0&id=15221) one of the following classes: `BaseHierarchyDataStructureObtainer` (the **NUI** package), `ProductConditionHierarchyDataStructureObtainer` (the **ProductBankCustomerJourney** package), `ProductHierarchyDataStructureObtainer` (the **ProductBankCustomerJourney** package).\n  2. Add a custom implementation of the base class's `ObtainStructure()` replacing method to the replacing class.\n\n\n\n### Modify the controller implementation​\n\n  1. Create a class that implements the `IHierarchyDataCopyingController` interface. Name the class according to the following template: `[ObjectName]HierarchyDataController`.\n\n  2. Add a custom copying algorithm to the `CopyRecord` interface method.\n\nCall a single method of another class as part of a single algorithm step. Also, create a class object to call or minimally prepare data to pass to the method as part of the step.\n\n\n\n\n### Add a custom hierarchical data copying implementation​\n\n  1. Add an implementation of the copying process controller (`HierarchyDataCopyingController` class). The controller must call the structure obtainer (`HierarchyDataStructureObtainer` class), the structure processor (`EntityCollectionMappingProcessor` class), the structure container (the `HierarchyDataStructure` class) gradually.\n\n  2. Add an implementation of the hierarchical data structure obtainer (`HierarchyDataStructureObtainer` class).\n\n  3. Create a class that implements the interface. Name the class according to the following template: `[ObjectName]HierarchyDataProcessor`.\n\nWe recommend adding the processor class interface. This will let you add another implementation and replace the existing implementation, as well as unify the processors.\n\n  4. Create a class that implements the `IEntityCollectionMappingHandler` interface.\n\n  5. Add the calls to the structure obtainer (the `HierarchyDataStructureObtainer` class), structure processor (the `EntityCollectionMappingProcessor` class), structure container (the `HierarchyDataStructure` class) methods to the `CopyRecord` controller method.\n\n  6. Create the `HierarchyDataCopyingController` class object in the custom class.\n\nExample that creates the controller object\n         \n         var copyController = ClassFactory.Get<HierarchyDataCopyingController>(new ConstructorArgument(\"UserConnection\", UserConnection));  \n         \n\n  7. Call the `copyController` copying method.\n\nExample that calls the copying method\n         \n         copyController.CopyRecord(schemaName, recordId);  \n         \n\n\n\n\n## Call hierarchical data copying​\n\nYou can call hierarchical data copying from the front-end and back-end.\n\n### Call hierarchical copying from the front-end​\n\nUse the `callService()` method to **call hierarchical copying from front-end**.\n\nSee the call example in the **ProductBankCustomerJourney** package → the `ProductConditionDetailV2` schema → the `callCopyRecordService()` method.\n\nExample that calls hierarchical copying from front-end\n    \n    \n    /**  \n    * Call the record copying service.  \n    * @protected  \n    */  \n    callCopyRecordService: function() {  \n        this.showBodyMask();  \n        var config = this.getCopyRecordConfig();  \n        this.callService(config, this.copyRecordServiceCallback, this);  \n    }  \n    \n\n### Call hierarchical copying from the back-end​\n\nCreate the `HierarchyDataCopyingController` class object in a custom class to **call hierarchical copying from back-end**.\n\nExample that calls hierarchical copying from back-end\n    \n    \n    var copyController = ClassFactory.Get<HierarchyDataCopyingController>(new ConstructorArgument(\"UserConnection\", UserConnection));  \n    \n\nTo **manage table data using the column mapping** :\n\n  1. Create a mapper class object that implements the `IEntityCollectionMappingHandler` interface in a custom class.\n\nExample that creates a mapper class object\n         \n         var entityCollectionMappingHandler = ClassFactory.Get<IEntityCollectionMappingHandler>(new ConstructorArgument(\"userConnection\", UserConnection));  \n         \n\n  2. Call the mapper methods via the object.\n\nExample that calls the copying method\n         \n         entityCollectionMappingHandler.CopyItems(  \n             data.SchemaName,  \n             columns,  \n             filterGroup,  \n             relatedColumnValues  \n         );  \n         \n\nnote\n\nIf you create an object using the interface name, the developer will be able to replace the existing mapper implementation using a custom implementation. If you modify the implementation of an existing mapper, Creatio will recompile only the mapper class. The classes that use the implementation do not need to be recompiled. Learn more about creating objects using the dependency implementation mechanism in a separate article: [Replace the configuration elements](https://academy.creatio.com/documents?ver=8.0&id=15221).\n\n\n\n\nTo **obtain the structure of a particular table** as an object of the `HierarchyDataStructure` type:\n\n  1. Create a `HierarchyDataStructureObtainerContext` class object in the custom class.\n\nExample that creates the table structure obtainer\n         \n         var _hierarchyDataStructureObtainer = ClassFactory.Get<HierarchyDataStructureObtainerContext>(new ConstructorArgument(\"userConnection\", UserConnection));  \n         \n\n  2. Obtain the structure of a particular table.\n\nThe **ways** to obtain the structure are as follows:\n\n     * Call the `ObtainStructureByObtainerStrategy` method and pass the `schemaName` parameter that contains the table name whose record to copy to the method.\n     * Call the implementation of the existing structure obtainer: `ProductHierarchyDataStructureObtainer` or `ProductConditionHierarchyDataStructureObtainer`.\n\n\n\n* * *\n\n## See also​\n\n[Custom web services](https://academy.creatio.com/documents?ver=8.0&id=15262)\n\n[Object operation permissions](https://academy.creatio.com/documents?ver=8.0&id=262) (user documentation)\n\n[Replacing class factory](https://academy.creatio.com/documents?ver=8.0&id=15221)\n\n  * Structure and operational procedure of hierarchical data copying\n  * Customize the hierarchical data copying\n    * Add a custom data obtainer implementation\n    * Modify the data obtainer implementation\n    * Modify the controller implementation\n    * Add a custom hierarchical data copying implementation\n  * Call hierarchical data copying\n    * Call hierarchical copying from the front-end\n    * Call hierarchical copying from the back-end\n  * See also\n\n\n",
  "analysis": {
    "word_count": 1571,
    "key_concepts": [
      "configuration",
      "section",
      "detail",
      "web service",
      "database",
      "operation",
      "package",
      "contact",
      "case"
    ],
    "use_cases": [
      "building applications",
      "custom development",
      "API integration",
      "system administration",
      "user management"
    ],
    "related_topics": [],
    "difficulty": "intermediate",
    "ai_tags": [
      "creatio",
      "intermediate",
      "documentation",
      "section",
      "detail",
      "configuration",
      "web service",
      "database"
    ]
  },
  "ai_optimized": true,
  "processed_at": "2025-07-28T13:26:12.786847"
}
