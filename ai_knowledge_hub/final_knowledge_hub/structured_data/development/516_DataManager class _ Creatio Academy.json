{
  "id": 516,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/8.0/front-end-development/classic-ui/data-operations-front-end/references/datamanager",
  "title": "DataManager class | Creatio Academy",
  "category": "development",
  "description": "DataManager class",
  "content": "This is documentation for Creatio 8.0 . For up-to-date documentation, see the latest version ( 8.3 ). Version: 8.0 On this page Level: intermediate DataManager class ​ DataManager is a singleton class available via the Terrasoft global object. The class provides the dataStore repository. You can upload the contents of one or more database tables to the repository. dataStore : { /* The DataManagerItem type data collection of the SysModule schema. */ SysModule : sysModuleCollection , /* The DataManagerItem type data collection of the SysModuleEntity schema. */ SysModuleEntity : sysModuleEntityCollection } Each record of the collection represents the record of the corresponding database table. Properties ​ { Object } dataStore The data collection repository. { String } itemClassName The record class name. Has the Terrasoft.DataManagerItem value. Methods ​ { Terrasoft . Collection } select ( config , callback , scope ) If dataStore does not contain a data collection that has the config.entitySchemaName name, the method builds and executes a database query, then returns the retrieved data. Otherwise, the method returns the data collection from dataStore . Parameters {Object} config The configuration object. Configuration object properties {String} entitySchemaName The schema name. {Terrasoft.FilterGroup} filters The conditions. {Function} callback The callback function. {Object} scope The scope of the callback function. { Terrasoft . DataManagerItem } createItem ( config , callback , scope ) Creates a new record of the config.entitySchemaName type. The record columns have the config.columnValues values. Parameters {Object} config The configuration object. Configuration object properties {String} entitySchemaName The schema name. {Object} columnValues The record column values. {Function} callback The callback function. {Object} scope The scope of the callback function. { Terrasoft . DataManagerItem } addItem ( item ) Adds the item record to the schema data collection. Parameters {Terrasoft.DataManagerItem} item The record to add. { Terrasoft . DataManagerItem } findItem ( entitySchemaName , id ) Returns the record from the data collection of the schema that has the entitySchemaName name and id ID. Parameters {String} entitySchemaName The data collection name. {String} id The record ID. { Terrasoft . DataManagerItem } remove ( item ) Selects the isDeleted flag for the item record. Once the changes are recorded, the record will be deleted from the database. Parameters {Terrasoft.DataManagerItem} item The record to delete. removeItem ( item ) Deletes the record from the schema data collection. Parameters {Terrasoft.DataManagerItem} item The record to delete. { Terrasoft . DataManagerItem } update ( config , callback , scope ) Updates the record that has the config.primaryColumnValue primary column value with the values from config.columnValues . Parameters {Object} config The configuration object. Configuration object properties {String} entitySchemaName The schema name. {String} primaryColumnValue The primary column value. {Mixed} columnValues The column values. {Function} callback The callback function. {Object} scope The scope of the callback function. { Terrasoft . DataManagerItem } discardItem ( item ) Discards the changes to the item record made as part of the current DataManager session. Parameters {Terrasoft.DataManagerItem} item The record, changes to which to discard. { Object } save ( config , callback , scope ) Saves the data collections of the schemas specified in config.entitySchemaNames to the database. Parameters {Object} config The configuration object. Configuration object properties {String[]} entitySchemaName The name of the schema to save. Leave empty to save the data collections of all schemas. {Function} callback The callback function. {Object} scope The scope of the callback function. DataManagerItem class ​ Properties ​ { Terrasoft . BaseViewMode } viewModel The object projection of the database record. Methods ​ setColumnValue ( columnName , columnValue ) Assigns the new columnValue value to the column that has the columnName name. Parameters {String} columnName The column name. {String} columnValue The column value. { Mixed } getColumnValue ( columnName ) Returns the value of the column that has the columnName name. Parameters {String} columnName The column name. { Object } getValues ( ) Returns the values of all record columns. remove ( ) Selects the isDeleted flag for the record. discard ( ) Discards the changes to the record made as part of the current DataManager session. { Object } save ( callback , scope ) Records the changes in the database. Parameters callback The callback function. scope The scope of the callback function. { Boolean } getIsNew ( ) Returns the flag that marks the record as new. { Boolean } getIsChanged ( ) Returns the flag that marks the record as changed. Use examples Retrieve the records from the Contact table /* Define the configuration object. */ var config = { /* The entity schema name. */ entitySchemaName : \"Contact\" , /* Exclude duplicates from the resulting dataset. */ isDistinct : true } ; /* Retrieve the data. */ Terrasoft . DataManager . select ( config , function ( collection ) { /* Save the retrieved records to the local repository. */ collection . each ( function ( item ) { Terrasoft . DataManager . addItem ( item ) ; } ) ; } , this ) ; Add a new record to the DataManager object /* Define the configuration object. */ var config = { /* The entity schema name. */ entitySchemaName : \"Contact\" , /* The column values. */ columnValues : { Id : \"00000000-0000-0000-0000-000000000001\" , Name : \"Name1\" } } ; /* Create a new record. */ Terrasoft . DataManager . createItem ( config , function ( item ) { Terrasoft . DataManager . addItem ( item ) ; } , this ) ; Retrieve the record and change the column value /* Retrieve the record. */ var item = Terrasoft . DataManager . findItem ( \"Contact\" , \"00000000-0000-0000-0000-000000000001\" ) ; /* Assign the new \"Name2\" value to the Name column. */ item . setColumnValue ( \"Name\" , \"Name2\" ) ; Delete the record from DataManager /* Define the configuration object. */ var config = { /* The entity schema name. */ entitySchemaName : \"Contact\" , /* The primary column value. */ primaryColumnValue : \"00000000-0000-0000-0000-000000000001\" } ; /* Select the isDeleted flag for the item record. */ Terrasoft . DataManager . remove ( config , function ( ) { } , this ) ; Discard the changes made as part of the current DataManager session /* Retrieve the record. */ var item = Terrasoft . DataManager . findItem ( \"Contact\" , \"00000000-0000-0000-0000-000000000001\" ) ; /* Discard the changes to the record. */ Terrasoft . DataManager . discardItem ( item ) ; Record the changes in the database /* Define the configuration object. */ var config = { /* The entity schema name. */ entitySchemaNames : [ \"Contact\" ] } ; /* Save the changes in the database. */ Terrasoft . DataManager . save ( config , function ( ) { } , this ) ; DataManager class Properties Methods DataManagerItem class Properties Methods",
  "markdown": "This is documentation for Creatio **8.0**.\n\nFor up-to-date documentation, see the **[latest version](/docs/8.x/dev/development-on-creatio-platform/front-end-development/classic-ui/data-operations-front-end/references/datamanager)** (8.3).\n\nVersion: 8.0\n\nOn this page\n\nLevel: intermediate\n\n## DataManager class​\n\n`DataManager` is a singleton class available via the `Terrasoft` global object. The class provides the `dataStore` repository. You can upload the contents of one or more database tables to the repository.\n    \n    \n    dataStore: {  \n        /* The DataManagerItem type data collection of the SysModule schema. */  \n        SysModule: sysModuleCollection,  \n        /* The DataManagerItem type data collection of the SysModuleEntity schema. */  \n        SysModuleEntity: sysModuleEntityCollection  \n    }  \n    \n\nEach record of the collection represents the record of the corresponding database table.\n\n### Properties​\n    \n    \n    {Object} dataStore  \n    \n\nThe data collection repository.\n    \n    \n    {String} itemClassName  \n    \n\nThe record class name. Has the `Terrasoft.DataManagerItem` value.\n\n### Methods​\n    \n    \n    {Terrasoft.Collection} select(config, callback, scope)  \n    \n\nIf `dataStore` does not contain a data collection that has the `config.entitySchemaName` name, the method builds and executes a database query, then returns the retrieved data. Otherwise, the method returns the data collection from `dataStore`.\n\nParameters\n\n{Object} config| The configuration object.Configuration object properties| {String} entitySchemaName| The schema name.| {Terrasoft.FilterGroup} filters| The conditions.  \n---|---  \n  \n{Function} callback| The callback function.| {Object} scope| The scope of the callback function.  \n      \n    \n    {Terrasoft.DataManagerItem} createItem(config, callback, scope)  \n    \n\nCreates a new record of the `config.entitySchemaName` type. The record columns have the `config.columnValues` values.\n\nParameters\n\n{Object} config| The configuration object.Configuration object properties| {String} entitySchemaName| The schema name.| {Object} columnValues| The record column values.  \n---|---  \n  \n{Function} callback| The callback function.| {Object} scope| The scope of the callback function.  \n      \n    \n    {Terrasoft.DataManagerItem} addItem(item)  \n    \n\nAdds the `item` record to the schema data collection.\n\nParameters\n\n{Terrasoft.DataManagerItem} item| The record to add.  \n---|---  \n      \n    \n    {Terrasoft.DataManagerItem} findItem(entitySchemaName, id)  \n    \n\nReturns the record from the data collection of the schema that has the `entitySchemaName` name and `id` ID.\n\nParameters\n\n{String} entitySchemaName| The data collection name.| {String} id| The record ID.  \n---|---  \n      \n    \n    {Terrasoft.DataManagerItem} remove(item)  \n    \n\nSelects the `isDeleted` flag for the `item` record. Once the changes are recorded, the record will be deleted from the database.\n\nParameters\n\n{Terrasoft.DataManagerItem} item| The record to delete.  \n---|---  \n      \n    \n    removeItem(item)  \n    \n\nDeletes the record from the schema data collection.\n\nParameters\n\n{Terrasoft.DataManagerItem} item| The record to delete.  \n---|---  \n      \n    \n    {Terrasoft.DataManagerItem} update(config, callback, scope)  \n    \n\nUpdates the record that has the `config.primaryColumnValue` primary column value with the values from `config.columnValues`.\n\nParameters\n\n{Object} config| The configuration object.Configuration object properties| {String} entitySchemaName| The schema name.| {String} primaryColumnValue| The primary column value.| {Mixed} columnValues| The column values.  \n---|---  \n  \n{Function} callback| The callback function.| {Object} scope| The scope of the callback function.  \n      \n    \n    {Terrasoft.DataManagerItem} discardItem(item)  \n    \n\nDiscards the changes to the `item` record made as part of the current `DataManager` session.\n\nParameters\n\n{Terrasoft.DataManagerItem} item| The record, changes to which to discard.  \n---|---  \n      \n    \n    {Object} save(config, callback, scope)  \n    \n\nSaves the data collections of the schemas specified in `config.entitySchemaNames` to the database.\n\nParameters\n\n{Object} config| The configuration object.Configuration object properties| {String[]} entitySchemaName| The name of the schema to save. Leave empty to save the data collections of all schemas.  \n---|---  \n  \n{Function} callback| The callback function.| {Object} scope| The scope of the callback function.  \n  \n## DataManagerItem class​\n\n### Properties​\n    \n    \n    {Terrasoft.BaseViewMode} viewModel  \n    \n\nThe object projection of the database record.\n\n### Methods​\n    \n    \n    setColumnValue(columnName, columnValue)  \n    \n\nAssigns the new `columnValue` value to the column that has the `columnName` name.\n\nParameters\n\n{String} columnName| The column name.| {String} columnValue| The column value.  \n---|---  \n      \n    \n    {Mixed} getColumnValue(columnName)  \n    \n\nReturns the value of the column that has the `columnName` name.\n\nParameters\n\n{String} columnName| The column name.  \n---|---  \n      \n    \n    {Object} getValues()  \n    \n\nReturns the values of all record columns.\n    \n    \n    remove()  \n    \n\nSelects the `isDeleted` flag for the record.\n    \n    \n    discard()  \n    \n\nDiscards the changes to the record made as part of the current `DataManager` session.\n    \n    \n    {Object} save(callback, scope)  \n    \n\nRecords the changes in the database.\n\nParameters\n\ncallback| The callback function.|  scope| The scope of the callback function.  \n---|---  \n      \n    \n    {Boolean} getIsNew()  \n    \n\nReturns the flag that marks the record as new.\n    \n    \n    {Boolean} getIsChanged()  \n    \n\nReturns the flag that marks the record as changed.\n\nUse examples\n\nRetrieve the records from the Contact table\n    \n    \n    /* Define the configuration object. */  \n    var config = {  \n        /* The entity schema name. */  \n        entitySchemaName: \"Contact\",  \n        /* Exclude duplicates from the resulting dataset. */  \n        isDistinct: true  \n    };  \n    /* Retrieve the data. */  \n    Terrasoft.DataManager.select(config, function (collection) {  \n        /* Save the retrieved records to the local repository. */  \n        collection.each(function (item) {  \n            Terrasoft.DataManager.addItem(item);  \n        });  \n    }, this);  \n    \n\nAdd a new record to the DataManager object\n    \n    \n    /* Define the configuration object. */  \n    var config = {  \n        /* The entity schema name. */  \n        entitySchemaName: \"Contact\",  \n        /* The column values. */  \n        columnValues: {  \n            Id: \"00000000-0000-0000-0000-000000000001\",  \n            Name: \"Name1\"  \n        }  \n    };  \n    /* Create a new record. */  \n    Terrasoft.DataManager.createItem(config, function (item) {  \n        Terrasoft.DataManager.addItem(item);  \n    }, this);  \n    \n\nRetrieve the record and change the column value\n    \n    \n    /* Retrieve the record. */  \n    var item = Terrasoft.DataManager.findItem(\"Contact\",  \n         \"00000000-0000-0000-0000-000000000001\");  \n    /* Assign the new \"Name2\" value to the Name column. */  \n    item.setColumnValue(\"Name\", \"Name2\");  \n    \n\nDelete the record from DataManager\n    \n    \n    /* Define the configuration object. */  \n    var config = {  \n        /* The entity schema name. */       \n        entitySchemaName: \"Contact\",  \n        /* The primary column value. */  \n        primaryColumnValue: \"00000000-0000-0000-0000-000000000001\"  \n    };  \n    /* Select the isDeleted flag for the item record. */  \n    Terrasoft.DataManager.remove(config, function () {  \n    }, this);  \n    \n\nDiscard the changes made as part of the current DataManager session\n    \n    \n    /* Retrieve the record. */  \n    var item = Terrasoft.DataManager.findItem(\"Contact\",  \n         \"00000000-0000-0000-0000-000000000001\");  \n    /* Discard the changes to the record. */       \n    Terrasoft.DataManager.discardItem(item);  \n    \n\nRecord the changes in the database\n    \n    \n    /* Define the configuration object. */  \n    var config = {  \n        /* The entity schema name. */      \n        entitySchemaNames: [\"Contact\"]  \n    };  \n    /* Save the changes in the database. */  \n    Terrasoft.DataManager.save(config, function () {  \n    }, this);  \n    \n\n  * DataManager class\n    * Properties\n    * Methods\n  * DataManagerItem class\n    * Properties\n    * Methods\n\n\n",
  "analysis": {
    "word_count": 1122,
    "key_concepts": ["entity schema", "configuration", "database", "contact"],
    "use_cases": [
      "building applications",
      "custom development",
      "API integration",
      "system administration",
      "user management"
    ],
    "related_topics": [],
    "difficulty": "intermediate",
    "ai_tags": ["entity schema", "creatio", "contact", "intermediate", "documentation", "configuration", "database"]
  },
  "ai_optimized": true,
  "processed_at": "2025-07-28T13:24:51.182398"
}
