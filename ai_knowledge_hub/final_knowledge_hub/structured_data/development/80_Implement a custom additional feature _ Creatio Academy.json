{
  "id": 80,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/8.0/platform-customization/interface-control-tools/overview",
  "title": "Implement a custom additional feature | Creatio Academy",
  "category": "development",
  "description": "This article covers the additional feature behavior relevant for Creatio version 8.0.2 Atlas and later. If you use an earlier Creatio version, follow the guide in a separate article: Feature Toggle mechanism.",
  "content": "This is documentation for Creatio 8.0 . For up-to-date documentation, see the latest version ( 8.3 ). Version: 8.0 On this page Level: intermediate note This article covers the additional feature behavior relevant for Creatio version 8.0.2 Atlas and later. If you use an earlier Creatio version, follow the guide in a separate article: Feature Toggle mechanism . Feature toggle is a software development technique that manages the additional feature status in an app. The Feature toggling page includes the list of out-of-the-box additional features and custom additional features, regardless of whether you added them using the Feature toggling page or Source code schema. Feature toggle lets you use continuous integration while preserving the working capacity of the application and hiding features you are still developing. Learn more: Manage an existing additional feature . General procedure to implement a custom additional feature differs in the front-end and back-end. 1. Add a custom additional feature ​ Creatio lets you add a custom additional feature in both the front-end and back-end. If during development you need to add an additional feature that exists in the front-end to the back-end and vice versa, make sure that you use the same feature code. An additional feature exists in both front-end and back-end simultaneously. Add a custom additional feature in the front-end ​ Add a custom additional feature in the front-end in the following cases: You intend to use the feature only in the front-end . You have no intent to customize the app using C# code . You have no need to compile the app . Otherwise, add a custom additional feature in the back-end. Read more >>> If you choose to add a custom additional feature in the front-end, take into account the following specifics: To migrate apps between environments, additionally bind the additional feature and its value to the app. If you use an additional feature in both front-end and back-end simultaneously, you cannot use typified methods in C# code . Therefore, the compiler will not be able to check the spelling of the feature code. To add a custom additional feature in the front-end: Open the Feature toggling page. Instructions: Open the Feature toggling page . Add an additional feature . Fill out the feature properties . Property Property description Code Required. Code of the custom additional feature to add. Source Non-editable. Source of the custom additional feature to add. Creatio automatically populates the property using the \"DbFeatureProvider\" value. Description Description of the custom additional feature to add. Is enabled The status of the custom additional feature for all users. Instructions: Change the status of an additional feature for all users . State for current user The status of the custom additional feature for current user. Instructions: Change the status of an additional feature for a system user or organizational role . Save the changes . As a result , Creatio will add the custom additional feature to the Feature toggling page list. The source of the feature will be set to \"DbFeatureProvider.\" Add a custom additional feature in the back-end ​ Add a custom additional feature in the back-end in the following cases: You intend to use the feature in both front-end and back-end simultaneously . You intend to use typified methods in C# code . You have no need to manage the status of an additional feature for a Creatio system user or organizational role . Otherwise, add a custom additional feature in the front-end. Read more >>> If you choose to add a custom additional feature in the back-end, take into account the following specifics: You need to implement the Source code schema . You need to compile the app . Creatio lets you omit adding a custom additional feature in the back-end in one of the following cases: The out-of-the-box value of a custom additional feature is disabled. You need to use the custom additional feature only in the front-end. To add a custom additional feature in the back-end: If needed, implement a Source code schema . Instructions: Implement the source code . Add an additional feature . Declare a custom class that inherits from the FeatureMetadata class. Specify the values of the feature properties. View the template to add the custom additional feature in the back-end below. Template to add the custom feature (back-end) # region Class: SomeCustomFeature internal class SomeCustomFeature : FeatureMetadata { # region Constructors: Public public SomeCustomFeature ( ) { IsEnabled = true ; Description = \"Some feature description\" ; } # endregion } # endregion Additionally, Creatio lets you group multiple additional features . For example, group additional features by the company that implemented them or by the app functionality that they affect. To do this: Declare a grouping class. Declare a custom class that inherits from the FeatureMetadata class. Declare a class for each feature. This lets you reduce the time required to implement the business logic that retrieves the feature statuses. Specify the property values for each feature. View the template to group the custom additional features in the back-end below. Template to group the custom features (back-end) namespace Terrasoft . SomeFunctionality { using Creatio . FeatureToggling ; # region Class: SomeModuleFeatures public class SomeModuleFeatures { # region Class: SomeCustomFeature1 public class SomeCustomFeature1 : FeatureMetadata { # region Constructors: Public public SomeCustomFeature1 ( ) { IsEnabled = true ; Description = \"Some feature 1 description\" ; } # endregion } # endregion # region Class: SomeCustomFeature2 public class SomeCustomFeature2 : FeatureMetadata { # region Constructors: Public public SomeCustomFeature2 ( ) { IsEnabled = true ; Description = \"Some feature 2 description\" ; } # endregion } # endregion } # endregion } Publish the schema . 2. Implement the business logic of the feature ​ You can implement the business logic of the custom feature in the front-end or in the back-end. Implement the business logic of the feature in the front-end ​ Implement a view model schema . Instructions: View model schema . Implement the method that defines the behavior of the custom additional feature. Implement the conditional operator that checks the feature status (i. e. the [FeatureState] column value from the [AdminUnitFeatureState] database table) and specifies Creatio behavior for each feature status. Implement the following methods. Method Method description getIsEnabled() Checks whether the custom feature is disabled. Retrieves the feature code. The business logic to execute depends on the retrieved value. getIsDisabled() Checks whether the custom feature is disabled. Retrieves the feature name. The business logic to execute depends on the retrieved value. View the template to implement the behavior of the custom additional feature in the front-end below. Template to implement the custom feature behavior (front-end) /* Method that implements the business logic based on the value of the custom additional feature. */ someMethod : function ( ) { /* Check whether the custom feature is enabled. */ if ( Terrasoft . Features . getIsEnabled ( \"SomeCustomFeature\" ) ) { /* Implement the business logic to execute if the custom feature is enabled. */ ... } /* Check whether the custom feature is disabled. */ if ( Terrasoft . Features . getIsDisabled ( \"SomeCustomFeature\" ) ) { /* Implement the business logic to execute if the custom feature is disabled. */ ... } /* Implement the business logic of the method using the retrieved value of the custom additional feature. */ ... } Save the changes . Refresh the page . Bind the additional feature and its value to the app. Create a Data schema type. Instructions: Implement a data binding . Fill out the schema properties. Element to bind Property value Binding description Additional feature Feature Binding an additional feature to an app implies binding the additional feature code and additional feature status for all Creatio users. Status of the additional feature AdminUnitFeatureState Optional. Binding a status of the additional feature to an app implies binding the additional feature status for a Creatio system user or organizational role. Select data to bind to the app. Tab Tab description Columns setting Select the columns that contain object data. Bound data Select the records to bind to the app. Use the filter by object name to search for corresponding data. Save the changes. As a result , the business logic of the custom additional feature will be implemented in the front-end and associated app functionality will be based on the feature status. Implement the business logic of the feature in the back-end ​ Define the needed namespaces that let you use the Feature toggle functionality in the source code schemas. To do this, define the Terrasoft.Configuration.FeatureUtilities and Creatio.FeatureToggling namespaces. Implement the method that defines the behavior of the custom additional feature. Implement the conditional operator that checks the feature status (i. e. the [FeatureState] column value from the [AdminUnitFeatureState] database table) and specifies Creatio behavior for each feature status. Implement the following methods. Method Method description GetIsEnabled() Checks whether the custom feature is enabled. Retrieves one of the following values: Feature code for the dedicated custom additional feature. Name of the grouping class that groups multiple custom additional features. The business logic to execute depends on the retrieved value. GetIsEnabled<>() Typified method. Checks whether the custom feature is enabled. Unlike the GetIsEnabled() method, it additionally checks whether the functionality is implemented correctly. Retrieves one of the following values: Name of the grouping class that groups multiple custom additional features. Name of the dedicated custom additional feature from grouping class that groups multiple custom additional features. The business logic to execute depends on the retrieved value. GetIsDisabled() Checks whether the custom feature is disabled. Retrieves the feature code. The business logic to execute depends on the retrieved value. GetIsDisabled<>() Typified method. Checks whether the custom feature is disabled. Unlike the GetIsDisabled() method, it additionally checks whether the functionality is implemented correctly. Retrieves one of the following values: Name of the grouping class that groups multiple custom additional features. Name of the dedicated custom additional feature from grouping class that groups multiple custom additional features. The business logic to execute depends on the retrieved value. View the template to implement the behavior of the custom additional feature in the back-end below. Template to implement the custom additional feature (back-end) /* The namespace that lets you manage the feature statuses. */ using Terrasoft . Configuration ; using Creatio . FeatureToggling ; .. . /* Method that implements the business logic based on the value of the custom additional feature. */ public void SomeMethod ( ) { /* Check whether the dedicated custom feature is enabled. */ if ( Features . GetIsEnabled ( \"SomeCustomFeature\" ) ) { /* Implement the business logic to execute if the dedicated custom feature is enabled. */ .. . } /* Check whether the dedicated custom feature is disabled. */ if ( Features . GetIsDisabled ( \"SomeCustomFeature\" ) ) { /* Implement the business logic to execute if the dedicated custom feature is disabled. */ .. . } /* Implement the business logic of the method using the retrieved value of the dedicated custom additional feature. */ .. . } View the template to implement the behavior of multiple custom additional features that are grouped by grouping class in the back-end below. Template to implement the grouped multiple custom additional features (back-end) /* The namespace that lets you manage the feature statuses. */ using Terrasoft . Configuration ; using Creatio . FeatureToggling ; .. . /* Method that defines the feature. */ public void SomeMethod ( ) { /* Check whether all grouped multiple custom additional features are enabled. */ if ( Features . GetIsEnabled < SomeModuleFeatures > ( ) ) { /* Implement the business logic to execute if all grouped multiple custom additional features are enabled. */ .. . } /* Check whether all grouped multiple custom additional features are disabled. */ if ( Features . GetIsDisabled < SomeModuleFeatures > ( ) ) { /* Implement the business logic to execute if all grouped multiple custom additional features are disabled. */ .. . } /* Check whether the dedicated custom feature from the grouping class is enabled. */ if ( Features . GetIsEnabled < SomeModuleFeatures . SomeCustomFeature1 > ( ) ) { /* Implement the business logic to execute if the dedicated custom feature is enabled. */ .. . } /* Check whether the dedicated custom feature from the grouping class is disabled. */ if ( Features . GetIsDisabled < SomeModuleFeatures . SomeCustomFeature1 > ( ) ) { /* Implement the business logic to execute if the dedicated custom feature is disabled. */ .. . } /* Implement the business logic of the method using the retrieved value of the custom additional feature. */ .. . } Publish the schema . As a result , the dedicated custom additional feature or multiple custom additional features that are grouped by the grouping class will be implemented in the back-end and associated app functionality will be based on the feature status. See also ​ Manage an existing additional feature Configuration elements of the Client module type Configuration elements of the Source code type 1. Add a custom additional feature Add a custom additional feature in the front-end Add a custom additional feature in the back-end 2. Implement the business logic of the feature Implement the business logic of the feature in the front-end Implement the business logic of the feature in the back-end See also",
  "markdown": "This is documentation for Creatio **8.0**.\n\nFor up-to-date documentation, see the **[latest version](/docs/8.x/dev/development-on-creatio-platform/platform-customization/interface-control-tools/overview)** (8.3).\n\nVersion: 8.0\n\nOn this page\n\nLevel: intermediate\n\nnote\n\nThis article covers the additional feature behavior relevant for Creatio version 8.0.2 Atlas and later. If you use an earlier Creatio version, follow the guide in a separate article: [Feature Toggle mechanism](https://academy.creatio.com/documents?id=15631&ver=7.18).\n\n**Feature toggle** is a software development technique that manages the additional feature status in an app. The **Feature toggling** page includes the list of out-of-the-box additional features and custom additional features, regardless of whether you added them using the **Feature toggling** page or **Source code** schema. Feature toggle lets you use continuous integration while preserving the working capacity of the application and hiding features you are still developing. Learn more: [Manage an existing additional feature](https://academy.creatio.com/documents?ver=8.0&id=15631).\n\n**General procedure** to implement a custom additional feature differs in the front-end and back-end.\n\n## 1\\. Add a custom additional feature​\n\nCreatio lets you add a custom additional feature in both the front-end and back-end. If during development you need to add an additional feature that exists in the front-end to the back-end and vice versa, make sure that you use the same feature code. An additional feature exists in both front-end and back-end simultaneously.\n\n### Add a custom additional feature in the front-end​\n\nAdd a custom additional feature in the front-end in the following cases:\n\n  * You intend to **use the feature only in the front-end**.\n  * You have **no intent to customize the app using C# code**.\n  * You have **no need to compile the app**.\n\n\n\nOtherwise, add a custom additional feature in the back-end. Read more >>>\n\nIf you choose to add a custom additional feature in the front-end, take into account the following specifics:\n\n  * To migrate apps between environments, additionally **bind the additional feature and its value** to the app.\n  * If you use an additional feature in both front-end and back-end simultaneously, you **cannot use typified methods in C# code**. Therefore, the compiler will not be able to check the spelling of the feature code.\n\n\n\nTo add a custom additional feature in the front-end:\n\n  1. Open the **Feature toggling** page. Instructions: [Open the Feature toggling page](https://academy.creatio.com/documents?ver=8.0&id=15631&anchor=title-3459-7).\n\n  2. **Add an additional feature**.\n\n  3. **Fill out the feature properties**.\n\nProperty| Property description| Code| Required. Code of the custom additional feature to add.| Source| Non-editable. Source of the custom additional feature to add. Creatio automatically populates the property using the \"DbFeatureProvider\" value.| Description| Description of the custom additional feature to add.| Is enabled| The status of the custom additional feature for all users. Instructions: [Change the status of an additional feature for all users](https://academy.creatio.com/documents?ver=8.0&id=15631&anchor=title-3459-3).| State for current user| The status of the custom additional feature for current user. Instructions: [Change the status of an additional feature for a system user or organizational role](https://academy.creatio.com/documents?ver=8.0&id=15631&anchor=title-3459-8).  \n---|---  \n  \n  4. **Save the changes**.\n\n\n\n\n**As a result** , Creatio will add the custom additional feature to the **Feature toggling** page list. The source of the feature will be set to \"DbFeatureProvider.\"\n\n### Add a custom additional feature in the back-end​\n\nAdd a custom additional feature in the back-end in the following cases:\n\n  * You intend to **use the feature in both front-end and back-end simultaneously**.\n  * You intend to **use typified methods in C# code**.\n  * You have **no need to manage the status of an additional feature for a Creatio system user or organizational role**.\n\n\n\nOtherwise, add a custom additional feature in the front-end. Read more >>>\n\nIf you choose to add a custom additional feature in the back-end, take into account the following specifics:\n\n  * You need to **implement the Source code schema**.\n  * You need to **compile the app**.\n\n\n\nCreatio lets you omit adding a custom additional feature in the back-end in one of the following cases:\n\n  * The out-of-the-box value of a custom additional feature is disabled.\n  * You need to use the custom additional feature only in the front-end.\n\n\n\nTo add a custom additional feature in the back-end:\n\n  1. If needed, **implement a Source code schema**. Instructions: [Implement the source code](https://academy.creatio.com/documents?ver=8.0&id=15108&anchor=title-2123-8).\n\n  2. **Add an additional feature**.\n\n     1. Declare a custom class that inherits from the `FeatureMetadata` class.\n     2. Specify the values of the feature properties.\n\nView the template to add the custom additional feature in the back-end below.\n\nTemplate to add the custom feature (back-end)\n    \n    #region Class: SomeCustomFeature  \n    internal class SomeCustomFeature : FeatureMetadata {  \n      \n        #region Constructors: Public  \n        public SomeCustomFeature() {  \n            IsEnabled = true;  \n            Description = \"Some feature description\";  \n        }  \n        #endregion  \n      \n    }  \n    #endregion  \n    \n\nAdditionally, Creatio lets you **group multiple additional features**. For example, group additional features by the company that implemented them or by the app functionality that they affect. To do this:\n\n     1. Declare a grouping class.\n     2. Declare a custom class that inherits from the `FeatureMetadata` class. Declare a class for each feature. This lets you reduce the time required to implement the business logic that retrieves the feature statuses.\n     3. Specify the property values for each feature.\n\nView the template to group the custom additional features in the back-end below.\n\nTemplate to group the custom features (back-end)\n    \n    namespace Terrasoft.SomeFunctionality {  \n      \n        using Creatio.FeatureToggling;  \n      \n        #region Class: SomeModuleFeatures  \n        public class SomeModuleFeatures {  \n      \n            #region Class: SomeCustomFeature1  \n            public class SomeCustomFeature1 : FeatureMetadata {  \n      \n                #region Constructors: Public  \n                public SomeCustomFeature1() {  \n                    IsEnabled = true;  \n                    Description = \"Some feature 1 description\";  \n                }  \n      \n                #endregion  \n      \n            }  \n      \n            #endregion  \n      \n            #region Class: SomeCustomFeature2  \n            public class SomeCustomFeature2 : FeatureMetadata {  \n      \n                #region Constructors: Public  \n                public SomeCustomFeature2() {  \n                    IsEnabled = true;  \n                    Description = \"Some feature 2 description\";  \n                }  \n      \n                #endregion  \n      \n            }  \n      \n            #endregion  \n      \n        }  \n      \n        #endregion  \n      \n    }  \n    \n\n  3. **Publish the schema**.\n\n\n\n\n## 2\\. Implement the business logic of the feature​\n\nYou can implement the business logic of the custom feature in the front-end or in the back-end.\n\n### Implement the business logic of the feature in the front-end​\n\n  1. **Implement a view model schema**. Instructions: [View model schema](https://academy.creatio.com/documents?ver=8.0&id=15106&anchor=title-2123-15).\n\n  2. **Implement the method** that defines the behavior of the custom additional feature.\n\n     1. Implement the conditional operator that checks the feature status (i. e. the `[FeatureState]` column value from the `[AdminUnitFeatureState]` database table) and specifies Creatio behavior for each feature status.\n\n     2. Implement the following methods.\n\nMethod| Method description| getIsEnabled()| Checks whether the custom feature is disabled. Retrieves the feature code. The business logic to execute depends on the retrieved value.| getIsDisabled()| Checks whether the custom feature is disabled. Retrieves the feature name. The business logic to execute depends on the retrieved value.  \n---|---  \n  \nView the template to implement the behavior of the custom additional feature in the front-end below.\n\nTemplate to implement the custom feature behavior (front-end)\n    \n    /* Method that implements the business logic based on the value of the custom additional feature. */  \n    someMethod: function() {  \n      \n        /* Check whether the custom feature is enabled. */  \n        if (Terrasoft.Features.getIsEnabled(\"SomeCustomFeature\")) {  \n            /* Implement the business logic to execute if the custom feature is enabled. */  \n            ...  \n        }  \n      \n        /* Check whether the custom feature is disabled. */  \n        if (Terrasoft.Features.getIsDisabled(\"SomeCustomFeature\")) {  \n            /* Implement the business logic to execute if the custom feature is disabled. */  \n            ...  \n        }  \n      \n        /* Implement the business logic of the method using the retrieved value of the custom additional feature. */  \n        ...  \n    }  \n    \n\n  3. **Save the changes**.\n\n  4. **Refresh the page**.\n\n  5. **Bind the additional feature and its value** to the app.\n\n     1. Create a **Data** schema type. Instructions: [Implement a data binding](https://academy.creatio.com/documents?ver=8.0&id=15117&anchor=title-3942-1).\n\n     2. Fill out the schema properties.\n\nElement to bind| Property value| Binding description| Additional feature| Feature| Binding an additional feature to an app implies binding the additional feature code and additional feature status for all Creatio users.| Status of the additional feature| AdminUnitFeatureState| Optional. Binding a status of the additional feature to an app implies binding the additional feature status for a Creatio system user or organizational role.  \n---|---|---  \n  \n     3. Select data to bind to the app.\n\nTab| Tab description| Columns setting| Select the columns that contain object data.| Bound data| Select the records to bind to the app. Use the filter by object name to search for corresponding data.  \n---|---  \n  \n     4. Save the changes.\n\n\n\n\n**As a result** , the business logic of the custom additional feature will be implemented in the front-end and associated app functionality will be based on the feature status.\n\n### Implement the business logic of the feature in the back-end​\n\n  1. **Define the needed namespaces** that let you use the `Feature toggle` functionality in the source code schemas. To do this, define the `Terrasoft.Configuration.FeatureUtilities` and `Creatio.FeatureToggling` namespaces.\n\n  2. **Implement the method** that defines the behavior of the custom additional feature.\n\n     1. Implement the conditional operator that checks the feature status (i. e. the `[FeatureState]` column value from the `[AdminUnitFeatureState]` database table) and specifies Creatio behavior for each feature status.\n\n     2. Implement the following methods.\n\nMethod| Method description| GetIsEnabled()| Checks whether the custom feature is enabled. Retrieves one of the following values:\n        * Feature code for the dedicated custom additional feature.\n        * Name of the grouping class that groups multiple custom additional features.\nThe business logic to execute depends on the retrieved value.| GetIsEnabled<>()| Typified method. Checks whether the custom feature is enabled. Unlike the `GetIsEnabled()` method, it additionally checks whether the functionality is implemented correctly. Retrieves one of the following values:\n        * Name of the grouping class that groups multiple custom additional features.\n        * Name of the dedicated custom additional feature from grouping class that groups multiple custom additional features.\nThe business logic to execute depends on the retrieved value.| GetIsDisabled()| Checks whether the custom feature is disabled. Retrieves the feature code. The business logic to execute depends on the retrieved value.| GetIsDisabled<>()| Typified method. Checks whether the custom feature is disabled. Unlike the `GetIsDisabled()` method, it additionally checks whether the functionality is implemented correctly. Retrieves one of the following values:\n        * Name of the grouping class that groups multiple custom additional features.\n        * Name of the dedicated custom additional feature from grouping class that groups multiple custom additional features.\nThe business logic to execute depends on the retrieved value.  \n---|---  \n  \nView the template to implement the behavior of the custom additional feature in the back-end below.\n\nTemplate to implement the custom additional feature (back-end)\n    \n    /* The namespace that lets you manage the feature statuses. */  \n    using Terrasoft.Configuration;  \n    using Creatio.FeatureToggling;  \n    ...  \n    /* Method that implements the business logic based on the value of the custom additional feature. */  \n    public void SomeMethod() {  \n      \n        /* Check whether the dedicated custom feature is enabled. */  \n        if (Features.GetIsEnabled(\"SomeCustomFeature\")) {  \n            /* Implement the business logic to execute if the dedicated custom feature is enabled. */  \n            ...  \n        }  \n      \n        /* Check whether the dedicated custom feature is disabled. */  \n        if (Features.GetIsDisabled(\"SomeCustomFeature\")) {  \n            /* Implement the business logic to execute if the dedicated custom feature is disabled. */  \n            ...  \n        }  \n      \n        /* Implement the business logic of the method using the retrieved value of the dedicated custom additional feature. */  \n        ...  \n    }  \n    \n\nView the template to implement the behavior of multiple custom additional features that are grouped by grouping class in the back-end below.\n\nTemplate to implement the grouped multiple custom additional features (back-end)\n    \n    /* The namespace that lets you manage the feature statuses. */  \n    using Terrasoft.Configuration;  \n    using Creatio.FeatureToggling;  \n    ...  \n    /* Method that defines the feature. */  \n    public void SomeMethod() {  \n      \n        /* Check whether all grouped multiple custom additional features are enabled. */  \n        if (Features.GetIsEnabled<SomeModuleFeatures>()) {  \n            /* Implement the business logic to execute if all grouped multiple custom additional features are enabled. */  \n            ...  \n        }  \n      \n        /* Check whether all grouped multiple custom additional features are disabled. */  \n        if (Features.GetIsDisabled<SomeModuleFeatures>()) {  \n            /* Implement the business logic to execute if all grouped multiple custom additional features are disabled. */  \n            ...  \n        }  \n      \n        /* Check whether the dedicated custom feature from the grouping class is enabled. */  \n        if (Features.GetIsEnabled<SomeModuleFeatures.SomeCustomFeature1>()) {  \n            /* Implement the business logic to execute if the dedicated custom feature is enabled. */  \n            ...  \n        }  \n      \n        /* Check whether the dedicated custom feature from the grouping class is disabled. */  \n        if (Features.GetIsDisabled<SomeModuleFeatures.SomeCustomFeature1>()) {  \n            /* Implement the business logic to execute if the dedicated custom feature is disabled. */  \n            ...  \n        }  \n      \n        /* Implement the business logic of the method using the retrieved value of the custom additional feature. */  \n    ...  \n    }  \n    \n\n  3. **Publish the schema**.\n\n\n\n\n**As a result** , the dedicated custom additional feature or multiple custom additional features that are grouped by the grouping class will be implemented in the back-end and associated app functionality will be based on the feature status.\n\n* * *\n\n## See also​\n\n[Manage an existing additional feature](https://academy.creatio.com/documents?ver=8.0&id=15631)\n\n[Configuration elements of the Client module type](https://academy.creatio.com/documents?ver=8.0&id=15106)\n\n[Configuration elements of the Source code type](https://academy.creatio.com/documents?ver=8.0&id=15108)\n\n  * 1\\. Add a custom additional feature\n    * Add a custom additional feature in the front-end\n    * Add a custom additional feature in the back-end\n  * 2\\. Implement the business logic of the feature\n    * Implement the business logic of the feature in the front-end\n    * Implement the business logic of the feature in the back-end\n  * See also\n\n\n",
  "analysis": {
    "word_count": 2228,
    "key_concepts": ["configuration", "integration", "database", "role", "account", "case"],
    "use_cases": [
      "building applications",
      "custom development",
      "API integration",
      "system administration",
      "user management"
    ],
    "related_topics": ["webhooks", "data sync", "web service", "api"],
    "difficulty": "intermediate",
    "ai_tags": [
      "creatio",
      "intermediate",
      "documentation",
      "role",
      "integration",
      "configuration",
      "account",
      "database"
    ]
  },
  "ai_optimized": true,
  "processed_at": "2025-07-28T13:15:52.347215"
}
