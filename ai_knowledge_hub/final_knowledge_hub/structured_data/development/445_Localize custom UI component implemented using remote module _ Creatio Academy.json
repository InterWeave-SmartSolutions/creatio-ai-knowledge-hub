{
  "id": 445,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/8.1/front-end-development/freedom-ui/remote-module/localize-remote-module",
  "title": "Localize custom UI component implemented using remote module | Creatio Academy",
  "category": "development",
  "description": "Localize custom UI components implemented using remote module during development to save time spent on translating the ready-to-use custom UI component.",
  "content": "This is documentation for Creatio 8.1 . For up-to-date documentation, see the latest version ( 8.3 ). Version: 8.1 On this page Level: intermediate Localize custom UI components implemented using remote module during development to save time spent on translating the ready-to-use custom UI component. Localize custom validators, converters and request handlers ​ Localize custom validators, converters and request handlers using Angular DI (dependency injection). To do this: Retrieve the Creatio UI language of the current user from the userCulture system variable. We recommend using a dedicated function. To do this, import the SysValuesService functionality from the @creatio-devkit/common library into the component. @creatio-devkit/common includes the SysValuesService service to localize system variables. View the example that retrieves the Creatio UI language of the current user in the custom UI component implemented using remote module below. some-component.component.ts /* Import the required functionality from the libraries. */ import { SysValuesService } from '@creatio-devkit/common' ; ... constructor ( ) { } async function getUserCulture ( ) : Promise < void > { /* Create an instance of the \"SysValuesService\" service from \"@creatio-devkit/common.\" */ const sysValuesService = new SysValuesService ( ) ; /* Upload the system variable values. */ const sysValues = await sysValuesService . loadSysValues ( ) ; return sysValues . userCulture . displayValue ; } Use an external library or implement the custom service to localize custom UI component. We recommend using @ngx-translate external library to localize custom UI components. Learn more: official vendor documentation (GitHub). For example, SomeTranslationService is an external library or custom service to localize custom UI components. If needed, enable support for emitting type metadata for decorators that works with the reflect-metadata module. Install the reflect-metadata npm package if needed. To do this, run the npm i reflect-metadata command at the command line terminal of Microsoft Visual Studio Code. The installation might take some time. Open the tsconfig.json file of the Angular project and make sure the experimentalDecorators and emitDecoratorMetadata properties are set to true . tsconfig.json file { ... , \"compilerOptions\" : { ... , \"experimentalDecorators\" : true , \"emitDecoratorMetadata\" : true , ... , } , } Receive the dependencies of the validator, converter, or request handler. Open the app.module.ts file. If needed, implement the resolveDependency() method in the bootstrapCrtModule() method. The bootstrapCrtModule() method registers the custom validator, converter, or request handler flagged using the CrtModule decorator. The resolveDependency() method receives the dependencies of the validator, converter, or request handler. Import the required functionality from the libraries into the class. Save the file. View an example that receives the dependencies of the custom validator, converter, or request handler using the resolveDependency() method below. app.module.ts file /* Import the required functionality from the libraries. */ import { DoBootstrap , Injector , ProviderToken } from '@angular/core' ; import { bootstrapCrtModule } from '@creatio-devkit/common' ; ... export class AppModule implements DoBootstrap { constructor ( private _injector : Injector ) { } ngDoBootstrap ( ) : void { /* Bootstrap \"CrtModule\" definitions. */ bootstrapCrtModule ( 'some_package' , AppModule , { /* Receive the dependencies. */ resolveDependency : ( token ) => this . _injector . get ( < ProviderToken < unknown >> token ) , } ) ; } } Retrieve the instance of the translation service . Open the file that implements a custom validator, converter or request handler. For example, open the some-handler.handler.ts file that implements a custom request handler. Receive the instant translated value using the instant() method. Import the required functionality from the libraries into the class. Save the file. View an example that retrieves the instance of the SomeTranslationService using Angular DI (dependency injection) below. some-handler.handler.ts file /* Import the required functionality from the libraries. */ import { BaseRequestHandler , CrtRequestHandler } from \"@creatio-devkit/common\" ; import { SomeRequest } from \"./some-request.request\" ; import { SomeTranslationService } from \"./some-translation-service.service\" ; /* Add the \"CrtRequestHandler\" decorator to the \"SomeHandler\" class. */ @ CrtRequestHandler ( { type : 'usr.SomeHandler' , requestType : 'usr.SomeRequest' , } ) export class SomeHandler extends BaseRequestHandler { constructor ( private _someTranslationService : SomeTranslationService ) { super ( ) ; } public async handle ( request : SomeRequest ) : Promise < void > { /* Receive the instant translated value. */ const localizedMessage = this . _someTranslationService . instant ( 'SomeRequest.Message' ) ; alert ( localizedMessage ) ; } } Localize properties of custom UI component ​ Retrieve the Creatio UI language of the current user from the userCulture system variable. We recommend using a dedicated function. To do this, import the SysValuesService functionality from the @creatio-devkit/common library into the component. @creatio-devkit/common includes the SysValuesService service to localize system variables. View the example that retrieves the Creatio UI language of the current user in the custom UI component implemented using remote module below. some-component.component.ts /* Import the required functionality from the libraries. */ import { SysValuesService } from '@creatio-devkit/common' ; ... constructor ( ) { } async function getUserCulture ( ) : Promise < void > { /* Create an instance of the \"SysValuesService\" service from \"@creatio-devkit/common.\" */ const sysValuesService = new SysValuesService ( ) ; /* Upload the system variable values. */ const sysValues = await sysValuesService . loadSysValues ( ) ; return sysValues . userCulture . displayValue ; } Use an external library or implement the custom service to localize custom UI component. We recommend using @ngx-translate external library to localize custom UI component. Learn more: official vendor documentation (GitHub). For example, SomeTranslationService is an external library or custom service to localize custom UI components. Flag the properties to localize . Open the some_component.component.ts file. Flag the component using the CrtInterfaceDesignerItem decorator that has the toolbarConfig property. The property manages the element layout in the library of the Freedom UI Designer. Import the functionality of the CrtInterfaceDesignerItem decorator from the @creatio-devkit/common library into the component. Mark the properties to localize using the localize() method. Save the file. View the example that flags the Caption property of the SomeComponent custom UI component implemented using remote module below. some_component.component.ts file /* Import the required functionality from the libraries. */ import { CrtInterfaceDesignerItem } from '@creatio-devkit/common' ; ... /* Add the \"CrtInterfaceDesignerItem\" decorator to the \"SomeComponent\" component. */ @ CrtInterfaceDesignerItem ( { /* Manage the element layout in the library of the Freedom UI Designer. */ toolbarConfig : { /* The localizable name of the component. */ caption : localize ( 'SomeComponent.Caption' ) , ... } } ) ... Translate the localizable values of the validator, converter or request handler. Open the app.module.ts file. Call the localizeMetadata() method in the bootstrapCrtModule() method. The localizeMetadata() method is required to translate the properties flagged using the localize() method. The key to translate the value is an incoming parameter of the localizeMetadata() method. The method returns the translated value. Import the required functionality from the libraries into the class. Save the file. View an example that calls the localizeMetadata() method below. app.module.ts file /* Import the required functionality from the libraries. */ import { DoBootstrap , Injector } from '@angular/core' ; import { bootstrapCrtModule } from '@creatio-devkit/common' ; import { SomeTranslationService } from \"./some-translation-service.service\" ; ... export class AppModule implements DoBootstrap { constructor ( private _injector : Injector ) { } ngDoBootstrap ( ) : void { const translationService = this . _injector . get ( SomeTranslationService ) ; /* Bootstrap \"CrtModule\" definitions. */ bootstrapCrtModule ( 'some_package' , AppModule , { localizeMetadata : ( key : string ) => translationService . instant ( key ) , } ) ; } } Upload the translations of custom UI component from static content ​ Find the URL to upload the translations . To do this, use the __webpack_public_path__ global variable. Learn more: official webpack documentation . Open the app.module.ts file . Add app initializer that requests the Creatio UI language of the current user and saves the value to the external library or custom service to localize custom UI component. Implement the mechanism that uploads translations . Save the file . View an example that uploads the translations of custom UI component from static content below. app.module.ts /* Import the required functionality from the libraries. */ import { BrowserModule } from \"@angular/platform-browser\" ; import { HttpClient } from '@angular/core' ; import { HttpClientModule } from '@creatio-devkit/common' ; import { NgModule } from \"@angular/core\" ; import { TranslateModule , TranslateLoader } from '@ngx-translate/core' ; import { TranslateHttpLoader } from '@ngx-translate/http-loader' ; import { SomeTranslationService } from \"./some-translation-service.service\" ; declare const __webpack_public_path__ : string ; @ NgModule ( { providers : [ { provide : APP_INITIALIZER , useFactory : ( someTranslationService ) => async ( ) => { const culture = await getUserCulture ( ) ; someTranslationService . use ( culture ) } , multi : true , deps : [ SomeTranslationService ] , } ] , imports : [ BrowserModule , HttpClientModule , TranslateModule . forRoot ( { defaultLanguage : 'en-US' , loader : { provide : TranslateLoader , useFactory : ( httpClient : HttpClient ) => { return new TranslateHttpLoader ( httpClient , __webpack_public_path__ + '/assets/i18n/' , '.json' ) ; } , deps : [ HttpClient ] , } , } ) , ] , ... } ) See also ​ Custom UI component implemented using remote module Custom validator implemented using remote module Custom converter implemented using remote module Custom request handler implemented using remote module Resources ​ __webpack_public_path__ global variable (official webpack documentation) Localize custom validators, converters and request handlers Localize properties of custom UI component Upload the translations of custom UI component from static content See also Resources",
  "markdown": "This is documentation for Creatio **8.1**.\n\nFor up-to-date documentation, see the **[latest version](/docs/8.x/dev/development-on-creatio-platform/front-end-development/freedom-ui/remote-module/localize-remote-module)** (8.3).\n\nVersion: 8.1\n\nOn this page\n\nLevel: intermediate\n\nLocalize custom UI components implemented using remote module during development to save time spent on translating the ready-to-use custom UI component.\n\n## Localize custom validators, converters and request handlers​\n\nLocalize custom validators, converters and request handlers using Angular DI (dependency injection). To do this:\n\n  1. **Retrieve the Creatio UI language of the current user** from the `userCulture` system variable. We recommend using a dedicated function. To do this, import the `SysValuesService` functionality from the `@creatio-devkit/common` library into the component. `@creatio-devkit/common` includes the `SysValuesService` service to localize system variables.\n\nView the example that retrieves the Creatio UI language of the current user in the custom UI component implemented using remote module below.\n\nsome-component.component.ts\n         \n         /* Import the required functionality from the libraries. */  \n         import { SysValuesService } from '@creatio-devkit/common';  \n         ...  \n         constructor() {}  \n           \n         async function getUserCulture(): Promise<void> {  \n           /* Create an instance of the \"SysValuesService\" service from \"@creatio-devkit/common.\" */   \n           const sysValuesService = new SysValuesService();  \n           /* Upload the system variable values. */  \n           const sysValues = await sysValuesService.loadSysValues();  \n           return sysValues.userCulture.displayValue;  \n         }  \n         \n\n  2. **Use an external library or implement the custom service** to localize custom UI component. We recommend using `@ngx-translate` external library to localize custom UI components. Learn more: [official vendor documentation](https://github.com/ngx-translate/core?tab=readme-ov-file) (GitHub).\n\nFor example, `SomeTranslationService` is an external library or custom service to localize custom UI components.\n\n  3. If needed, **enable support for emitting type metadata for decorators** that works with the `reflect-metadata` module.\n\n     1. Install the `reflect-metadata` npm package if needed. To do this, run the `npm i reflect-metadata` command at the command line terminal of Microsoft Visual Studio Code. The installation might take some time.\n\n     2. Open the `tsconfig.json` file of the Angular project and make sure the `experimentalDecorators` and `emitDecoratorMetadata` properties are set to `true`.\n\ntsconfig.json file\n            \n            {  \n              ...,  \n              \"compilerOptions\": {  \n                ...,  \n                \"experimentalDecorators\": true,  \n                \"emitDecoratorMetadata\": true,  \n                ...,  \n              },  \n            }  \n            \n\n  4. **Receive the dependencies** of the validator, converter, or request handler.\n\n     1. Open the `app.module.ts` file.\n     2. If needed, implement the `resolveDependency()` method in the `bootstrapCrtModule()` method. The `bootstrapCrtModule()` method registers the custom validator, converter, or request handler flagged using the `CrtModule` decorator. The `resolveDependency()` method receives the dependencies of the validator, converter, or request handler.\n     3. Import the required functionality from the libraries into the class.\n     4. Save the file.\n\nView an example that receives the dependencies of the custom validator, converter, or request handler using the `resolveDependency()` method below.\n\napp.module.ts file\n    \n    /* Import the required functionality from the libraries. */  \n    import { DoBootstrap, Injector, ProviderToken } from '@angular/core';  \n    import { bootstrapCrtModule } from '@creatio-devkit/common';  \n      \n    ...  \n      \n    export class AppModule implements DoBootstrap {  \n      constructor(private _injector: Injector) {}  \n      \n      ngDoBootstrap(): void {  \n      \n        /* Bootstrap \"CrtModule\" definitions. */  \n        bootstrapCrtModule('some_package', AppModule, {  \n          /* Receive the dependencies. */  \n          resolveDependency: (token) => this._injector.get(<ProviderToken<unknown>>token),  \n        });  \n      }  \n    }  \n    \n\n  5. **Retrieve the instance of the translation service**.\n\n     1. Open the file that implements a custom validator, converter or request handler. For example, open the `some-handler.handler.ts` file that implements a custom request handler.\n     2. Receive the instant translated value using the `instant()` method.\n     3. Import the required functionality from the libraries into the class.\n     4. Save the file.\n\nView an example that retrieves the instance of the `SomeTranslationService` using Angular DI (dependency injection) below.\n\nsome-handler.handler.ts file\n    \n    /* Import the required functionality from the libraries. */  \n    import { BaseRequestHandler, CrtRequestHandler } from \"@creatio-devkit/common\";  \n    import { SomeRequest } from \"./some-request.request\";  \n    import { SomeTranslationService } from \"./some-translation-service.service\";  \n      \n    /* Add the \"CrtRequestHandler\" decorator to the \"SomeHandler\" class. */  \n    @CrtRequestHandler({  \n      type: 'usr.SomeHandler',  \n      requestType: 'usr.SomeRequest',  \n    })  \n      \n    export class SomeHandler extends BaseRequestHandler{  \n      constructor(private _someTranslationService: SomeTranslationService) {  \n        super();  \n      }  \n      public async handle(request: SomeRequest): Promise<void> {  \n        /* Receive the instant translated value. */  \n        const localizedMessage = this._someTranslationService.instant('SomeRequest.Message');  \n        alert(localizedMessage);  \n      }  \n    }  \n    \n\n\n\n\n## Localize properties of custom UI component​\n\n  1. **Retrieve the Creatio UI language of the current user** from the `userCulture` system variable. We recommend using a dedicated function. To do this, import the `SysValuesService` functionality from the `@creatio-devkit/common` library into the component. `@creatio-devkit/common` includes the `SysValuesService` service to localize system variables.\n\nView the example that retrieves the Creatio UI language of the current user in the custom UI component implemented using remote module below.\n\nsome-component.component.ts\n         \n         /* Import the required functionality from the libraries. */  \n         import { SysValuesService } from '@creatio-devkit/common';  \n         ...  \n         constructor() {}  \n           \n         async function getUserCulture(): Promise<void> {  \n           /* Create an instance of the \"SysValuesService\" service from \"@creatio-devkit/common.\" */   \n           const sysValuesService = new SysValuesService();  \n           /* Upload the system variable values. */  \n           const sysValues = await sysValuesService.loadSysValues();  \n           return sysValues.userCulture.displayValue;  \n         }  \n         \n\n  2. **Use an external library or implement the custom service** to localize custom UI component. We recommend using `@ngx-translate` external library to localize custom UI component. Learn more: [official vendor documentation](https://github.com/ngx-translate/core?tab=readme-ov-file) (GitHub).\n\nFor example, `SomeTranslationService` is an external library or custom service to localize custom UI components.\n\n  3. **Flag the properties to localize**.\n\n     1. Open the `some_component.component.ts` file.\n     2. Flag the component using the `CrtInterfaceDesignerItem` decorator that has the `toolbarConfig` property. The property manages the element layout in the library of the Freedom UI Designer.\n     3. Import the functionality of the `CrtInterfaceDesignerItem` decorator from the `@creatio-devkit/common` library into the component.\n     4. Mark the properties to localize using the `localize()` method.\n     5. Save the file.\n\nView the example that flags the `Caption` property of the `SomeComponent` custom UI component implemented using remote module below.\n\nsome_component.component.ts file\n    \n    /* Import the required functionality from the libraries. */  \n    import { CrtInterfaceDesignerItem } from '@creatio-devkit/common';  \n    ...  \n    /* Add the \"CrtInterfaceDesignerItem\" decorator to the \"SomeComponent\" component. */  \n    @CrtInterfaceDesignerItem({  \n      /* Manage the element layout in the library of the Freedom UI Designer. */  \n      toolbarConfig: {  \n        /* The localizable name of the component. */  \n        caption: localize('SomeComponent.Caption'),  \n        ...  \n      }  \n    })  \n    ...  \n    \n\n  4. **Translate the localizable values** of the validator, converter or request handler.\n\n     1. Open the `app.module.ts` file.\n     2. Call the `localizeMetadata()` method in the `bootstrapCrtModule()` method. The `localizeMetadata()` method is required to translate the properties flagged using the `localize()` method. The key to translate the value is an incoming parameter of the `localizeMetadata()` method. The method returns the translated value.\n     3. Import the required functionality from the libraries into the class.\n     4. Save the file.\n\nView an example that calls the `localizeMetadata()` method below.\n\napp.module.ts file\n    \n    /* Import the required functionality from the libraries. */  \n    import { DoBootstrap, Injector } from '@angular/core';  \n    import { bootstrapCrtModule } from '@creatio-devkit/common';  \n    import { SomeTranslationService } from \"./some-translation-service.service\";  \n      \n    ...  \n      \n    export class AppModule implements DoBootstrap {  \n      constructor(private _injector: Injector) {}  \n      \n      ngDoBootstrap(): void {  \n      \n        const translationService = this._injector.get(SomeTranslationService);  \n        /* Bootstrap \"CrtModule\" definitions. */  \n        bootstrapCrtModule('some_package', AppModule, {  \n          localizeMetadata: (key: string) => translationService.instant(key),  \n        });  \n      }  \n    }  \n    \n\n\n\n\n## Upload the translations of custom UI component from static content​\n\n  1. **Find the URL to upload the translations**. To do this, use the `__webpack_public_path__` global variable. Learn more: [official webpack documentation](https://webpack.js.org/guides/public-path/).\n  2. **Open the** `app.module.ts` **file**.\n  3. **Add app initializer** that requests the Creatio UI language of the current user and saves the value to the external library or custom service to localize custom UI component.\n  4. **Implement the mechanism that uploads translations**.\n  5. **Save the file**.\n\n\n\nView an example that uploads the translations of custom UI component from static content below.\n\napp.module.ts\n    \n    \n    /* Import the required functionality from the libraries. */  \n    import { BrowserModule } from \"@angular/platform-browser\";  \n    import { HttpClient } from '@angular/core';  \n    import { HttpClientModule } from '@creatio-devkit/common';  \n    import { NgModule } from \"@angular/core\";  \n    import { TranslateModule, TranslateLoader } from '@ngx-translate/core';  \n    import { TranslateHttpLoader } from '@ngx-translate/http-loader';  \n    import { SomeTranslationService } from \"./some-translation-service.service\";  \n      \n    declare const __webpack_public_path__: string;  \n      \n    @NgModule({  \n      providers: [{  \n        provide: APP_INITIALIZER,  \n        useFactory: (someTranslationService) => async () => {  \n          const culture = await getUserCulture();  \n          someTranslationService.use(culture)  \n        },  \n        multi: true,  \n        deps: [SomeTranslationService],  \n      }],  \n      imports: [  \n        BrowserModule,  \n        HttpClientModule,  \n        TranslateModule.forRoot({  \n          defaultLanguage: 'en-US',  \n          loader: {  \n            provide: TranslateLoader,  \n            useFactory: (httpClient: HttpClient) => {  \n              return new TranslateHttpLoader(  \n                httpClient,  \n                __webpack_public_path__ + '/assets/i18n/',  \n                '.json'  \n              );  \n            },  \n            deps: [HttpClient],  \n          },  \n        }),  \n      ],  \n      ...  \n    })  \n    \n\n* * *\n\n## See also​\n\n[Custom UI component implemented using remote module](https://academy.creatio.com/documents?ver=8.1&id=15017)\n\n[Custom validator implemented using remote module](https://academy.creatio.com/documents?ver=8.1&id=15040)\n\n[Custom converter implemented using remote module](https://academy.creatio.com/documents?ver=8.1&id=15035)\n\n[Custom request handler implemented using remote module](https://academy.creatio.com/documents?ver=8.1&id=15037)\n\n* * *\n\n## Resources​\n\n[`__webpack_public_path__` global variable](https://webpack.js.org/guides/public-path/) (official webpack documentation)\n\n  * Localize custom validators, converters and request handlers\n  * Localize properties of custom UI component\n  * Upload the translations of custom UI component from static content\n  * See also\n  * Resources\n\n\n",
  "analysis": {
    "word_count": 1581,
    "key_concepts": ["freedom ui", "package"],
    "use_cases": [
      "building applications",
      "custom development",
      "API integration",
      "system administration",
      "user management"
    ],
    "related_topics": ["customization", "layout", "ui design", "page schema"],
    "difficulty": "advanced",
    "ai_tags": ["creatio", "package", "freedom ui", "documentation", "advanced"]
  },
  "ai_optimized": true,
  "processed_at": "2025-07-28T13:23:25.514892"
}
