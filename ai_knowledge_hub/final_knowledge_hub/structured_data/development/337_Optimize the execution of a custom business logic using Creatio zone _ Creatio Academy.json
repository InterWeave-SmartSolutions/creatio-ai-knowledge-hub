{
  "id": 337,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/platform-customization/freedom-ui/creatio-zone/examples/execute-custom-code-outside-of-creatio-zone",
  "title": "Optimize the execution of a custom business logic using Creatio zone | Creatio Academy",
  "category": "development",
  "description": "To implement the example:",
  "content": "Version: 8.3 On this page Level: intermediate To implement the example: Set up the page UI. Read more >>> Implement the execution of business logic using Creatio zone. Read more >>> Example Add the following buttons to the custom request page: Open contacts . Must open the Contacts section. Show emails . Must call the {JSON} Placeholder external web service that retrieves emails of post comments. Creatio lets you switch between pages regardless of whether the request to the web service is complete or still in progress. Creatio blocks switching between pages while the request to the web service is still in progress. 1. Set up the page UI ​ Create an app based on the Records & business processes template. Instructions: Create an app manually (user documentation). For this example, create a Requests app. Open the form page in the Freedom UI Designer. For this example, open the Requests form page . Add a button . For this example, add the following buttons: button that calls the {JSON} Placeholder external web service from the request page button that opens the Contacts section To do this: Add a Button type component to the toolbar of the Freedom UI Designer. Click and fill out the button properties. Element Property Property value Button that calls the {JSON} Placeholder external web service from the request page Title Show emails Button that opens the Contacts section Title Open contacts Style Primary Save the changes . 2. Implement the execution of business logic using Creatio zone ​ Open the source code of the Freedom UI page. To do this, click . Enable the CrtZoneService service that optimizes the execution of custom business logic using Creatio zone. To do this, add @creatio-devkit/common to the AMD module as a dependency. AMD module dependencies /* Declare the AMD module. */ define ( \"UsrRequests_FormPage\" , /**SCHEMA_DEPS*/ [ \"@creatio-devkit/common\" ] /**SCHEMA_DEPS*/ , function /**SCHEMA_ARGS*/ ( sdk ) /**SCHEMA_ARGS*/ { ... } ; ) ; Set up how to handle the action executed on button click. Go to the viewConfigDiff schema section → ShowEmailsButton element. Bind the sending of the custom usr.ShowEmailsRequest request to the clicked button event. Go to the OpenContactsButton element. Bind the sending of the base crt.OpenPageRequest request to the clicked button event. Enter the schema code of the page to open in the params property. viewConfigDiff schema section viewConfigDiff : /**SCHEMA_VIEW_CONFIG_DIFF*/ [ /* Button that calls the {JSON} Placeholder external web service from the request page. */ { \"operation\" : \"insert\" , \"name\" : \"ShowEmailsButton\" , \"values\" : { ... , \"clicked\" : { /* Bind the sending of the custom request to the clicked button event. */ \"request\" : \"usr.ShowEmailsRequest\" } } , ... } , /* Button that opens the Contacts section. */ { \"operation\" : \"insert\" , \"name\" : \"OpenContactsButton\" , \"values\" : { ... , \"clicked\" : { /* Bind the sending of the custom request to the clicked button event. */ \"request\" : \"crt.OpenPageRequest\" , \"params\" : { \"schemaName\" : \"Contacts_ListPage\" } } } , ... } ] /**SCHEMA_VIEW_CONFIG_DIFF*/ , Implement the custom request handler . For this example, implement the custom usr.ShowEmailsRequest request handler. Go to the handlers schema section. Create an instance of the CrtZoneService service. Create an instance of the HttpClientService service. Specify the URL to retrieve a list of posts. Use the {JSON} Placeholder external service. Retrieve emails from post comments. For this example, handle 10 posts. Implement the business logic. If you need to switch between pages regardless of whether the request to the web service is complete or still in progress, use the CrtZoneService service instance and runOutside() method. handlers schema section handlers : /**SCHEMA_HANDLERS*/ [ { request : \"usr.ShowEmailsRequest\" , /* Implement the custom request handler. */ handler : async ( request , next ) => { /* Create an instance of the CrtZoneService service. */ const zoneService = new sdk . CrtZoneService ( ) ; /* Create an instance of the HttpClientService service. */ const httpClientService = new sdk . HttpClientService ( ) ; /* Specify the URL to retrieve emails from post comments. Use the {JSON} Placeholder external service. */ const postsEndpoint = \"https://jsonplaceholder.typicode.com/posts\" ; /* Implement the business logic to switch between pages regardless of whether the request to the web service is complete or still in progress. */ zoneService . runOutside ( async ( ) => { const collectedEmails = [ ] ; /* Retrieve emails from comments to 10 posts. */ for ( let postsId = 1 ; postsId <= 10 ; postsId ++ ) { const commends = await httpClientService . get ( ` ${ postsEndpoint } / ${ postsId } /comments ` ) ; const commentEmails = commends . body . map ( comment => comment . email ) ; collectedEmails . push ( ... commentEmails ) ; } alert ( ` Post comments have been successfully processed. ` + '\\n\\n' + ` Selected posts are commented by users with following emails: ` + '\\n' + collectedEmails . join ( ', ' ) ) ; } ) ; } } ] /**SCHEMA_HANDLERS*/ , If you need to block switching between pages while the request to the web service is still in progress, comment out the use of the CrtZoneService service instance and runOutside() method. This retrieves emails from post comments without using Creatio zone. handlers schema section handlers : /**SCHEMA_HANDLERS*/ [ { request : \"usr.ShowEmailsRequest\" , /* Implement the custom request handler. */ handler : async ( request , next ) => { /* Create an instance of the CrtZoneService service. */ //const zoneService = new sdk.CrtZoneService(); /* Create an instance of the HttpClientService service. */ const httpClientService = new sdk . HttpClientService ( ) ; /* Specify the URL to retrieve emails from post comments. Use the {JSON} Placeholder external service. */ const postsEndpoint = \"https://jsonplaceholder.typicode.com/posts\" ; /* Implement the business logic to switch between pages regardless of whether the request to the web service is complete or still in progress. */ //zoneService.runOutside(async () => { const collectedEmails = [ ] ; /* Retrieve emails from comments to 10 posts. */ for ( let postsId = 1 ; postsId <= 10 ; postsId ++ ) { const commends = await httpClientService . get ( ` ${ postsEndpoint } / ${ postsId } /comments ` ) ; const commentEmails = commends . body . map ( comment => comment . email ) ; collectedEmails . push ( ... commentEmails ) ; } alert ( ` Post comments have been successfully processed. ` + '\\n\\n' + ` Selected posts are commented by users with following emails: ` + '\\n' + collectedEmails . join ( ', ' ) ) ; //}); } } ] /**SCHEMA_HANDLERS*/ , Save the changes . View the result ​ To view the outcome of the example that lets you switch between pages : Make sure the usr.ShowEmailsRequest request handler uses the CrtZoneService service instance and runOutside() method . Open the Requests section . Create a request . Click Show emails . Click Open contacts . As a result , Creatio will open the Contacts section regardless of whether the request to the web service is complete or still in progress. View the result >>> To view the outcome of the example that blocks switching between pages : Make sure the usr.ShowEmailsRequest request handler does not use the CrtZoneService service instance and runOutside() method . Open the Requests section . Create a request . Click Show emails . Click Open contacts . As a result , Creatio will block opening the Contacts section while the request to the web service is still in progress. View the result >>> Source code ​ UsrRequests_FormPage /* Declare the AMD module. */ define ( \"UsrRequests_FormPage\" , /**SCHEMA_DEPS*/ [ \"@creatio-devkit/common\" ] /**SCHEMA_DEPS*/ , function /**SCHEMA_ARGS*/ ( sdk ) /**SCHEMA_ARGS*/ { return { viewConfigDiff : /**SCHEMA_VIEW_CONFIG_DIFF*/ [ { \"operation\" : \"merge\" , \"name\" : \"Feed\" , \"values\" : { \"dataSourceName\" : \"PDS\" , \"entitySchemaName\" : \"UsrRequests\" } } , { \"operation\" : \"merge\" , \"name\" : \"AttachmentList\" , \"values\" : { \"columns\" : [ { \"id\" : \"2756ad1d-3f63-4d21-9e4f-f4c3ad260326\" , \"code\" : \"AttachmentListDS_Name\" , \"caption\" : \"#ResourceString(AttachmentListDS_Name)#\" , \"dataValueType\" : 28 , \"width\" : 200 } ] } } , /* Button that calls the {JSON} Placeholder external web service from the request page. */ { \"operation\" : \"insert\" , \"name\" : \"ShowEmailsButton\" , \"values\" : { \"type\" : \"crt.Button\" , \"caption\" : \"#ResourceString(ShowEmailsButton_caption)#\" , \"color\" : \"default\" , \"disabled\" : false , \"size\" : \"large\" , \"iconPosition\" : \"only-text\" , \"visible\" : true , \"clicked\" : { /* Bind the sending of the custom request to the clicked button event. */ \"request\" : \"usr.ShowEmailsRequest\" } } , \"parentName\" : \"CardToolsContainer\" , \"propertyName\" : \"items\" , \"index\" : 0 } , /* Button that opens the Contacts section. */ { \"operation\" : \"insert\" , \"name\" : \"OpenContactsButton\" , \"values\" : { \"type\" : \"crt.Button\" , \"caption\" : \"#ResourceString(OpenContactsButton_caption)#\" , \"color\" : \"primary\" , \"disabled\" : false , \"size\" : \"large\" , \"iconPosition\" : \"only-text\" , \"visible\" : true , \"clicked\" : { /* Bind the sending of the custom request to the clicked button event. */ \"request\" : \"crt.OpenPageRequest\" , \"params\" : { \"schemaName\" : \"Contacts_ListPage\" } } } , \"parentName\" : \"CardToolsContainer\" , \"propertyName\" : \"items\" , \"index\" : 1 } , { \"operation\" : \"insert\" , \"name\" : \"UsrName\" , \"values\" : { \"layoutConfig\" : { \"column\" : 1 , \"row\" : 1 , \"colSpan\" : 1 , \"rowSpan\" : 1 } , \"type\" : \"crt.Input\" , \"label\" : \"$Resources.Strings.UsrName\" , \"control\" : \"$UsrName\" , \"labelPosition\" : \"auto\" } , \"parentName\" : \"SideAreaProfileContainer\" , \"propertyName\" : \"items\" , \"index\" : 0 } ] /**SCHEMA_VIEW_CONFIG_DIFF*/ , viewModelConfigDiff : /**SCHEMA_VIEW_MODEL_CONFIG_DIFF*/ [ { \"operation\" : \"merge\" , \"path\" : [ \"attributes\" ] , \"values\" : { \"UsrName\" : { \"modelConfig\" : { \"path\" : \"PDS.UsrName\" } } } } , { \"operation\" : \"merge\" , \"path\" : [ \"attributes\" , \"Id\" , \"modelConfig\" ] , \"values\" : { \"path\" : \"PDS.Id\" } } ] /**SCHEMA_VIEW_MODEL_CONFIG_DIFF*/ , modelConfigDiff : /**SCHEMA_MODEL_CONFIG_DIFF*/ [ { \"operation\" : \"merge\" , \"path\" : [ ] , \"values\" : { \"primaryDataSourceName\" : \"PDS\" } } , { \"operation\" : \"merge\" , \"path\" : [ \"dataSources\" ] , \"values\" : { \"PDS\" : { \"type\" : \"crt.EntityDataSource\" , \"config\" : { \"entitySchemaName\" : \"UsrRequests\" } , \"scope\" : \"page\" } } } ] /**SCHEMA_MODEL_CONFIG_DIFF*/ , handlers : /**SCHEMA_HANDLERS*/ [ { request : \"usr.ShowEmailsRequest\" , /* Implement the custom request handler. */ handler : async ( request , next ) => { /* Create an instance of the CrtZoneService service. */ const zoneService = new sdk . CrtZoneService ( ) ; /* Create an instance of the HttpClientService service. */ const httpClientService = new sdk . HttpClientService ( ) ; /* Specify the URL to retrieve emails from post comments. Use the {JSON} Placeholder external service. */ const postsEndpoint = \"https://jsonplaceholder.typicode.com/posts\" ; /* Implement the business logic to switch between pages regardless of whether the request to the web service is complete or still in progress. */ zoneService . runOutside ( async ( ) => { const collectedEmails = [ ] ; /* Retrieve emails from comments to 10 posts. */ for ( let postsId = 1 ; postsId <= 10 ; postsId ++ ) { const commends = await httpClientService . get ( ` ${ postsEndpoint } / ${ postsId } /comments ` ) ; const commentEmails = commends . body . map ( comment => comment . email ) ; collectedEmails . push ( ... commentEmails ) ; } alert ( ` Post comments have been successfully processed. ` + '\\n\\n' + ` Selected posts are commented by users with following emails: ` + '\\n' + collectedEmails . join ( ', ' ) ) ; } ) ; } } ] /**SCHEMA_HANDLERS*/ , converters : /**SCHEMA_CONVERTERS*/ { } /**SCHEMA_CONVERTERS*/ , validators : /**SCHEMA_VALIDATORS*/ { } /**SCHEMA_VALIDATORS*/ } ; } ) ; Resources ​ Package with example implementation 1. Set up the page UI 2. Implement the execution of business logic using Creatio zone View the result Source code Resources",
  "markdown": "Version: 8.3\n\nOn this page\n\nLevel: intermediate\n\nTo implement the example:\n\n  1. Set up the page UI. Read more >>>\n  2. Implement the execution of business logic using Creatio zone. Read more >>>\n\n\n\nExample\n\nAdd the following buttons to the custom request page:\n\n  * **Open contacts**. Must open the **Contacts** section.\n\n  * **Show emails**. Must call the `{JSON} Placeholder` external web service that retrieves emails of post comments.\n\n    * Creatio lets you switch between pages regardless of whether the request to the web service is complete or still in progress.\n\n![](https://academy.creatio.com/docs/sites/academy_en/files/documentation/sdk/en/BPMonlineWebSDK/Screenshots/CreatioZone/8.1/scr_result.gif)\n\n    * Creatio blocks switching between pages while the request to the web service is still in progress.\n\n![](https://academy.creatio.com/docs/sites/academy_en/files/documentation/sdk/en/BPMonlineWebSDK/Screenshots/CreatioZone/8.1/scr_result_01.gif)\n\n\n\n\n## 1\\. Set up the page UI​\n\n  1. **Create an app** based on the **Records & business processes** template. Instructions: [Create an app manually](https://academy.creatio.com/documents?ver=8.3&id=2377&anchor=title-2232-6) (user documentation).\n\nFor this example, create a **Requests** app.\n\n  2. **Open the form page** in the Freedom UI Designer.\n\nFor this example, open the **Requests form page**.\n\n  3. **Add a button**.\n\nFor this example, add the following buttons:\n\n     * button that calls the [{JSON} Placeholder](https://jsonplaceholder.typicode.com/posts) external web service from the request page\n     * button that opens the **Contacts** section\n\nTo do this:\n\n     1. Add a **Button** type component to the toolbar of the Freedom UI Designer.\n\n     2. Click ![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/ClientModule/8.0/scr_Settings_button.png) and fill out the button properties.\n\nElement| Property| Property value| Button that calls the `{JSON} Placeholder` external web service from the request page| Title| Show emails| Button that opens the **Contacts** section| Title| Open contacts| Style| Primary  \n---|---  \n  \n  4. **Save the changes**.\n\n\n\n\n## 2\\. Implement the execution of business logic using Creatio zone​\n\n  1. **Open the source code** of the Freedom UI page. To do this, click ![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/ClientModule/8.0/scr_SourceCode_button.png).\n\n  2. **Enable the** `CrtZoneService` **service** that optimizes the execution of custom business logic using Creatio zone. To do this, add `@creatio-devkit/common` to the AMD module as a dependency.\n\nAMD module dependencies\n         \n         /* Declare the AMD module. */  \n         define(\"UsrRequests_FormPage\", /**SCHEMA_DEPS*/[\"@creatio-devkit/common\"] /**SCHEMA_DEPS*/, function/**SCHEMA_ARGS*/(sdk)/**SCHEMA_ARGS*/ {  \n                 ...  \n             };  \n         );  \n         \n\n  3. **Set up how to handle the action** executed on button click.\n\n     1. Go to the `viewConfigDiff` schema section → `ShowEmailsButton` element.\n     2. Bind the sending of the custom `usr.ShowEmailsRequest` request to the `clicked` button event.\n     3. Go to the `OpenContactsButton` element.\n     4. Bind the sending of the base `crt.OpenPageRequest` request to the `clicked` button event.\n     5. Enter the schema code of the page to open in the `params` property.\n\nviewConfigDiff schema section\n    \n    viewConfigDiff: /**SCHEMA_VIEW_CONFIG_DIFF*/[  \n        /* Button that calls the {JSON} Placeholder external web service from the request page. */  \n        {  \n            \"operation\": \"insert\",  \n            \"name\": \"ShowEmailsButton\",  \n            \"values\": {  \n                ...,  \n                \"clicked\": {  \n                    /* Bind the sending of the custom request to the clicked button event. */  \n                    \"request\": \"usr.ShowEmailsRequest\"  \n                }  \n            },  \n            ...  \n        },  \n        /* Button that opens the Contacts section. */  \n        {  \n            \"operation\": \"insert\",  \n            \"name\": \"OpenContactsButton\",  \n            \"values\": {  \n                ...,  \n                \"clicked\": {  \n                    /* Bind the sending of the custom request to the clicked button event. */  \n                    \"request\": \"crt.OpenPageRequest\",  \n                    \"params\": {  \n                        \"schemaName\": \"Contacts_ListPage\"  \n                    }  \n                }  \n            },  \n            ...  \n        }  \n    ]/**SCHEMA_VIEW_CONFIG_DIFF*/,  \n    \n\n  4. **Implement the custom request handler**.\n\nFor this example, implement the custom `usr.ShowEmailsRequest` request handler.\n\n     1. Go to the `handlers` schema section.\n\n     2. Create an instance of the `CrtZoneService` service.\n\n     3. Create an instance of the `HttpClientService` service.\n\n     4. Specify the URL to retrieve a list of posts. Use the `{JSON} Placeholder` external service.\n\n     5. Retrieve emails from post comments. For this example, handle 10 posts.\n\n     6. Implement the business logic.\n\n        * If you need to **switch between pages** regardless of whether the request to the web service is complete or still in progress, use the `CrtZoneService` service instance and `runOutside()` method.\n\nhandlers schema section\n              \n              handlers: /**SCHEMA_HANDLERS*/[  \n                  {  \n                      request: \"usr.ShowEmailsRequest\",  \n                      /* Implement the custom request handler. */  \n                      handler: async (request, next) => {  \n                          /* Create an instance of the CrtZoneService service. */  \n                          const zoneService = new sdk.CrtZoneService();  \n                          /* Create an instance of the HttpClientService service. */  \n                          const httpClientService = new sdk.HttpClientService();  \n                          /* Specify the URL to retrieve emails from post comments. Use the {JSON} Placeholder external service. */  \n                          const postsEndpoint = \"https://jsonplaceholder.typicode.com/posts\";  \n                          /* Implement the business logic to switch between pages regardless of whether the request to the web service is complete or still in progress. */  \n                          zoneService.runOutside(async () => {  \n                              const collectedEmails = [];  \n                              /* Retrieve emails from comments to 10 posts. */  \n                              for (let postsId = 1; postsId <= 10; postsId++) {  \n                                  const commends = await httpClientService.get(`${postsEndpoint}/${postsId}/comments`);  \n                                  const commentEmails = commends.body.map(comment => comment.email);  \n                                  collectedEmails.push(...commentEmails);  \n                              }  \n                              alert(`Post comments have been successfully processed.` + '\\n\\n' + `Selected posts are commented by users with following emails:` + '\\n' + collectedEmails.join(', '));  \n                          });  \n                      }  \n                  }  \n              ]/**SCHEMA_HANDLERS*/,  \n              \n\n        * If you need to **block switching between pages** while the request to the web service is still in progress, comment out the use of the `CrtZoneService` service instance and `runOutside()` method. This retrieves emails from post comments without using Creatio zone.\n\nhandlers schema section\n              \n              handlers: /**SCHEMA_HANDLERS*/[  \n                  {  \n                      request: \"usr.ShowEmailsRequest\",  \n                      /* Implement the custom request handler. */  \n                      handler: async (request, next) => {  \n                          /* Create an instance of the CrtZoneService service. */  \n                          //const zoneService = new sdk.CrtZoneService();  \n                          /* Create an instance of the HttpClientService service. */  \n                          const httpClientService = new sdk.HttpClientService();  \n                          /* Specify the URL to retrieve emails from post comments. Use the {JSON} Placeholder external service. */  \n                          const postsEndpoint = \"https://jsonplaceholder.typicode.com/posts\";  \n                          /* Implement the business logic to switch between pages regardless of whether the request to the web service is complete or still in progress. */  \n                          //zoneService.runOutside(async () => {  \n                              const collectedEmails = [];  \n                              /* Retrieve emails from comments to 10 posts. */  \n                              for (let postsId = 1; postsId <= 10; postsId++) {  \n                                  const commends = await httpClientService.get(`${postsEndpoint}/${postsId}/comments`);  \n                                  const commentEmails = commends.body.map(comment => comment.email);  \n                                  collectedEmails.push(...commentEmails);  \n                              }  \n                              alert(`Post comments have been successfully processed.` + '\\n\\n' + `Selected posts are commented by users with following emails:` + '\\n' + collectedEmails.join(', '));  \n                          //});  \n                      }  \n                  }  \n              ]/**SCHEMA_HANDLERS*/,  \n              \n\n  5. **Save the changes**.\n\n\n\n\n## View the result​\n\nTo view the outcome of the example that **lets you switch between pages** :\n\n  1. Make sure the `usr.ShowEmailsRequest` request handler **uses the** `CrtZoneService` **service instance and** `runOutside()` **method**.\n  2. **Open the Requests section**.\n  3. **Create a request**.\n  4. Click **Show emails**.\n  5. Click **Open contacts**.\n\n\n\n**As a result** , Creatio will open the **Contacts** section regardless of whether the request to the web service is complete or still in progress. [View the result >>>](https://academy.creatio.com/documents?ver=8.3&id=15093&anchor=view-result-1)\n\nTo view the outcome of the example that **blocks switching between pages** :\n\n  1. Make sure the `usr.ShowEmailsRequest` request handler **does not use the** `CrtZoneService` **service instance and** `runOutside()` **method**.\n  2. **Open the Requests section**.\n  3. **Create a request**.\n  4. Click **Show emails**.\n  5. Click **Open contacts**.\n\n\n\n**As a result** , Creatio will block opening the **Contacts** section while the request to the web service is still in progress. [View the result >>>](https://academy.creatio.com/documents?ver=8.3&id=15093&anchor=view-result-2)\n\n## Source code​\n\nUsrRequests_FormPage\n    \n    \n    /* Declare the AMD module. */  \n    define(\"UsrRequests_FormPage\", /**SCHEMA_DEPS*/[\"@creatio-devkit/common\"]/**SCHEMA_DEPS*/, function/**SCHEMA_ARGS*/(sdk)/**SCHEMA_ARGS*/ {  \n        return {  \n            viewConfigDiff: /**SCHEMA_VIEW_CONFIG_DIFF*/[  \n                {  \n                    \"operation\": \"merge\",  \n                    \"name\": \"Feed\",  \n                    \"values\": {  \n                        \"dataSourceName\": \"PDS\",  \n                        \"entitySchemaName\": \"UsrRequests\"  \n                    }  \n                },  \n                {  \n                    \"operation\": \"merge\",  \n                    \"name\": \"AttachmentList\",  \n                    \"values\": {  \n                        \"columns\": [  \n                            {  \n                                \"id\": \"2756ad1d-3f63-4d21-9e4f-f4c3ad260326\",  \n                                \"code\": \"AttachmentListDS_Name\",  \n                                \"caption\": \"#ResourceString(AttachmentListDS_Name)#\",  \n                                \"dataValueType\": 28,  \n                                \"width\": 200  \n                            }  \n                        ]  \n                    }  \n                },  \n                /* Button that calls the {JSON} Placeholder external web service from the request page. */  \n                {  \n                    \"operation\": \"insert\",  \n                    \"name\": \"ShowEmailsButton\",  \n                    \"values\": {  \n                        \"type\": \"crt.Button\",  \n                        \"caption\": \"#ResourceString(ShowEmailsButton_caption)#\",  \n                        \"color\": \"default\",  \n                        \"disabled\": false,  \n                        \"size\": \"large\",  \n                        \"iconPosition\": \"only-text\",  \n                        \"visible\": true,  \n                        \"clicked\": {  \n                            /* Bind the sending of the custom request to the clicked button event. */  \n                            \"request\": \"usr.ShowEmailsRequest\"  \n                        }  \n                    },  \n                    \"parentName\": \"CardToolsContainer\",  \n                    \"propertyName\": \"items\",  \n                    \"index\": 0  \n                },  \n                /* Button that opens the Contacts section. */  \n                {  \n                    \"operation\": \"insert\",  \n                    \"name\": \"OpenContactsButton\",  \n                    \"values\": {  \n                        \"type\": \"crt.Button\",  \n                        \"caption\": \"#ResourceString(OpenContactsButton_caption)#\",  \n                        \"color\": \"primary\",  \n                        \"disabled\": false,  \n                        \"size\": \"large\",  \n                        \"iconPosition\": \"only-text\",  \n                        \"visible\": true,  \n                        \"clicked\": {  \n                            /* Bind the sending of the custom request to the clicked button event. */  \n                            \"request\": \"crt.OpenPageRequest\",  \n                            \"params\": {  \n                                \"schemaName\": \"Contacts_ListPage\"  \n                            }  \n                        }  \n                    },  \n                    \"parentName\": \"CardToolsContainer\",  \n                    \"propertyName\": \"items\",  \n                    \"index\": 1  \n                },  \n                {  \n                    \"operation\": \"insert\",  \n                    \"name\": \"UsrName\",  \n                    \"values\": {  \n                        \"layoutConfig\": {  \n                            \"column\": 1,  \n                            \"row\": 1,  \n                            \"colSpan\": 1,  \n                            \"rowSpan\": 1  \n                        },  \n                        \"type\": \"crt.Input\",  \n                        \"label\": \"$Resources.Strings.UsrName\",  \n                        \"control\": \"$UsrName\",  \n                        \"labelPosition\": \"auto\"  \n                    },  \n                    \"parentName\": \"SideAreaProfileContainer\",  \n                    \"propertyName\": \"items\",  \n                    \"index\": 0  \n                }  \n            ]/**SCHEMA_VIEW_CONFIG_DIFF*/,  \n            viewModelConfigDiff: /**SCHEMA_VIEW_MODEL_CONFIG_DIFF*/[  \n                {  \n                    \"operation\": \"merge\",  \n                    \"path\": [  \n                        \"attributes\"  \n                    ],  \n                    \"values\": {  \n                        \"UsrName\": {  \n                            \"modelConfig\": {  \n                                \"path\": \"PDS.UsrName\"  \n                            }  \n                        }  \n                    }  \n                },  \n                {  \n                    \"operation\": \"merge\",  \n                    \"path\": [  \n                        \"attributes\",  \n                        \"Id\",  \n                        \"modelConfig\"  \n                    ],  \n                    \"values\": {  \n                        \"path\": \"PDS.Id\"  \n                    }  \n                }  \n            ]/**SCHEMA_VIEW_MODEL_CONFIG_DIFF*/,  \n            modelConfigDiff: /**SCHEMA_MODEL_CONFIG_DIFF*/[  \n                {  \n                    \"operation\": \"merge\",  \n                    \"path\": [],  \n                    \"values\": {  \n                        \"primaryDataSourceName\": \"PDS\"  \n                    }  \n                },  \n                {  \n                    \"operation\": \"merge\",  \n                    \"path\": [  \n                        \"dataSources\"  \n                    ],  \n                    \"values\": {  \n                        \"PDS\": {  \n                            \"type\": \"crt.EntityDataSource\",  \n                            \"config\": {  \n                                \"entitySchemaName\": \"UsrRequests\"  \n                            },  \n                            \"scope\": \"page\"  \n                        }  \n                    }  \n                }  \n            ]/**SCHEMA_MODEL_CONFIG_DIFF*/,  \n            handlers: /**SCHEMA_HANDLERS*/[  \n                {  \n                    request: \"usr.ShowEmailsRequest\",  \n                    /* Implement the custom request handler. */  \n                    handler: async (request, next) => {  \n                        /* Create an instance of the CrtZoneService service. */  \n                        const zoneService = new sdk.CrtZoneService();  \n                        /* Create an instance of the HttpClientService service. */  \n                        const httpClientService = new sdk.HttpClientService();  \n                        /* Specify the URL to retrieve emails from post comments. Use the {JSON} Placeholder external service. */  \n                        const postsEndpoint = \"https://jsonplaceholder.typicode.com/posts\";  \n                        /* Implement the business logic to switch between pages regardless of whether the request to the web service is complete or still in progress. */  \n                        zoneService.runOutside(async () => {  \n                            const collectedEmails = [];  \n                            /* Retrieve emails from comments to 10 posts. */  \n                            for (let postsId = 1; postsId <= 10; postsId++) {  \n                                const commends = await httpClientService.get(`${postsEndpoint}/${postsId}/comments`);  \n                                const commentEmails = commends.body.map(comment => comment.email);  \n                                collectedEmails.push(...commentEmails);  \n                            }  \n                            alert(`Post comments have been successfully processed.` + '\\n\\n' + `Selected posts are commented by users with following emails:` + '\\n' + collectedEmails.join(', '));  \n                        });  \n                    }  \n                }  \n            ]/**SCHEMA_HANDLERS*/,  \n            converters: /**SCHEMA_CONVERTERS*/{}/**SCHEMA_CONVERTERS*/,  \n            validators: /**SCHEMA_VALIDATORS*/{}/**SCHEMA_VALIDATORS*/  \n        };  \n    });  \n    \n\n* * *\n\n## Resources​\n\n[Package with example implementation](https://academy.creatio.com/docs/sites/academy_en/files/packages/CreatioZone/8.1/UsrRequests_2024-03-21_08.51.00.zip)\n\n  * 1\\. Set up the page UI\n  * 2\\. Implement the execution of business logic using Creatio zone\n  * View the result\n  * Source code\n  * Resources\n\n\n",
  "analysis": {
    "word_count": 2018,
    "key_concepts": ["business process", "freedom ui", "section", "web service", "operation", "package", "contact"],
    "use_cases": [
      "building applications",
      "custom development",
      "API integration",
      "system administration",
      "user management"
    ],
    "related_topics": [
      "workflow",
      "bpm",
      "automation",
      "process design",
      "customization",
      "layout",
      "page schema",
      "ui design"
    ],
    "difficulty": "intermediate",
    "ai_tags": [
      "creatio",
      "intermediate",
      "operation",
      "freedom ui",
      "documentation",
      "section",
      "web service",
      "business process"
    ]
  },
  "ai_optimized": true,
  "processed_at": "2025-07-28T13:21:09.312882"
}
