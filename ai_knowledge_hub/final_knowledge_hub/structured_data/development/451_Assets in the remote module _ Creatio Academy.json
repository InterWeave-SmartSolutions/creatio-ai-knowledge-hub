{
  "id": 451,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/8.1/front-end-development/freedom-ui/remote-module/overview",
  "title": "Assets in the remote module | Creatio Academy",
  "category": "development",
  "description": "Creatio lets you use assets in the remote module.",
  "content": "This is documentation for Creatio 8.1 . For up-to-date documentation, see the latest version ( 8.3 ). Version: 8.1 On this page Level: intermediate Creatio lets you use assets in the remote module. Assets include the following: fonts icons (*.svg files) images (*.png, *.jpg, *.jpeg, *.gif files) background images (images connected via the background-image CSS property) Do not use assets in the remote module in the following situations : You do not have access to the source code of the remote module. Configuring the module properties via incoming properties is not possible because the developer of the remote module does not provide this capability. You can use assets in the remote module in other situations. Connect assets either directly ( CDN or Base64 ) or via an incoming property. The asset format depends on the Angular project file where the user adds the asset. If you connect the required asset in the Base64 format, the user can use the remote module without access to the required asset on the Internet. View detailed instructions on how to use the assets below. You can customize assets connected via an incoming property more flexibly than CDN or Base64 assets connected directly . If incoming properties are provided, interact with them via the CrtInput decorator. In this case, set the property value via an attribute or in the Freedom UI page schema. View an example below. Example that connects the asset via an incoming property < usr - view - element > < / usr - view - element > ... const viewElement = document . querySelector ( 'usr-view-element' ) ; const base64Image = 'data:image/png;base64,...' ; viewElement . setAttribute ( 'image' , base64Image ) Use a custom font ​ You can connect a custom font to a remote module in the following ways : CDN or Base64 directly CDN or Base64 via the incoming property To use a custom font in a remote module ( CDN ): Connect the font in the index.html component file. Example of the index.html file < link rel = \" stylesheet \" href = \" https://fonts.googleapis.com/css?family=Dancing+Script&display=swap \" /> Apply the font. To use a custom font in a remote module ( Base64 ): Connect the font in the src property of the *.component.scss file. Example of the *.component.scss file @font-face { font-family : \"Menlo\" ; src : url ( \"data:font/ttf;base64, ...\" ) } Apply the font in the *.component.html file. Example of the *.component.html file p { font-family: \"Menlo\", cursive; color: green; font-size: 36px; } To use a custom font in a remote module ( CDN or Base64 via the incoming property ): Flag the incoming field using the CrtInput decorator. Implement the business logic that installs and loads a custom font. Example that implements the business logic private _fontFamily ! : string ; private _fontSrc ! : string ; @ CrtInput ( ) @ Input ( ) public set fontConfig ( config : { fontFamily : string ; fontSrc : string } ) { if ( Boolean ( config ) ) { this . _fontFamily = config . fontFamily ; this . _fontSrc = config . fontSrc ; const font = new FontFace ( this . _fontFamily , 'url(${this._fontSrc})' ) ; font . load ( ) . then ( ( ) => { this . _renderrer . setStyle ( document . querySelector ( 'p' ) , 'fontFamily' , this . _fontFamily ) ; } ) ; } } Add the needed configuration object that contains the custom font to the Freedom UI page schema. If the Freedom UI page schema of other component uses the remote module, set up the properties via the component attributes. Example of a configuration object (CDN) Example of a configuration object (Base64) \"type\" : \"usr.viewElement\" , \"fontConfig\" : { \"fontFamily\" : \"FontFamily Style Bitter\" , \"fontSrc\" : \"https://fonts.gstatic.com/s/bitter/v7/HEpP8tJXlWaYHimsnXgfCOvvDin1pK8aKtelpeZ5c0A.woff2\" } \"type\" : \"usr.viewElement\" , \"fontConfig\" : { \"fontFamily\" : \"FontFamily Style Bitter\" , \"fontSrc\" : \"data:application/octet-stream;base64, ...\" } Use a custom icon ​ You can connect a custom icon to a remote module in the following ways : CDN or Base64 directly CDN or Base64 via the incoming property To use a custom icon in a remote module ( CDN or Base64 ): Add the DomSanitizer abstract class to the component constructor. Learn more about the DomSanitizer abstract class in the official Angular documentation . Example of a constructor constructor ( private readonly _renderrer : Renderer2 , private readonly _domSanitizer : DomSanitizer ) { } In this case, it can display an error about the unsafe URL address of the custom icon. Add the URL of the needed CDN or Base64 custom icon to the bypassSecurityTrustResourceUrl() method. Example of the bypassSecurityTrustResourceUrl() method (CDN) Example of the bypassSecurityTrustResourceUrl() method (Base64) public svgImage : string = this . _domSanitizer . bypassSecurityTrustResourceUrl ( 'https://www.svgrepo.com/show/303233/icon.svg' ) as string ; public svgImage : string = this . _domSanitizer . bypassSecurityTrustResourceUrl ( 'data:image/svg+xml;base64,...' ) as string ; Connect the icon. You can connect the icon in the following ways : via the <img> tag via the <object> tag Example that connects an icon (<img> tag) Example that connects an icon (<cke:object> tag) < img [src] = \" svgImage \" alt = \" svgImage \" /> < object type = \" image/svg+xml \" [data] = \" svgImage \" > svg image </ object > To use a custom icon in a remote module ( CDN or Base64 via the incoming property ): Add the DomSanitizer abstract class to the component constructor. Example of a constructor constructor ( private readonly _renderrer : Renderer2 , private readonly _domSanitizer : DomSanitizer ) { } In this case, can display an error about the unsafe URL address of the custom icon. Flag the field that contains the custom icon using the CrtInput decorator. Add the URL of the needed CDN or Base64 custom icon to the bypassSecurityTrustResourceUrl() method in. Example of the bypassSecurityTrustResourceUrl() method @ CrtInput ( ) @ Input ( ) public set svgImage ( value : string ) { if ( Boolean ( value ) ) { this . _svgImage = this . _domSanitizer . bypassSecurityTrustResourceUrl ( value ) as string ; } } public get svgImage ( ) : string { return this . _svgImage ; } Connect the icon. You can connect the icon in the following ways : via the <img> tag via the <object> tag Example that connects an icon (<img> tag) Example that connects an icon (<cke:object> tag) < ng-container *ngIf = \" svgImage \" > < img [src] = \" svgImage \" alt = \" svgImage \" /> </ ng-container > < ng-container *ngIf = \" svgImage \" > < object type = \" image/svg+xml \" [data] = \" svgImage \" > svg image </ object > </ ng-container > Add the needed configuration object that contains a custom icon to the Freedom UI page schema. Set up the properties via the component attributes using a wrapper. Example of a configuration object \"type\" : \"usr.viewElement\" , \"svgImage\" : \"https://www.svgrepo.com/show/303233/icon.svg\" Use a custom image ​ You can connect a custom image to a remote module in the following ways : CDN or Base64 directly CDN or Base64 via the incoming property To use a custom image in a remote module ( CDN or Base64 ): Add an image to the imageUrl attribute. Example of the imageUrl attribute (CDN) Example of the imageUrl attribute (Base64) export class ImageComponent { public imageUrl = 'https://upload.wikimedia.org/wikipedia/commoms/thumb/4/47/picture.png' } export class ImageComponent { public imageUrl = 'data:image/png;base64,...' } Connect the image to the [src] attribute of the <img> tag. Example of the <img> tag < img [src] = \" imageUrl \" alt = \" image \" /> To use a custom image in a remote module ( CDN or Base64 via the incoming property ): Flag the incoming parameter using the CrtInput decorator. Example of an incoming parameter export class ImageComponent { @ CrtInput ( ) @ Input ( ) public imageUrl ! : string ; } Set the imageUrl property value in the Freedom UI page schema. Creatio lets you set a property value from the page schema and the component wrapper. Example of the imageUrl attribute (CDN) Example of the imageUrl attribute (Base64) \"values\" : { \"type\" : \"usr.viewElement\" , \"imageUrl\" : \"https://upload.wikimedia.org/wikipedia/commoms/thumb/4/47/picture.png\" } \"values\" : { \"type\" : \"usr.viewElement\" , \"imageUrl\" : \"data:image/png;base64,...\" } Use the attribute that contains the property name to set the Base64 image in the wrapper in. Example that sets an image (the Base64 property) < usr - view - element > < / usr - view - element > ... const viewElement = document . querySelector ( 'usr-view-element' ) ; const base64Image = 'data:image/png;base64,...' ; viewElement . setAttribute ( 'image' , base64Image ) Use a custom background image ​ You can connect a custom background image in a remote module in the following ways : CDN or Base64 directly CDN or Base64 via the incoming property To use a custom background image in a remote module ( CDN or Base64 ): Find the needed element after the View model initialization. Connect the background image in the remote module. Example that connects image (CDN) Example that connects image (Base64) public ngAfterViewInit ( ) : void { this . _renderrer . setStyle ( document . querySelector ( 'p' ) , 'background-image' , 'url(https://upload.wikimedia.org/wikipedia/commoms/thumb/4/47/picture.png)' ) ; } public ngAfterViewInit ( ) : void { this . _renderrer . setStyle ( document . querySelector ( 'p' ) , 'background-image' , 'url(data:image/png;base64,...)' ) ; } To use a custom background image in a remote module ( CDN or Base64 via the incoming property ): Flag the incoming parameter using the CrtInput decorator. Set the CSS style when receiving the incoming parameter value. Example that sets a CSS style @ CrtInput ( ) @ Input ( ) public set imageUrl ( value ) { if ( Boolean ( value ) ) { this . _renderrer . setStyle ( document . querySelector ( 'p' ) , 'background-image' , 'url(${value})' ) ; } } Specify the background image URL in the Freedom UI page schema. Example of a background image URL (CDN) Example of a background image URL (Base64) \"type\" : \"usr.viewElement\" , \"imageUrl\" : \"https://upload.wikimedia.org/wikipedia/commoms/thumb/4/47/picture.png\" \"type\" : \"usr.viewElement\" , \"imageUrl\" : \"data:image/png;base64,...\" Resources ​ DomSanitizer abstract class (official Angular documentation) Use a custom font Use a custom icon Use a custom image Use a custom background image Resources",
  "markdown": "This is documentation for Creatio **8.1**.\n\nFor up-to-date documentation, see the **[latest version](/docs/8.x/dev/development-on-creatio-platform/front-end-development/freedom-ui/remote-module/overview)** (8.3).\n\nVersion: 8.1\n\nOn this page\n\nLevel: intermediate\n\nCreatio lets you use assets in the remote module.\n\nAssets include the following:\n\n  * fonts\n  * icons (*.svg files)\n  * images (*.png, *.jpg, *.jpeg, *.gif files)\n  * background images (images connected via the `background-image` CSS property)\n\n\n\nDo not use assets in the remote module in the following **situations** :\n\n  * You do not have access to the source code of the remote module.\n  * Configuring the module properties via incoming properties is not possible because the developer of the remote module does not provide this capability.\n\n\n\nYou can use assets in the remote module in other situations. Connect assets either directly (`CDN` or `Base64`) or via an incoming property. The asset format depends on the Angular project file where the user adds the asset. If you connect the required asset in the `Base64` format, the user can use the remote module without access to the required asset on the Internet. View detailed instructions on how to use the assets below.\n\nYou can customize assets connected via an incoming property more flexibly than `CDN` or `Base64` assets connected directly . If incoming properties are provided, interact with them via the `CrtInput` decorator. In this case, set the property value via an attribute or in the Freedom UI page schema. View an example below.\n\nExample that connects the asset via an incoming property\n    \n    \n    <usr-view-element></usr-view-element>  \n    ...  \n    const viewElement = document.querySelector('usr-view-element');  \n    const base64Image = 'data:image/png;base64,...';  \n    viewElement.setAttribute('image', base64Image)  \n    \n\n## Use a custom font​\n\nYou can connect a custom font to a remote module in the following **ways** :\n\n  * `CDN` or `Base64` directly\n  * `CDN` or `Base64` via the incoming property\n\n\n\nTo use a custom font in a remote module (`CDN`):\n\n  1. Connect the font in the `index.html` component file.\n\nExample of the index.html file\n         \n         <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Dancing+Script&display=swap\" />  \n         \n\n  2. Apply the font.\n\n\n\n\nTo use a custom font in a remote module (`Base64`):\n\n  1. Connect the font in the `src` property of the `*.component.scss` file.\n\nExample of the *.component.scss file\n         \n         @font-face {  \n             font-family: \"Menlo\";  \n             src: url(\"data:font/ttf;base64, ...\")  \n         }  \n         \n\n  2. Apply the font in the `*.component.html` file.\n\nExample of the *.component.html file\n         \n         p {  \n             font-family: \"Menlo\", cursive;  \n             color: green;  \n             font-size: 36px;  \n         }  \n         \n\n\n\n\nTo use a custom font in a remote module (`CDN` **or** `Base64` **via the incoming property**):\n\n  1. Flag the incoming field using the `CrtInput` decorator.\n\n  2. Implement the business logic that installs and loads a custom font.\n\nExample that implements the business logic\n         \n         private _fontFamily!: string;  \n         private _fontSrc!: string;  \n           \n         @CrtInput()  \n         @Input()  \n         public set fontConfig(config: { fontFamily: string; fontSrc: string}) {  \n             if (Boolean(config)) {  \n                 this._fontFamily = config.fontFamily;  \n                 this._fontSrc = config.fontSrc;  \n                 const font = new FontFace(this._fontFamily, 'url(${this._fontSrc})');  \n                 font.load().then(() => {  \n                     this._renderrer.setStyle(  \n                         document.querySelector('p'),  \n                         'fontFamily',  \n                         this._fontFamily  \n                     );  \n                 });  \n             }  \n         }  \n         \n\n  3. Add the needed configuration object that contains the custom font to the Freedom UI page schema. If the Freedom UI page schema of other component uses the remote module, set up the properties via the component attributes.\n\n     * Example of a configuration object (CDN)\n     * Example of a configuration object (Base64)\n    \n    \"type\": \"usr.viewElement\",  \n    \"fontConfig\": {  \n        \"fontFamily\": \"FontFamily Style Bitter\",  \n        \"fontSrc\": \"https://fonts.gstatic.com/s/bitter/v7/HEpP8tJXlWaYHimsnXgfCOvvDin1pK8aKtelpeZ5c0A.woff2\"  \n    }  \n    \n    \n    \"type\": \"usr.viewElement\",  \n    \"fontConfig\": {  \n        \"fontFamily\": \"FontFamily Style Bitter\",  \n        \"fontSrc\": \"data:application/octet-stream;base64, ...\"  \n    }  \n    \n\n\n\n\n## Use a custom icon​\n\nYou can connect a custom icon to a remote module in the following **ways** :\n\n  * `CDN` or `Base64` directly\n  * `CDN` or `Base64` via the incoming property\n\n\n\nTo use a custom icon in a remote module (`CDN` **or** `Base64`):\n\n  1. Add the `DomSanitizer` abstract class to the component constructor. Learn more about the `DomSanitizer` abstract class in the official [Angular documentation](https://angular.io/api/platform-browser/DomSanitizer).\n\nExample of a constructor\n         \n         constructor(  \n             private readonly _renderrer: Renderer2,  \n             private readonly _domSanitizer: DomSanitizer  \n         ) {}  \n         \n\nIn this case, it can display an error about the unsafe URL address of the custom icon.\n\n  2. Add the URL of the needed `CDN` or `Base64` custom icon to the `bypassSecurityTrustResourceUrl()` method.\n\n     * Example of the bypassSecurityTrustResourceUrl() method (CDN)\n     * Example of the bypassSecurityTrustResourceUrl() method (Base64)\n    \n    public svgImage: string = this._domSanitizer.bypassSecurityTrustResourceUrl(  \n        'https://www.svgrepo.com/show/303233/icon.svg'  \n    ) as string;  \n    \n    \n    public svgImage: string = this._domSanitizer.bypassSecurityTrustResourceUrl(  \n        'data:image/svg+xml;base64,...'  \n    ) as string;  \n    \n\n  3. Connect the icon.\n\nYou can connect the icon in the following **ways** :\n\n     * via the `<img>` tag\n     * via the `<object>` tag\n\n     * Example that connects an icon (<img> tag)\n     * Example that connects an icon (<cke:object> tag)\n    \n    <img [src]=\"svgImage\" alt=\"svgImage\" />  \n    \n    \n    <object type=\"image/svg+xml\" [data]=\"svgImage\">svg image</object>  \n    \n\n\n\n\nTo use a custom icon in a remote module (`CDN` **or** `Base64` **via the incoming property**):\n\n  1. Add the `DomSanitizer` abstract class to the component constructor.\n\nExample of a constructor\n         \n         constructor(  \n             private readonly _renderrer: Renderer2,  \n             private readonly _domSanitizer: DomSanitizer  \n         ) {}  \n         \n\nIn this case, can display an error about the unsafe URL address of the custom icon.\n\n  2. Flag the field that contains the custom icon using the `CrtInput` decorator.\n\n  3. Add the URL of the needed `CDN` or `Base64` custom icon to the `bypassSecurityTrustResourceUrl()` method in.\n\nExample of the bypassSecurityTrustResourceUrl() method\n         \n         @CrtInput()  \n         @Input()  \n         public set svgImage(value: string){  \n             if (Boolean(value)) {  \n                 this._svgImage = this._domSanitizer.bypassSecurityTrustResourceUrl(  \n                     value  \n                 ) as string;  \n             }  \n         }  \n           \n         public get svgImage(): string {  \n             return this._svgImage;  \n         }  \n         \n\n  4. Connect the icon.\n\nYou can connect the icon in the following **ways** :\n\n     * via the `<img>` tag\n     * via the `<object>` tag\n\n     * Example that connects an icon (<img> tag)\n     * Example that connects an icon (<cke:object> tag)\n    \n    <ng-container *ngIf=\"svgImage\">  \n        <img [src]=\"svgImage\" alt=\"svgImage\" />  \n    </ng-container>  \n    \n    \n    <ng-container *ngIf=\"svgImage\">  \n        <object type=\"image/svg+xml\" [data]=\"svgImage\" >svg image</object>  \n    </ng-container>  \n    \n\n  5. Add the needed configuration object that contains a custom icon to the Freedom UI page schema. Set up the properties via the component attributes using a wrapper.\n\nExample of a configuration object\n         \n         \"type\": \"usr.viewElement\",  \n         \"svgImage\": \"https://www.svgrepo.com/show/303233/icon.svg\"  \n         \n\n\n\n\n## Use a custom image​\n\nYou can connect a custom image to a remote module in the following **ways** :\n\n  * `CDN` or `Base64` directly\n  * `CDN` or `Base64` via the incoming property\n\n\n\nTo use a custom image in a remote module (`CDN` **or** `Base64`):\n\n  1. Add an image to the `imageUrl` attribute.\n\n     * Example of the imageUrl attribute (CDN)\n     * Example of the imageUrl attribute (Base64)\n    \n    export class ImageComponent {  \n        public imageUrl = 'https://upload.wikimedia.org/wikipedia/commoms/thumb/4/47/picture.png'  \n    }  \n    \n    \n    export class ImageComponent {  \n        public imageUrl = 'data:image/png;base64,...'  \n    }  \n    \n\n  2. Connect the image to the `[src]` attribute of the `<img>` tag.\n\nExample of the <img> tag\n         \n         <img [src]=\"imageUrl\" alt=\"image\" />  \n         \n\n\n\n\nTo use a custom image in a remote module (`CDN` **or** `Base64` **via the incoming property**):\n\n  1. Flag the incoming parameter using the `CrtInput` decorator.\n\nExample of an incoming parameter\n         \n         export class ImageComponent {  \n             @CrtInput()  \n             @Input()  \n             public imageUrl!: string;  \n         }  \n         \n\n  2. Set the `imageUrl` property value in the Freedom UI page schema. Creatio lets you set a property value from the page schema and the component wrapper.\n\n     * Example of the imageUrl attribute (CDN)\n     * Example of the imageUrl attribute (Base64)\n    \n    \"values\": {  \n        \"type\": \"usr.viewElement\",  \n        \"imageUrl\": \"https://upload.wikimedia.org/wikipedia/commoms/thumb/4/47/picture.png\"  \n    }  \n    \n    \n    \"values\": {  \n        \"type\": \"usr.viewElement\",  \n        \"imageUrl\": \"data:image/png;base64,...\"  \n    }  \n    \n\nUse the attribute that contains the property name to set the `Base64` image in the wrapper in.\n\nExample that sets an image (the Base64 property)\n    \n    <usr-view-element></usr-view-element>  \n    ...  \n    const viewElement = document.querySelector('usr-view-element');  \n    const base64Image = 'data:image/png;base64,...';  \n    viewElement.setAttribute('image', base64Image)  \n    \n\n\n\n\n## Use a custom background image​\n\nYou can connect a custom background image in a remote module in the following **ways** :\n\n  * `CDN` or `Base64` directly\n  * `CDN` or `Base64` via the incoming property\n\n\n\nTo use a custom background image in a remote module (`CDN` **or** `Base64`):\n\n  1. Find the needed element after the `View` model initialization.\n\n  2. Connect the background image in the remote module.\n\n     * Example that connects image (CDN)\n     * Example that connects image (Base64)\n    \n    public ngAfterViewInit(): void {  \n        this._renderrer.setStyle(  \n            document.querySelector('p'),  \n            'background-image',  \n            'url(https://upload.wikimedia.org/wikipedia/commoms/thumb/4/47/picture.png)'  \n        );  \n    }  \n    \n    \n    public ngAfterViewInit(): void {  \n        this._renderrer.setStyle(  \n            document.querySelector('p'),  \n            'background-image',  \n            'url(data:image/png;base64,...)'  \n        );  \n    }  \n    \n\n\n\n\nTo use a custom background image in a remote module (`CDN` **or** `Base64` **via the incoming property**):\n\n  1. Flag the incoming parameter using the `CrtInput` decorator.\n\n  2. Set the CSS style when receiving the incoming parameter value.\n\nExample that sets a CSS style\n         \n         @CrtInput()  \n         @Input()  \n         public set imageUrl(value) {  \n             if (Boolean(value)) {  \n                 this._renderrer.setStyle(  \n                     document.querySelector('p'),  \n                     'background-image',  \n                     'url(${value})'  \n                 );  \n             }  \n         }  \n         \n\n  3. Specify the background image URL in the Freedom UI page schema.\n\n     * Example of a background image URL (CDN)\n     * Example of a background image URL (Base64)\n    \n    \"type\": \"usr.viewElement\",  \n    \"imageUrl\": \"https://upload.wikimedia.org/wikipedia/commoms/thumb/4/47/picture.png\"  \n    \n    \n    \"type\": \"usr.viewElement\",  \n    \"imageUrl\": \"data:image/png;base64,...\"  \n    \n\n\n\n\n* * *\n\n## Resources​\n\n[DomSanitizer abstract class](https://angular.io/api/platform-browser/DomSanitizer) (official Angular documentation)\n\n  * Use a custom font\n  * Use a custom icon\n  * Use a custom image\n  * Use a custom background image\n  * Resources\n\n\n",
  "analysis": {
    "word_count": 1725,
    "key_concepts": ["page schema", "configuration", "freedom ui", "detail", "case"],
    "use_cases": [
      "building applications",
      "custom development",
      "API integration",
      "system administration",
      "user management"
    ],
    "related_topics": ["customization", "layout", "ui design", "page schema"],
    "difficulty": "intermediate",
    "ai_tags": [
      "case",
      "creatio",
      "intermediate",
      "freedom ui",
      "documentation",
      "detail",
      "page schema",
      "configuration"
    ]
  },
  "ai_optimized": true,
  "processed_at": "2025-07-28T13:23:32.560211"
}
