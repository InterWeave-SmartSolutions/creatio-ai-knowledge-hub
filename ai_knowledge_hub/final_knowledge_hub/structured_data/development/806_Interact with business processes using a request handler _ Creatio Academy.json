{
  "id": 806,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/8.2/platform-customization/freedom-ui/business-processes",
  "title": "Interact with business processes using a request handler | Creatio Academy",
  "category": "development",
  "description": "This functionality is available for Creatio 8.2.3 and later.",
  "content": "This is documentation for Creatio 8.2 . For up-to-date documentation, see the latest version ( 8.3 ). Version: 8.2 On this page Level: advanced note This functionality is available for Creatio 8.2.3 and later. Since version 8.2.3, @creatio-devkit/common includes the ProcessEngineService service that lets you interact with business processes. This ensures context transfer, enabling stable and predictable business logic execution as part of automation and development. Learn more: Service that runs business processes . Run a business process ​ note Creatio forbids running the business process that has output parameters in the background. To run a business process: Add a button to run a business process from a Freedom UI page if needed. Instructions: Set up Button components (user documentation). Add the dependencies . Instructions: Display the value of a system variable (similarly to step 2). Instead of the SysValuesService service, use the ProcessEngineService service that lets you interact with business processes. Set up how to handle the action executed on button click. Instructions: Optimize the execution of a custom business logic (step 4). Implement the custom request handler . Go to the handlers schema section. Implement the usr.SomeCustomRequest custom request handler. Create an instance of the business process service from @creatio-devkit/common . Implement the executeProcessByName() method that runs the business process. Pass the following method parameters: Name (the Code property value) of the business process to run. Pass as a string. Key-value collection of input business process parameters where key is the parameter code (the Code property value) and the value is the parameter value. Collection of output business process parameters. Pass as an array. Retrieve the ID of the business process to run and specify it in the ProcessId attribute. Retrieve output parameters of the business process to run using the resultParameterValues property and specify them in the attributes if needed. View an example of a usr.SomeCustomRequest request handler that runs the business process whose Code property value is SomeBusinessProcess below. The business process uses the SomeInputParameter parameter whose value is \"SomeInputParameterValue.\" handlers schema section handlers : /**SCHEMA_HANDLERS*/ [ { request : \"usr.SomeCustomRequest\" , /* The implementation of the custom request handler. */ handler : async ( request , next ) => { /* Create an instance of the business process service from \"@creatio-devkit/common.\" */ const service = new sdk . ProcessEngineService ( ) ; /* Implement the \"executeProcessByName()\" method that runs the business process. */ const result = await service . executeProcessByName ( /* Name (the \"Code\" property value) of the business process to run. */ \"SomeBusinessProcessCode\" , /* Key-value collection of input business process parameters where key is the parameter code (the \"Code\" property value) and the value is the parameter value. */ { \"SomeInputParameter1\" : SomeInputParameter1Value , \"SomeInputParameter2\" : SomeInputParameter2Value } , /* Collection of output business process parameters. */ [ \"SomeOutputParameter1\" , \"SomeOutputParameter2\" ] , ) ; /* Retrieve the ID of the business process to run and specify it in the \"ProcessId\" attribute. */ request . $context [ 'ProcessId' ] = result . processId ; /* Retrieve collection of business process output parameters using the \"resultParameterValues\" property and specify them in the attributes if needed. */ const resultParameters = result . resultParameterValues ; request . $context [ 'SomeAttribute1' ] = resultParameters . SomeOutputParameter1 ; request . $context [ 'SomeAttribute2' ] = resultParameters . SomeOutputParameter2 ; /* Call the next handler if it exists and return its result. */ return next ?. handle ( request ) ; } , } , ] Complete a business process element ​ Set up the page UI if needed. Instructions: Element setup examples (user documentation). Add the dependencies . Instructions: Display the value of a system variable (similarly to step 2). Instead of the SysValuesService service, use the ProcessEngineService service that lets you interact with business processes. Implement the custom request handler . Go to the handlers schema section. Implement the usr.SomeCustomRequest custom request handler. Retrieve the ID of the business process to run. Retrieve the ID of the business process element using process ID and caption of the Freedom UI page. Create an instance of the business process service from @creatio-devkit/common . Implement the completeExecuting() method that completes a business process element using element ID. Pass a list of additional method parameters if needed. View an example of a usr.SomeCustomRequest request handler that completes a business process element whose Code property value is SomeBusinessProcessElement below. handlers schema section handlers : /**SCHEMA_HANDLERS*/ [ { request : \"usr.SomeCustomRequest\" , /* The implementation of the custom request handler. */ handler : async ( request , next ) => { /* Retrieve the ID of the business process to run. */ const processId = await request . $context [ \"ProcessId\" ] ; /* Retrieve the ID of the business process element using process ID and caption of the Freedom UI page. */ const sysProcessElementLogModel = await sdk . Model . create ( \"SysProcessElementLog\" ) ; const filters = new sdk . FilterGroup ( ) ; await filters . addSchemaColumnFilterWithParameter ( sdk . ComparisonType . Equal , \"SysProcess\" , processId ) ; await filters . addSchemaColumnFilterWithParameter ( sdk . ComparisonType . Equal , \"Caption\" , \"Show page\" ) ; const sysProcessElementLog = await sysProcessElementLogModel . load ( { attributes : [ \"Id\" ] , parameters : [ { type : sdk . ModelParameterType . Filter , value : filters } ] } ) ; const processElementId = sysProcessElementLog [ 0 ] [ \"Id\" ] ; /* Create an instance of the business process service from \"@creatio-devkit/common.\" */ const service = new sdk . ProcessEngineService ( ) ; /* Implement the \"completeExecuting()\" method that completes a business process element using element ID. */ await service . completeExecuting ( /* Element ID. */ processElementId , /* List of additional method parameters. For example, code of clicked button for \"Auto-generated page\" element. */ { \"PressedButtonCode\" : \"SomeButtonCode\" } ) ; /* Call the next handler if it exists and return its result. */ return next ?. handle ( request ) ; } , } , ] See also ​ Service that runs business processes Display the value of a system variable Element setup examples (user documentation) Run a business process Complete a business process element See also",
  "markdown": "This is documentation for Creatio **8.2**.\n\nFor up-to-date documentation, see the **[latest version](/docs/8.x/dev/development-on-creatio-platform/platform-customization/freedom-ui/business-processes)** (8.3).\n\nVersion: 8.2\n\nOn this page\n\nLevel: advanced\n\nnote\n\nThis functionality is available for Creatio 8.2.3 and later.\n\nSince version 8.2.3, `@creatio-devkit/common` includes the `ProcessEngineService` service that lets you interact with business processes. This ensures context transfer, enabling stable and predictable business logic execution as part of automation and development. Learn more: [Service that runs business processes](https://academy.creatio.com/documents?ver=8.2&id=15441).\n\n## Run a business process​\n\nnote\n\nCreatio forbids running the business process that has output parameters in the background.\n\nTo run a business process:\n\n  1. **Add a button** to run a business process from a Freedom UI page if needed. Instructions: [Set up Button components](https://academy.creatio.com/documents?ver=8.2&id=2401) (user documentation).\n\n  2. **Add the dependencies**. Instructions: [Display the value of a system variable](https://academy.creatio.com/documents?ver=8.2&id=15380&anchor=amd-dependencies) (similarly to step 2). Instead of the `SysValuesService` service, use the `ProcessEngineService` service that lets you interact with business processes.\n\n  3. **Set up how to handle the action** executed on button click. Instructions: [Optimize the execution of a custom business logic](https://academy.creatio.com/documents?ver=8.2&id=15095&anchor=action-executed-on-button-click) (step 4).\n\n  4. **Implement the custom request handler**.\n\n     1. Go to the `handlers` schema section.\n\n     2. Implement the `usr.SomeCustomRequest` custom request handler.\n\n        1. Create an instance of the business process service from `@creatio-devkit/common`.\n\n        2. Implement the `executeProcessByName()` method that runs the business process.\n\n        3. Pass the following method parameters:\n\n           * Name (the `Code` property value) of the business process to run. Pass as a string.\n           * Key-value collection of input business process parameters where key is the parameter code (the `Code` property value) and the value is the parameter value.\n           * Collection of output business process parameters. Pass as an array.\n        4. Retrieve the ID of the business process to run and specify it in the `ProcessId` attribute.\n\n        5. Retrieve output parameters of the business process to run using the `resultParameterValues` property and specify them in the attributes if needed.\n\nView an example of a `usr.SomeCustomRequest` request handler that runs the business process whose `Code` property value is `SomeBusinessProcess` below. The business process uses the `SomeInputParameter` parameter whose value is \"SomeInputParameterValue.\"\n\nhandlers schema section\n    \n    handlers: /**SCHEMA_HANDLERS*/[  \n        {  \n            request: \"usr.SomeCustomRequest\",  \n            /* The implementation of the custom request handler. */  \n            handler: async (request, next) => {  \n                /* Create an instance of the business process service from \"@creatio-devkit/common.\" */  \n                const service = new sdk.ProcessEngineService();  \n                /* Implement the \"executeProcessByName()\" method that runs the business process. */  \n                const result = await service.executeProcessByName(  \n                    /* Name (the \"Code\" property value) of the business process to run. */  \n                    \"SomeBusinessProcessCode\",  \n                    /* Key-value collection of input business process parameters where key is the parameter code (the \"Code\" property value) and the value is the parameter value. */  \n                    {  \n                        \"SomeInputParameter1\": SomeInputParameter1Value,  \n                        \"SomeInputParameter2\": SomeInputParameter2Value  \n                    },  \n                    /* Collection of output business process parameters. */  \n                    [  \n                        \"SomeOutputParameter1\",  \n                        \"SomeOutputParameter2\"  \n                    ],  \n                );  \n                /* Retrieve the ID of the business process to run and specify it in the \"ProcessId\" attribute. */  \n                request.$context['ProcessId'] = result.processId;  \n      \n                /* Retrieve collection of business process output parameters using the \"resultParameterValues\" property and specify them in the attributes if needed. */  \n                const resultParameters = result.resultParameterValues;  \n                request.$context['SomeAttribute1'] = resultParameters.SomeOutputParameter1;  \n                request.$context['SomeAttribute2'] = resultParameters.SomeOutputParameter2;  \n      \n                /* Call the next handler if it exists and return its result. */  \n                return next?.handle(request);  \n            },  \n        },  \n    ]  \n    \n\n\n\n\n## Complete a business process element​\n\n  1. **Set up the page UI** if needed. Instructions: [Element setup examples](https://academy.creatio.com/docs/8.x/no-code-customization/category/element-setup-examples) (user documentation).\n\n  2. **Add the dependencies**. Instructions: [Display the value of a system variable](https://academy.creatio.com/documents?ver=8.2&id=15380&anchor=amd-dependencies) (similarly to step 2). Instead of the `SysValuesService` service, use the `ProcessEngineService` service that lets you interact with business processes.\n\n  3. **Implement the custom request handler**.\n\n     1. Go to the `handlers` schema section.\n\n     2. Implement the `usr.SomeCustomRequest` custom request handler.\n\n        1. Retrieve the ID of the business process to run.\n        2. Retrieve the ID of the business process element using process ID and caption of the Freedom UI page.\n        3. Create an instance of the business process service from `@creatio-devkit/common`.\n        4. Implement the `completeExecuting()` method that completes a business process element using element ID.\n        5. Pass a list of additional method parameters if needed.\n\nView an example of a `usr.SomeCustomRequest` request handler that completes a business process element whose `Code` property value is `SomeBusinessProcessElement` below.\n\nhandlers schema section\n    \n    handlers: /**SCHEMA_HANDLERS*/[  \n        {  \n            request: \"usr.SomeCustomRequest\",  \n            /* The implementation of the custom request handler. */  \n            handler: async (request, next) => {  \n                /* Retrieve the ID of the business process to run. */  \n                const processId = await request.$context[\"ProcessId\"];  \n                /* Retrieve the ID of the business process element using process ID and caption of the Freedom UI page. */  \n                const sysProcessElementLogModel = await sdk.Model.create(\"SysProcessElementLog\");  \n                const filters = new sdk.FilterGroup();  \n                await filters.addSchemaColumnFilterWithParameter(sdk.ComparisonType.Equal, \"SysProcess\", processId);  \n                await filters.addSchemaColumnFilterWithParameter(sdk.ComparisonType.Equal, \"Caption\", \"Show page\");  \n                const sysProcessElementLog = await sysProcessElementLogModel.load({  \n                    attributes: [\"Id\"],  \n                    parameters: [{  \n                        type: sdk.ModelParameterType.Filter,  \n                        value: filters  \n                    }]  \n                });  \n                const processElementId = sysProcessElementLog[0][\"Id\"];  \n                /* Create an instance of the business process service from \"@creatio-devkit/common.\" */  \n                const service = new sdk.ProcessEngineService();  \n                /* Implement the \"completeExecuting()\" method that completes a business process element using element ID. */  \n                await service.completeExecuting(  \n                    /* Element ID. */  \n                    processElementId,  \n                    /* List of additional method parameters. For example, code of clicked button for \"Auto-generated page\" element. */  \n                    {  \n                        \"PressedButtonCode\": \"SomeButtonCode\"  \n                    }  \n                );  \n                /* Call the next handler if it exists and return its result. */  \n                return next?.handle(request);  \n            },  \n        },  \n    ]  \n    \n\n\n\n\n* * *\n\n## See also​\n\n[Service that runs business processes](https://academy.creatio.com/documents?ver=8.2&id=15441)\n\n[Display the value of a system variable](https://academy.creatio.com/documents?ver=8.2&id=15380)\n\n[Element setup examples](https://academy.creatio.com/docs/8.x/no-code-customization/category/element-setup-examples) (user documentation)\n\n  * Run a business process\n  * Complete a business process element\n  * See also\n\n\n",
  "analysis": {
    "word_count": 1032,
    "key_concepts": ["business process", "freedom ui", "section", "automation"],
    "use_cases": [
      "building applications",
      "custom development",
      "API integration",
      "system administration",
      "user management"
    ],
    "related_topics": [
      "workflow",
      "bpm",
      "automation",
      "process design",
      "customization",
      "layout",
      "page schema",
      "ui design"
    ],
    "difficulty": "intermediate",
    "ai_tags": ["creatio", "intermediate", "freedom ui", "documentation", "section", "automation", "business process"]
  },
  "ai_optimized": true,
  "processed_at": "2025-07-28T13:30:46.322901"
}
