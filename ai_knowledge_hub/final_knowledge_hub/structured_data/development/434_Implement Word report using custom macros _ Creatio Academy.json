{
  "id": 434,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/8.0/platform-customization/classic-ui/ms-word/examples/create-ms-word-report-custom-macros",
  "title": "Implement Word report using custom macros | Creatio Academy",
  "category": "development",
  "description": "To implement the example:",
  "content": "This is documentation for Creatio 8.0 . For up-to-date documentation, see the latest version ( 8.3 ). Version: 8.0 On this page Level: advanced To implement the example: Implement custom macros. Read more >>> Create a report. Read more >>> Set up the report columns. Read more >>> Set up the report template. Read more >>> Upload the file of report template to Creatio. Read more >>> Set up how to display the report. Read more >>> Example Generate the custom \"Account summary\" Word report from the account page. The report must include the following account fields: Name . Type . Primary contact . Additional information . Display the annual revenue for \"Customer\" account type. Display the number of employees for \"Partner\" account type. Display an empty string for other account types. Date of report generation . Employee who generated the report . Report for Customer account type Report for Partner account type Report for other account type 1. Implement custom macros ​ For this example, implement the following custom macros: Macro that receives additional information about the account depending on the account type. Macro that receives date of report generation. Macro that receives the name of the employee who generated the report. Additional account information ​ Open the Customer 360 app in the No-Code Designer. Open the Advanced settings tab in the No-Code Designer. To do this, click in the top right → \"Application management\" → \"Application Hub\" → Customer 360 app → \"Advanced settings.\" Create a user-made package to add the schema. To do this, click → Create new package → fill out the package properties → Save . For this example, create the sdkMsWordReportCustomMacros user-made package. Add the package properties . Open the package properties. To do this, click → Properties . This opens the Dependencies tab on the Package properties page. Click Add in the Depends on Packages block. This opens the Select package window. Select the checkbox for the CrtNUI package. The CrtNUI package includes the ExpressionConverterHelper schema that implements the basic IExpressionConverter interface. Click Select . Apply the changes. Change the current package . Instructions: Change the current package . For this example, change the current package to sdkMsWordReportCustomMacros user-made package. Create the source code schema . To do this, click Add → Source code . Fill out the schema properties . For this example, use the following schema properties. Property Property value Code UsrAccountInfoByAccountType Title AccountInfoByAccountType Apply the changes . Add localizable strings . For this example, add the following localizable strings: Localizable string that stores the text to be displayed in the report for the \"Customer\" account type. Localizable string that stores the text to be displayed in the report for the \"Partner\" account type. To do this: Create a localizable string. To do this, go the Localizable strings additional property node and click . Fill out the localizable string properties. Element Property Property value Localizable string that stores the text to be displayed in the report for the \"Customer\" account type Code CustomerAccountType Value Annual turnover {0} Localizable string that stores the text to be displayed in the report for the \"Partner\" account type. Code PartnerAccountType Value Number of employees {0} persons Save the changes. Implement the business logic of receiving additional account information depending on the account type. UsrAccountInfoByAccountType namespace Terrasoft . Configuration { using System ; using System . CodeDom . Compiler ; using System . Collections . Generic ; using System . Data ; using System . Linq ; using System . Runtime . Serialization ; using System . ServiceModel ; using System . ServiceModel . Web ; using System . ServiceModel . Activation ; using System . Text ; using System . Text . RegularExpressions ; using System . Web ; using Terrasoft . Common ; using Terrasoft . Core ; using Terrasoft . Core . DB ; using Terrasoft . Core . Entities ; using Terrasoft . Core . Packages ; using Terrasoft . Core . Factories ; /* Attribute that stores the macro name. */ [ ExpressionConverterAttribute ( \"AccountInfoByAccountType\" ) ] /* Class that implements the \"IExpressionConverter\" interface. */ class UsrAccountInfoByAccountType : IExpressionConverter { private UserConnection _userConnection ; private string _customerAdditional ; private string _partnerAdditional ; /* Call localizable string values. */ private void SetResources ( ) { string sourceCodeName = \"UsrAccountInfoByAccountType\" ; _customerAdditional = new LocalizableString ( _userConnection . ResourceStorage , sourceCodeName , \"LocalizableStrings.CustomerAccountType.Value\" ) ; _partnerAdditional = new LocalizableString ( _userConnection . ResourceStorage , sourceCodeName , \"LocalizableStrings.PartnerAccountType.Value\" ) ; } /* Implement the \"Evaluate()\" method of the \"IExpressionConverter\" interface. */ public string Evaluate ( object value , string arguments = \"\" ) { try { _userConnection = ( UserConnection ) HttpContext . Current . Session [ \"UserConnection\" ] ; Guid accountId = new Guid ( value . ToString ( ) ) ; return getAccountInfo ( accountId ) ; } catch ( Exception err ) { return err . Message ; } } /* Receive additional information based on the account type ID. */ private string getAccountInfo ( Guid accountId ) { SetResources ( ) ; try { /* Create an \"EntitySchemaQuery\" instance that has the \"Account\" root schema. */ EntitySchemaQuery esq = new EntitySchemaQuery ( _userConnection . EntitySchemaManager , \"Account\" ) ; /* Add columns to the query. */ var columnType = esq . AddColumn ( \"Type.Name\" ) . Name ; var columnNumber = esq . AddColumn ( \"EmployeesNumber.Name\" ) . Name ; var columnRevenue = esq . AddColumn ( \"AnnualRevenue.Name\" ) . Name ; /* Filter records by the account ID. */ var accountFilter = esq . CreateFilterWithParameters ( FilterComparisonType . Equal , \"Id\" , accountId ) ; esq . Filters . Add ( accountFilter ) ; /* Retrieve an entity collection. */ EntityCollection entities = esq . GetEntityCollection ( _userConnection ) ; /* If the collection includes entities, the method returns data depending on the account type. */ if ( entities . Count > 0 ) { Entity entity = entities [ 0 ] ; var type = entity . GetTypedColumnValue < string > ( columnType ) ; switch ( type ) { case \"Customer\" : return String . Format ( _customerAdditional , entity . GetTypedColumnValue < string > ( columnRevenue ) ) ; case \"Partner\" : return String . Format ( _partnerAdditional , entity . GetTypedColumnValue < string > ( columnNumber ) ) ; default : return String . Empty ; } } return String . Empty ; } catch ( Exception err ) { throw err ; } } } } Publish the schema . Date of report generation ​ Select a user-made package to add the schema. For this example, select the sdkMsWordReportCustomMacros user-made package. Create the source code schema . To do this, click Add → Source code . Fill out the schema properties . For this example, use the following schema properties. Property Property value Code UsrCurrentDate Title CurrentDate Apply the changes . Implement the business logic of receiving date of report generation. UsrCurrentDate namespace Terrasoft . Configuration { using System ; using System . CodeDom . Compiler ; using System . Collections . Generic ; using System . Data ; using System . Linq ; using System . Runtime . Serialization ; using System . ServiceModel ; using System . ServiceModel . Web ; using System . ServiceModel . Activation ; using System . Text ; using System . Text . RegularExpressions ; using System . Web ; using Terrasoft . Common ; using Terrasoft . Core ; using Terrasoft . Core . DB ; using Terrasoft . Core . Entities ; using Terrasoft . Core . Packages ; using Terrasoft . Core . Factories ; /* Attribute that stores the macro name. */ [ ExpressionConverterAttribute ( \"CurrentDate\" ) ] /* Class that implements the \"IExpressionConverter\" interface. */ class UsrCurrentDate : IExpressionConverter { private UserConnection _userConnection ; /* Implement the \"Evaluate()\" method of the \"IExpressionConverter\" interface. */ public string Evaluate ( object value , string arguments = \"\" ) { try { _userConnection = ( UserConnection ) HttpContext . Current . Session [ \"UserConnection\" ] ; /* Return current date. */ return _userConnection . CurrentUser . GetCurrentDateTime ( ) . Date . ToString ( \"dd MMM yyyy\" ) ; } catch ( Exception err ) { return err . Message ; } } } } Publish the schema . Employee who generated the report ​ Select a user-made package to add the schema. For this example, select the sdkMsWordReportCustomMacros user-made package. Create the source code schema . To do this, click Add → Source code . Fill out the schema properties . For this example, use the following schema properties. Property Property value Code UsrCurrentUser Title CurrentUser Apply the changes . Implement the business logic of receiving the name of the employee who generated the report. UsrCurrentUser namespace Terrasoft . Configuration { using System ; using System . CodeDom . Compiler ; using System . Collections . Generic ; using System . Data ; using System . Linq ; using System . Runtime . Serialization ; using System . ServiceModel ; using System . ServiceModel . Web ; using System . ServiceModel . Activation ; using System . Text ; using System . Text . RegularExpressions ; using System . Web ; using Terrasoft . Common ; using Terrasoft . Core ; using Terrasoft . Core . DB ; using Terrasoft . Core . Entities ; using Terrasoft . Core . Packages ; using Terrasoft . Core . Factories ; /* Attribute that stores the macro name. */ [ ExpressionConverterAttribute ( \"CurrentUser\" ) ] /* Class that implements the \"IExpressionConverter\" interface. */ class UsrCurrentUser : IExpressionConverter { private UserConnection _userConnection ; /* Implement the \"Evaluate()\" method of the \"IExpressionConverter\" interface. */ public string Evaluate ( object value , string arguments = \"\" ) { try { _userConnection = ( UserConnection ) HttpContext . Current . Session [ \"UserConnection\" ] ; /* Return the contact of current user. */ return _userConnection . CurrentUser . ContactName ; } catch ( Exception err ) { return err . Message ; } } } } Publish the schema . 2. Create a report ​ Open the Report setup section . To do this, click in the top right → System setup → Report setup . Click New report . Fill out the report properties . Property Property value Report name Account summary Object Account Show in the list view Clear the checkbox Show in the record page Select the checkbox Apply the changes . As a result , Creatio will add the \"Account summary\" report to the Report setup section. 3. Set up the report columns ​ Add the report columns . Go to the Set up report data block. Add the column of account name. To do this, click → open the Column field → select Id → click Select . The Id column is an input parameter for a custom macro. Add the Id , Name , Type , Primary contact and Id columns similarly. As a result, the \"Account summary\" report data will be as follows. Add the macro tag to the column. For this example, add the macro tags to the different Id columns. To do this: Open the setting page of the Id column. To do this, go to the Set up report data block and double-click the column or click in the column row. Go to the Title property. Add the [#CurrentDate#] macro tag to the Name column. The [#CurrentDate#] macro receives date of report generation. Add the [#CurrentUser#] and [#AccountInfoByAccountType#] macro tags to the different Id columns similarly. The [#CurrentUser#] macro receives the name of the employee who generated the report. The [#AccountInfoByAccountType#] macro receives additional information of the account depending on the account type. Save the changes. Apply the changes . As a result , the \"Account summary\" report data will be as follows. 4. Set up the report template ​ Install the Creatio plug-in for MS Word . Instructions: Install Creatio plug-in for MS Word (user documentation). This is a one-time procedure. Run the MS Word app . Connect to the Creatio instance that includes the created report. Open the Creatio tab. Click Connect . This opens the Login window. Enter the Creatio user credentials. Click . This opens the Available Servers window. Click New . This opens the Server Connection Setup window. Fill out the server properties. Property Property value Name An arbitrary server name. For example, \"Creatio.\" Link URL of the Creatio instance that includes the created report. For example, https://mycreatio.com/ . Click OK . This closes the Server Connection Setup window. Click OK . This closes the Available Servers window and adds the server name to the Server field of the Login window. Click OK . This closes the Login window and connects to the Creatio instance. Select the report to set up the template. Open the Creatio tab. Click Select report . This opens the Creatio Word reports window. Select \"Account summary\" report. Click OK . This closes the Creatio Word reports window and opens the Word report data panel that includes the \"Account summary\" report data set up in the Creatio instance. Set up the template layout based on your business goals. As a result , the template of the \"Account summary\" report will look as follows. 5. Upload the file of report template to Creatio ​ Open the Creatio tab . Click Save to Creatio . As a result , the template file of the \"Account summary\" report will be uploaded to the report page in Creatio. 6. Set up how to display the report ​ Add the report to the account page. To do this: Open the Accounts form page . To do this, click in the top right → Application management → Application Hub → Customer 360 → Accounts form page . Add a button that opens the \"Account summary\" report. Add a Button type component to the toolbar of the Freedom UI Designer. Click and fill out the button properties. Element Property Property value Button that opens the \"Account summary\" report Title Print report Action Print report Print settings Print report for the current record Save the changes . As a result , Creatio will add the Print report button that lets you open the \"Account summary\" report from the account page. View the result ​ Open the Accounts section . Open the page of an arbitrary account . Generate the report . To do this, click Print report → Account summary . Save the report file to your device. Open the report file . As a result , Creatio will generate the \"Account summary\" report from the account page. The Additional information field value differs for different account types: For the \"Customer\" account type, the field will include the annual revenue. View the result >>> For the \"Partner\" account type, the field will include the number of employees. View the result >>> For other account types, the field will include empty string. View the result >>> Source code ​ UsrAccountInfoByAccountType UsrCurrentDate UsrCurrentUser namespace Terrasoft . Configuration { using System ; using System . CodeDom . Compiler ; using System . Collections . Generic ; using System . Data ; using System . Linq ; using System . Runtime . Serialization ; using System . ServiceModel ; using System . ServiceModel . Web ; using System . ServiceModel . Activation ; using System . Text ; using System . Text . RegularExpressions ; using System . Web ; using Terrasoft . Common ; using Terrasoft . Core ; using Terrasoft . Core . DB ; using Terrasoft . Core . Entities ; using Terrasoft . Core . Packages ; using Terrasoft . Core . Factories ; /* Attribute that stores the macro name. */ [ ExpressionConverterAttribute ( \"AccountInfoByAccountType\" ) ] /* Class that implements the \"IExpressionConverter\" interface. */ class UsrAccountInfoByAccountType : IExpressionConverter { private UserConnection _userConnection ; private string _customerAdditional ; private string _partnerAdditional ; /* Call localizable string values. */ private void SetResources ( ) { string sourceCodeName = \"UsrAccountInfoByAccountType\" ; _customerAdditional = new LocalizableString ( _userConnection . ResourceStorage , sourceCodeName , \"LocalizableStrings.CustomerAccountType.Value\" ) ; _partnerAdditional = new LocalizableString ( _userConnection . ResourceStorage , sourceCodeName , \"LocalizableStrings.PartnerAccountType.Value\" ) ; } /* Implement the \"Evaluate()\" method of the \"IExpressionConverter\" interface. */ public string Evaluate ( object value , string arguments = \"\" ) { try { _userConnection = ( UserConnection ) HttpContext . Current . Session [ \"UserConnection\" ] ; Guid accountId = new Guid ( value . ToString ( ) ) ; return getAccountInfo ( accountId ) ; } catch ( Exception err ) { return err . Message ; } } /* Receive additional information based on the account type ID. */ private string getAccountInfo ( Guid accountId ) { SetResources ( ) ; try { /* Create an \"EntitySchemaQuery\" instance that has the \"Account\" root schema. */ EntitySchemaQuery esq = new EntitySchemaQuery ( _userConnection . EntitySchemaManager , \"Account\" ) ; /* Add columns to the query. */ var columnType = esq . AddColumn ( \"Type.Name\" ) . Name ; var columnNumber = esq . AddColumn ( \"EmployeesNumber.Name\" ) . Name ; var columnRevenue = esq . AddColumn ( \"AnnualRevenue.Name\" ) . Name ; /* Filter records by the account ID. */ var accountFilter = esq . CreateFilterWithParameters ( FilterComparisonType . Equal , \"Id\" , accountId ) ; esq . Filters . Add ( accountFilter ) ; /* Retrieve an entity collection. */ EntityCollection entities = esq . GetEntityCollection ( _userConnection ) ; /* If the collection includes entities, the method returns data depending on the account type. */ if ( entities . Count > 0 ) { Entity entity = entities [ 0 ] ; var type = entity . GetTypedColumnValue < string > ( columnType ) ; switch ( type ) { case \"Customer\" : return String . Format ( _customerAdditional , entity . GetTypedColumnValue < string > ( columnRevenue ) ) ; case \"Partner\" : return String . Format ( _partnerAdditional , entity . GetTypedColumnValue < string > ( columnNumber ) ) ; default : return String . Empty ; } } return String . Empty ; } catch ( Exception err ) { throw err ; } } } } namespace Terrasoft . Configuration { using System ; using System . CodeDom . Compiler ; using System . Collections . Generic ; using System . Data ; using System . Linq ; using System . Runtime . Serialization ; using System . ServiceModel ; using System . ServiceModel . Web ; using System . ServiceModel . Activation ; using System . Text ; using System . Text . RegularExpressions ; using System . Web ; using Terrasoft . Common ; using Terrasoft . Core ; using Terrasoft . Core . DB ; using Terrasoft . Core . Entities ; using Terrasoft . Core . Packages ; using Terrasoft . Core . Factories ; /* Attribute that stores the macro name. */ [ ExpressionConverterAttribute ( \"CurrentDate\" ) ] /* Class that implements the \"IExpressionConverter\" interface. */ class UsrCurrentDate : IExpressionConverter { private UserConnection _userConnection ; /* Implement the \"Evaluate()\" method of the \"IExpressionConverter\" interface. */ public string Evaluate ( object value , string arguments = \"\" ) { try { _userConnection = ( UserConnection ) HttpContext . Current . Session [ \"UserConnection\" ] ; /* Return current date. */ return _userConnection . CurrentUser . GetCurrentDateTime ( ) . Date . ToString ( \"dd MMM yyyy\" ) ; } catch ( Exception err ) { return err . Message ; } } } } namespace Terrasoft . Configuration { using System ; using System . CodeDom . Compiler ; using System . Collections . Generic ; using System . Data ; using System . Linq ; using System . Runtime . Serialization ; using System . ServiceModel ; using System . ServiceModel . Web ; using System . ServiceModel . Activation ; using System . Text ; using System . Text . RegularExpressions ; using System . Web ; using Terrasoft . Common ; using Terrasoft . Core ; using Terrasoft . Core . DB ; using Terrasoft . Core . Entities ; using Terrasoft . Core . Packages ; using Terrasoft . Core . Factories ; /* Attribute that stores the macro name. */ [ ExpressionConverterAttribute ( \"CurrentUser\" ) ] /* Class that implements the \"IExpressionConverter\" interface. */ class UsrCurrentUser : IExpressionConverter { private UserConnection _userConnection ; /* Implement the \"Evaluate()\" method of the \"IExpressionConverter\" interface. */ public string Evaluate ( object value , string arguments = \"\" ) { try { _userConnection = ( UserConnection ) HttpContext . Current . Session [ \"UserConnection\" ] ; /* Return the contact of current user. */ return _userConnection . CurrentUser . ContactName ; } catch ( Exception err ) { return err . Message ; } } } } Resources ​ Package with example implementation 1. Implement custom macros Additional account information Date of report generation Employee who generated the report 2. Create a report 3. Set up the report columns 4. Set up the report template 5. Upload the file of report template to Creatio 6. Set up how to display the report View the result Source code Resources",
  "markdown": "This is documentation for Creatio **8.0**.\n\nFor up-to-date documentation, see the **[latest version](/docs/8.x/dev/development-on-creatio-platform/getting-started/development-recommendations)** (8.3).\n\nVersion: 8.0\n\nOn this page\n\nLevel: advanced\n\nTo implement the example:\n\n  1. Implement custom macros. Read more >>>\n  2. Create a report. Read more >>>\n  3. Set up the report columns. Read more >>>\n  4. Set up the report template. Read more >>>\n  5. Upload the file of report template to Creatio. Read more >>>\n  6. Set up how to display the report. Read more >>>\n\n\n\nExample\n\nGenerate the custom \"Account summary\" Word report from the account page. The report must include the following account fields:\n\n  * **Name**.\n\n  * **Type**.\n\n  * **Primary contact**.\n\n  * **Additional information**.\n\n    * Display the annual revenue for \"Customer\" account type.\n    * Display the number of employees for \"Partner\" account type.\n    * Display an empty string for other account types.\n  * **Date of report generation**.\n\n  * **Employee who generated the report**.\n\n\nReport for Customer account type\n\n![Report for Customer account type](https://d3a7ykdi65m4cy.cloudfront.net/ac-en/s3fs-public/documentation/sdk/en/BPMonlineWebSDK/Screenshots/CustomMacros/8.1/scr_result_for_Customer.png)\n\nReport for Partner account type\n\n![Report for Partner account type](https://d3a7ykdi65m4cy.cloudfront.net/ac-en/s3fs-public/documentation/sdk/en/BPMonlineWebSDK/Screenshots/CustomMacros/8.1/scr_result_for_Partner.png)\n\nReport for other account type\n\n![Report for other account type](https://d3a7ykdi65m4cy.cloudfront.net/ac-en/s3fs-public/documentation/sdk/en/BPMonlineWebSDK/Screenshots/CustomMacros/8.1/scr_result_for_other_account_type.png)\n\n## 1\\. Implement custom macros​\n\nFor this example, implement the following custom macros:\n\n  * Macro that receives additional information about the account depending on the account type.\n  * Macro that receives date of report generation.\n  * Macro that receives the name of the employee who generated the report.\n\n\n\n### Additional account information​\n\n  1. **Open the Customer 360 app** in the No-Code Designer.\n\n  2. **Open the Advanced settings tab** in the No-Code Designer. To do this, click ![](https://academy.creatio.com/docs/sites/en/files/images/NoCodePlatform/Manage_Apps/btn_system_designer_8_shell.png) in the top right → \"Application management\" → \"Application Hub\" → **Customer 360** app → \"Advanced settings.\"\n\n  3. **Create a user-made package** to add the schema. To do this, click ![](https://d3a7ykdi65m4cy.cloudfront.net/ac-en/s3fs-public/documentation/sdk/en/BPMonlineWebSDK/Screenshots/CreateConfigurationWebService/8.1/btn_create_a_package.png) → **Create new package** → fill out the package properties → **Save**.\n\nFor this example, create the `sdkMsWordReportCustomMacros` user-made package.\n\n  4. **Add the package properties**.\n\n     1. Open the package properties. To do this, click ![](https://d3a7ykdi65m4cy.cloudfront.net/ac-en/s3fs-public/documentation/sdk/en/BPMonlineWebSDK/Screenshots/PopulateDeliveryType/8.1/scr_open_properties.png) → **Properties**. This opens the **Dependencies** tab on the **Package properties** page.\n     2. Click **Add** in the **Depends on Packages** block. This opens the **Select package** window.\n     3. Select the checkbox for the `CrtNUI` package. The `CrtNUI` package includes the `ExpressionConverterHelper` schema that implements the basic `IExpressionConverter` interface.\n     4. Click **Select**.\n     5. Apply the changes.\n  5. **Change the current package**. Instructions: [Change the current package](https://academy.creatio.com/documents?ver=8.0&id=15072&anchor=change-the-current-package).\n\nFor this example, change the current package to `sdkMsWordReportCustomMacros` user-made package.\n\n  6. **Create the source code schema**. To do this, click **Add** → **Source code**.\n\n  7. **Fill out the schema properties**.\n\nFor this example, use the following schema properties.\n\nProperty| Property value| Code| UsrAccountInfoByAccountType| Title| AccountInfoByAccountType  \n---|---  \n  \n  8. **Apply the changes**.\n\n  9. **Add localizable strings**.\n\nFor this example, add the following localizable strings:\n\n     * Localizable string that stores the text to be displayed in the report for the \"Customer\" account type.\n     * Localizable string that stores the text to be displayed in the report for the \"Partner\" account type.\n\nTo do this:\n\n     1. Create a localizable string. To do this, go the **Localizable strings** additional property node and click ![](https://d3a7ykdi65m4cy.cloudfront.net/ac-en/s3fs-public/documentation/sdk/en/BPMonlineWebSDK/Screenshots/CustomMacros/8.1/btn_add.png).\n\n     2. Fill out the localizable string properties.\n\nElement| Property| Property value| Localizable string that stores the text to be displayed in the report for the \"Customer\" account type| Code| CustomerAccountType| Value| Annual turnover {0}| Localizable string that stores the text to be displayed in the report for the \"Partner\" account type.| Code| PartnerAccountType| Value| Number of employees {0} persons  \n---|---  \n  \n     3. Save the changes.\n\n  10. **Implement the business logic** of receiving additional account information depending on the account type.\n\nUsrAccountInfoByAccountType\n         \n         namespace Terrasoft.Configuration  \n         {  \n             using System;  \n             using System.CodeDom.Compiler;  \n             using System.Collections.Generic;  \n             using System.Data;  \n             using System.Linq;  \n             using System.Runtime.Serialization;  \n             using System.ServiceModel;  \n             using System.ServiceModel.Web;  \n             using System.ServiceModel.Activation;  \n             using System.Text;  \n             using System.Text.RegularExpressions;  \n             using System.Web;  \n             using Terrasoft.Common;  \n             using Terrasoft.Core;  \n             using Terrasoft.Core.DB;  \n             using Terrasoft.Core.Entities;  \n             using Terrasoft.Core.Packages;  \n             using Terrasoft.Core.Factories;  \n           \n             /* Attribute that stores the macro name. */  \n             [ExpressionConverterAttribute(\"AccountInfoByAccountType\")]  \n           \n             /* Class that implements the \"IExpressionConverter\" interface. */  \n             class UsrAccountInfoByAccountType : IExpressionConverter  \n             {  \n           \n                 private UserConnection _userConnection;  \n                 private string _customerAdditional;  \n                 private string _partnerAdditional;  \n           \n                 /* Call localizable string values. */  \n                 private void SetResources() {  \n                     string sourceCodeName = \"UsrAccountInfoByAccountType\";  \n                     _customerAdditional = new LocalizableString(_userConnection.ResourceStorage, sourceCodeName, \"LocalizableStrings.CustomerAccountType.Value\");  \n                     _partnerAdditional =  new LocalizableString(_userConnection.ResourceStorage, sourceCodeName, \"LocalizableStrings.PartnerAccountType.Value\");  \n                 }  \n           \n                 /* Implement the \"Evaluate()\" method of the \"IExpressionConverter\" interface. */  \n                 public string Evaluate(object value, string arguments = \"\")  \n                 {  \n                     try  \n                     {  \n                         _userConnection = (UserConnection)HttpContext.Current.Session[\"UserConnection\"];  \n                         Guid accountId = new Guid(value.ToString());  \n                         return getAccountInfo(accountId);  \n                     }  \n                     catch (Exception err)  \n                     {  \n                         return err.Message;  \n                     }  \n                 }  \n           \n                 /* Receive additional information based on the account type ID. */  \n                 private string getAccountInfo(Guid accountId)  \n                 {  \n                     SetResources();  \n                     try  \n                     {  \n           \n                         /* Create an \"EntitySchemaQuery\" instance that has the \"Account\" root schema. */  \n                         EntitySchemaQuery esq = new EntitySchemaQuery(_userConnection.EntitySchemaManager, \"Account\");  \n           \n                         /* Add columns to the query. */  \n                         var columnType = esq.AddColumn(\"Type.Name\").Name;  \n                         var columnNumber = esq.AddColumn(\"EmployeesNumber.Name\").Name;  \n                         var columnRevenue = esq.AddColumn(\"AnnualRevenue.Name\").Name;  \n           \n                         /* Filter records by the account ID. */  \n                         var accountFilter = esq.CreateFilterWithParameters(  \n                             FilterComparisonType.Equal,  \n                             \"Id\",  \n                             accountId  \n                         );  \n                         esq.Filters.Add(accountFilter);  \n           \n                         /* Retrieve an entity collection. */  \n                         EntityCollection entities = esq.GetEntityCollection(_userConnection);  \n           \n                         /* If the collection includes entities, the method returns data depending on the account type. */  \n                         if (entities.Count > 0)  \n                         {  \n                             Entity entity = entities[0];  \n                             var type = entity.GetTypedColumnValue<string>(columnType);  \n                             switch (type)  \n                             {  \n                                 case \"Customer\":  \n                                     return String.Format(_customerAdditional, entity.GetTypedColumnValue<string>(columnRevenue));  \n                                 case \"Partner\":  \n                                     return String.Format(_partnerAdditional, entity.GetTypedColumnValue<string>(columnNumber));  \n                                 default:  \n                                     return String.Empty;  \n                             }  \n                         }  \n                         return String.Empty;  \n                     }  \n                     catch (Exception err)  \n                     {  \n                         throw err;  \n                     }  \n                 }  \n             }  \n         }  \n         \n\n  11. **Publish the schema**.\n\n\n\n\n### Date of report generation​\n\n  1. **Select a user-made package** to add the schema.\n\nFor this example, select the `sdkMsWordReportCustomMacros` user-made package.\n\n  2. **Create the source code schema**. To do this, click **Add** → **Source code**.\n\n  3. **Fill out the schema properties**.\n\nFor this example, use the following schema properties.\n\nProperty| Property value| Code| UsrCurrentDate| Title| CurrentDate  \n---|---  \n  \n  4. **Apply the changes**.\n\n  5. **Implement the business logic** of receiving date of report generation.\n\nUsrCurrentDate\n         \n         namespace Terrasoft.Configuration  \n         {  \n             using System;  \n             using System.CodeDom.Compiler;  \n             using System.Collections.Generic;  \n             using System.Data;  \n             using System.Linq;  \n             using System.Runtime.Serialization;  \n             using System.ServiceModel;  \n             using System.ServiceModel.Web;  \n             using System.ServiceModel.Activation;  \n             using System.Text;  \n             using System.Text.RegularExpressions;  \n             using System.Web;  \n             using Terrasoft.Common;  \n             using Terrasoft.Core;  \n             using Terrasoft.Core.DB;  \n             using Terrasoft.Core.Entities;  \n             using Terrasoft.Core.Packages;  \n             using Terrasoft.Core.Factories;  \n           \n             /* Attribute that stores the macro name. */  \n             [ExpressionConverterAttribute(\"CurrentDate\")]  \n           \n             /* Class that implements the \"IExpressionConverter\" interface. */  \n             class UsrCurrentDate : IExpressionConverter  \n             {  \n                 private UserConnection _userConnection;  \n           \n                 /* Implement the \"Evaluate()\" method of the \"IExpressionConverter\" interface. */  \n                 public string Evaluate(object value, string arguments = \"\")  \n                 {  \n                     try  \n                     {  \n                         _userConnection = (UserConnection)HttpContext.Current.Session[\"UserConnection\"];  \n           \n                         /* Return current date. */  \n                         return _userConnection.CurrentUser.GetCurrentDateTime().Date.ToString(\"dd MMM yyyy\");  \n                     }  \n                     catch (Exception err)  \n                     {  \n                         return err.Message;  \n                     }  \n                 }  \n             }  \n         }  \n         \n\n  6. **Publish the schema**.\n\n\n\n\n### Employee who generated the report​\n\n  1. **Select a user-made package** to add the schema.\n\nFor this example, select the `sdkMsWordReportCustomMacros` user-made package.\n\n  2. **Create the source code schema**. To do this, click **Add** → **Source code**.\n\n  3. **Fill out the schema properties**.\n\nFor this example, use the following schema properties.\n\nProperty| Property value| Code| UsrCurrentUser| Title| CurrentUser  \n---|---  \n  \n  4. **Apply the changes**.\n\n  5. **Implement the business logic** of receiving the name of the employee who generated the report.\n\nUsrCurrentUser\n         \n         namespace Terrasoft.Configuration  \n         {  \n             using System;  \n             using System.CodeDom.Compiler;  \n             using System.Collections.Generic;  \n             using System.Data;  \n             using System.Linq;  \n             using System.Runtime.Serialization;  \n             using System.ServiceModel;  \n             using System.ServiceModel.Web;  \n             using System.ServiceModel.Activation;  \n             using System.Text;  \n             using System.Text.RegularExpressions;  \n             using System.Web;  \n             using Terrasoft.Common;  \n             using Terrasoft.Core;  \n             using Terrasoft.Core.DB;  \n             using Terrasoft.Core.Entities;  \n             using Terrasoft.Core.Packages;  \n             using Terrasoft.Core.Factories;  \n           \n             /* Attribute that stores the macro name. */  \n             [ExpressionConverterAttribute(\"CurrentUser\")]  \n           \n             /* Class that implements the \"IExpressionConverter\" interface. */  \n             class UsrCurrentUser : IExpressionConverter  \n             {  \n                 private UserConnection _userConnection;  \n           \n                 /* Implement the \"Evaluate()\" method of the \"IExpressionConverter\" interface. */  \n                 public string Evaluate(object value, string arguments = \"\")  \n                 {  \n                     try  \n                     {  \n                         _userConnection = (UserConnection)HttpContext.Current.Session[\"UserConnection\"];  \n           \n                         /* Return the contact of current user. */  \n                         return _userConnection.CurrentUser.ContactName;  \n                     }  \n                     catch (Exception err)  \n                     {  \n                         return err.Message;  \n                     }  \n                 }  \n             }  \n         }  \n         \n\n  6. **Publish the schema**.\n\n\n\n\n## 2\\. Create a report​\n\n  1. **Open the Report setup section**. To do this, click ![](https://academy.creatio.com/sites/en/files/images/NoCodePlatform/Manage_Apps/btn_system_designer_8_shell.png) in the top right → **System setup** → **Report setup**.\n\n  2. **Click New report**.\n\n  3. **Fill out the report properties**.\n\nProperty| Property value| Report name| Account summary| Object| Account| Show in the list view| Clear the checkbox| Show in the record page| Select the checkbox  \n---|---  \n  \n  4. **Apply the changes**.\n\n\n\n\n**As a result** , Creatio will add the \"Account summary\" report to the **Report setup** section.\n\n![](https://d3a7ykdi65m4cy.cloudfront.net/ac-en/s3fs-public/documentation/sdk/en/BPMonlineWebSDK/Screenshots/CustomMacros/8.1/scr_report_in_the_report_list.png)\n\n## 3\\. Set up the report columns​\n\n  1. **Add the report columns**.\n\n     1. Go to the **Set up report data** block.\n\n     2. Add the column of account name. To do this, click ![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/BasicMacros/scr_AddButton.png) → open the **Column** field → select **Id** → click **Select**.\n\nThe **Id** column is an input parameter for a custom macro.\n\n     3. Add the **Id** , **Name** , **Type** , **Primary contact** and **Id** columns similarly.\n\nAs a result, the \"Account summary\" report data will be as follows.\n\n![](https://d3a7ykdi65m4cy.cloudfront.net/ac-en/s3fs-public/documentation/sdk/en/BPMonlineWebSDK/Screenshots/CustomMacros/8.1/scr_report_data.png)\n\n  2. **Add the macro tag** to the column.\n\nFor this example, add the macro tags to the different **Id** columns. To do this:\n\n     1. Open the setting page of the **Id** column. To do this, go to the **Set up report data** block and double-click the column or click ![](https://d3a7ykdi65m4cy.cloudfront.net/ac-en/s3fs-public/documentation/sdk/en/BPMonlineWebSDK/Screenshots/BasicMacros/8.1/btn_edit.png) in the column row.\n\n     2. Go to the **Title** property.\n\n     3. Add the `[#CurrentDate#]` macro tag to the **Name** column. The `[#CurrentDate#]` macro receives date of report generation.\n\n     4. Add the `[#CurrentUser#]` and `[#AccountInfoByAccountType#]` macro tags to the different **Id** columns similarly.\n\nThe `[#CurrentUser#]` macro receives the name of the employee who generated the report.\n\nThe `[#AccountInfoByAccountType#]` macro receives additional information of the account depending on the account type.\n\n     5. Save the changes.\n\n  3. **Apply the changes**.\n\n\n\n\n**As a result** , the \"Account summary\" report data will be as follows.\n\n![](https://d3a7ykdi65m4cy.cloudfront.net/ac-en/s3fs-public/documentation/sdk/en/BPMonlineWebSDK/Screenshots/CustomMacros/8.1/scr_resulted_report_data.png)\n\n## 4\\. Set up the report template​\n\n  1. **Install the Creatio plug-in for MS Word**. Instructions: [Install Creatio plug-in for MS Word](https://academy.creatio.com/documents?ver=8.0&id=1412) (user documentation). This is a one-time procedure.\n\n  2. **Run the MS Word app**.\n\n  3. **Connect to the Creatio instance** that includes the created report.\n\n     1. Open the **Creatio** tab.\n\n     2. Click **Connect**. This opens the **Login** window.\n\n     3. Enter the Creatio user credentials.\n\n     4. Click ![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/BasicMacros/scr_PlusButton.png). This opens the **Available Servers** window.\n\n     5. Click **New**. This opens the **Server Connection Setup** window.\n\n     6. Fill out the server properties.\n\nProperty| Property value| Name| An arbitrary server name. For example, \"Creatio.\"| Link| URL of the Creatio instance that includes the created report. For example, `https://mycreatio.com/`.  \n---|---  \n  \n     7. Click **OK**. This closes the **Server Connection Setup** window.\n\n     8. Click **OK**. This closes the **Available Servers** window and adds the server name to the **Server** field of the **Login** window.\n\n     9. Click **OK**. This closes the **Login** window and connects to the Creatio instance.\n\n  4. **Select the report** to set up the template.\n\n     1. Open the **Creatio** tab.\n     2. Click **Select report**. This opens the **Creatio Word reports** window.\n     3. Select \"Account summary\" report.\n     4. Click **OK**. This closes the **Creatio Word reports** window and opens the **Word report data** panel that includes the \"Account summary\" report data set up in the Creatio instance.\n  5. **Set up the template layout** based on your business goals.\n\n\n\n\n**As a result** , the template of the \"Account summary\" report will look as follows.\n\n![](https://d3a7ykdi65m4cy.cloudfront.net/ac-en/s3fs-public/documentation/sdk/en/BPMonlineWebSDK/Screenshots/CustomMacros/8.1/scr_report_template.png)\n\n## 5\\. Upload the file of report template to Creatio​\n\n  1. **Open the Creatio tab**.\n  2. **Click Save to Creatio**.\n\n\n\n**As a result** , the template file of the \"Account summary\" report will be uploaded to the report page in Creatio.\n\n![](https://d3a7ykdi65m4cy.cloudfront.net/ac-en/s3fs-public/documentation/sdk/en/BPMonlineWebSDK/Screenshots/CustomMacros/8.1/scr_report_template_in_Creatio.png)\n\n## 6\\. Set up how to display the report​\n\nAdd the report to the account page. To do this:\n\n  1. **Open the Accounts form page**. To do this, click ![](https://academy.creatio.com/sites/en/files/images/NoCodePlatform/Manage_Apps/btn_system_designer_8_shell.png) in the top right → **Application management** → **Application Hub** → **Customer 360** → **Accounts form page**.\n\n  2. **Add a button** that opens the \"Account summary\" report.\n\n     1. Add a **Button** type component to the toolbar of the Freedom UI Designer.\n\n     2. Click ![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/ClientModule/8.0/scr_Settings_button.png) and fill out the button properties.\n\nElement| Property| Property value| Button that opens the \"Account summary\" report| Title| Print report| Action| Print report| Print settings| Print report for the current record  \n---|---  \n  \n  3. **Save the changes**.\n\n\n\n\n**As a result** , Creatio will add the **Print report** button that lets you open the \"Account summary\" report from the account page.\n\n![](https://d3a7ykdi65m4cy.cloudfront.net/ac-en/s3fs-public/documentation/sdk/en/BPMonlineWebSDK/Screenshots/CustomMacros/8.1/scr_Print_button_on_the_account_page.png)\n\n## View the result​\n\n  1. **Open the Accounts section**.\n  2. **Open the page of an arbitrary account**.\n  3. **Generate the report**. To do this, click **Print report** → **Account summary**.\n  4. **Save the report file** to your device.\n  5. **Open the report file**.\n\n\n\n**As a result** , Creatio will generate the \"Account summary\" report from the account page. The **Additional information** field value differs for different account types:\n\n  * For the \"Customer\" account type, the field will include the annual revenue. [View the result >>>](https://academy.creatio.com/documents?ver=8.0&id=15703&anchor=view-result)\n  * For the \"Partner\" account type, the field will include the number of employees. [View the result >>>](https://academy.creatio.com/documents?ver=8.0&id=15703&anchor=view-result-1)\n  * For other account types, the field will include empty string. [View the result >>>](https://academy.creatio.com/documents?ver=8.0&id=15703&anchor=view-result-2)\n\n\n\n## Source code​\n\n  * UsrAccountInfoByAccountType\n  * UsrCurrentDate\n  * UsrCurrentUser\n\n\n    \n    \n    namespace Terrasoft.Configuration  \n    {  \n        using System;  \n        using System.CodeDom.Compiler;  \n        using System.Collections.Generic;  \n        using System.Data;  \n        using System.Linq;  \n        using System.Runtime.Serialization;  \n        using System.ServiceModel;  \n        using System.ServiceModel.Web;  \n        using System.ServiceModel.Activation;  \n        using System.Text;  \n        using System.Text.RegularExpressions;  \n        using System.Web;  \n        using Terrasoft.Common;  \n        using Terrasoft.Core;  \n        using Terrasoft.Core.DB;  \n        using Terrasoft.Core.Entities;  \n        using Terrasoft.Core.Packages;  \n        using Terrasoft.Core.Factories;  \n      \n        /* Attribute that stores the macro name. */  \n        [ExpressionConverterAttribute(\"AccountInfoByAccountType\")]  \n      \n        /* Class that implements the \"IExpressionConverter\" interface. */  \n        class UsrAccountInfoByAccountType : IExpressionConverter  \n        {  \n      \n            private UserConnection _userConnection;  \n            private string _customerAdditional;  \n            private string _partnerAdditional;  \n      \n            /* Call localizable string values. */  \n            private void SetResources() {  \n                string sourceCodeName = \"UsrAccountInfoByAccountType\";  \n                _customerAdditional = new LocalizableString(_userConnection.ResourceStorage, sourceCodeName, \"LocalizableStrings.CustomerAccountType.Value\");  \n                _partnerAdditional =  new LocalizableString(_userConnection.ResourceStorage, sourceCodeName, \"LocalizableStrings.PartnerAccountType.Value\");  \n            }  \n      \n            /* Implement the \"Evaluate()\" method of the \"IExpressionConverter\" interface. */  \n            public string Evaluate(object value, string arguments = \"\")  \n            {  \n                try  \n                {  \n                    _userConnection = (UserConnection)HttpContext.Current.Session[\"UserConnection\"];  \n                    Guid accountId = new Guid(value.ToString());  \n                    return getAccountInfo(accountId);  \n                }  \n                catch (Exception err)  \n                {  \n                    return err.Message;  \n                }  \n            }  \n      \n            /* Receive additional information based on the account type ID. */  \n            private string getAccountInfo(Guid accountId)  \n            {  \n                SetResources();  \n                try  \n                {  \n      \n                    /* Create an \"EntitySchemaQuery\" instance that has the \"Account\" root schema. */  \n                    EntitySchemaQuery esq = new EntitySchemaQuery(_userConnection.EntitySchemaManager, \"Account\");  \n      \n                    /* Add columns to the query. */  \n                    var columnType = esq.AddColumn(\"Type.Name\").Name;  \n                    var columnNumber = esq.AddColumn(\"EmployeesNumber.Name\").Name;  \n                    var columnRevenue = esq.AddColumn(\"AnnualRevenue.Name\").Name;  \n      \n                    /* Filter records by the account ID. */  \n                    var accountFilter = esq.CreateFilterWithParameters(  \n                        FilterComparisonType.Equal,  \n                        \"Id\",  \n                        accountId  \n                    );  \n                    esq.Filters.Add(accountFilter);  \n      \n                    /* Retrieve an entity collection. */  \n                    EntityCollection entities = esq.GetEntityCollection(_userConnection);  \n      \n                    /* If the collection includes entities, the method returns data depending on the account type. */  \n                    if (entities.Count > 0)  \n                    {  \n                        Entity entity = entities[0];  \n                        var type = entity.GetTypedColumnValue<string>(columnType);  \n                        switch (type)  \n                        {  \n                            case \"Customer\":  \n                                return String.Format(_customerAdditional, entity.GetTypedColumnValue<string>(columnRevenue));  \n                            case \"Partner\":  \n                                return String.Format(_partnerAdditional, entity.GetTypedColumnValue<string>(columnNumber));  \n                            default:  \n                                return String.Empty;  \n                        }  \n                    }  \n                    return String.Empty;  \n                }  \n                catch (Exception err)  \n                {  \n                    throw err;  \n                }  \n            }  \n        }  \n    }  \n    \n    \n    \n    namespace Terrasoft.Configuration  \n    {  \n        using System;  \n        using System.CodeDom.Compiler;  \n        using System.Collections.Generic;  \n        using System.Data;  \n        using System.Linq;  \n        using System.Runtime.Serialization;  \n        using System.ServiceModel;  \n        using System.ServiceModel.Web;  \n        using System.ServiceModel.Activation;  \n        using System.Text;  \n        using System.Text.RegularExpressions;  \n        using System.Web;  \n        using Terrasoft.Common;  \n        using Terrasoft.Core;  \n        using Terrasoft.Core.DB;  \n        using Terrasoft.Core.Entities;  \n        using Terrasoft.Core.Packages;  \n        using Terrasoft.Core.Factories;  \n      \n        /* Attribute that stores the macro name. */  \n        [ExpressionConverterAttribute(\"CurrentDate\")]  \n      \n        /* Class that implements the \"IExpressionConverter\" interface. */  \n        class UsrCurrentDate : IExpressionConverter  \n        {  \n            private UserConnection _userConnection;  \n      \n            /* Implement the \"Evaluate()\" method of the \"IExpressionConverter\" interface. */  \n            public string Evaluate(object value, string arguments = \"\")  \n            {  \n                try  \n                {  \n                    _userConnection = (UserConnection)HttpContext.Current.Session[\"UserConnection\"];  \n      \n                    /* Return current date. */  \n                    return _userConnection.CurrentUser.GetCurrentDateTime().Date.ToString(\"dd MMM yyyy\");  \n                }  \n                catch (Exception err)  \n                {  \n                    return err.Message;  \n                }  \n            }  \n        }  \n    }  \n    \n    \n    \n    namespace Terrasoft.Configuration  \n    {  \n        using System;  \n        using System.CodeDom.Compiler;  \n        using System.Collections.Generic;  \n        using System.Data;  \n        using System.Linq;  \n        using System.Runtime.Serialization;  \n        using System.ServiceModel;  \n        using System.ServiceModel.Web;  \n        using System.ServiceModel.Activation;  \n        using System.Text;  \n        using System.Text.RegularExpressions;  \n        using System.Web;  \n        using Terrasoft.Common;  \n        using Terrasoft.Core;  \n        using Terrasoft.Core.DB;  \n        using Terrasoft.Core.Entities;  \n        using Terrasoft.Core.Packages;  \n        using Terrasoft.Core.Factories;  \n      \n        /* Attribute that stores the macro name. */  \n        [ExpressionConverterAttribute(\"CurrentUser\")]  \n      \n        /* Class that implements the \"IExpressionConverter\" interface. */  \n        class UsrCurrentUser : IExpressionConverter  \n        {  \n            private UserConnection _userConnection;  \n      \n            /* Implement the \"Evaluate()\" method of the \"IExpressionConverter\" interface. */  \n            public string Evaluate(object value, string arguments = \"\")  \n            {  \n                try  \n                {  \n                    _userConnection = (UserConnection)HttpContext.Current.Session[\"UserConnection\"];  \n      \n                    /* Return the contact of current user. */  \n                    return _userConnection.CurrentUser.ContactName;  \n                }  \n                catch (Exception err)  \n                {  \n                    return err.Message;  \n                }  \n            }  \n        }  \n    }  \n    \n\n* * *\n\n## Resources​\n\n[Package with example implementation](https://d3a7ykdi65m4cy.cloudfront.net/ac-en/s3fs-public/packages/CustomMacros/8.1/sdkMsWordReportCustomMacros_2024-09-20_08.40.40.zip)\n\n  * 1\\. Implement custom macros\n    * Additional account information\n    * Date of report generation\n    * Employee who generated the report\n  * 2\\. Create a report\n  * 3\\. Set up the report columns\n  * 4\\. Set up the report template\n  * 5\\. Upload the file of report template to Creatio\n  * 6\\. Set up how to display the report\n  * View the result\n  * Source code\n  * Resources\n\n\n",
  "analysis": {
    "word_count": 3532,
    "key_concepts": ["configuration", "freedom ui", "section", "package", "contact", "account", "case", "no-code"],
    "use_cases": [
      "building applications",
      "custom development",
      "API integration",
      "system administration",
      "user management"
    ],
    "related_topics": ["customization", "layout", "ui design", "page schema"],
    "difficulty": "intermediate",
    "ai_tags": [
      "creatio",
      "package",
      "contact",
      "intermediate",
      "freedom ui",
      "documentation",
      "section",
      "configuration"
    ]
  },
  "ai_optimized": true,
  "processed_at": "2025-07-28T13:23:10.906021"
}
