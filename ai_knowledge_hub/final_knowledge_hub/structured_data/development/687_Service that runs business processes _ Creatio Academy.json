{
  "id": 687,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/8.1/integrations-and-api/business-process-service/overview",
  "title": "Service that runs business processes | Creatio Academy",
  "category": "development",
  "description": "ProcessEngineService.svc is a web service implemented in the Creatio service model to run business processes. Use the web service to integrate external apps with Creatio.",
  "content": "This is documentation for Creatio 8.1 . For up-to-date documentation, see the latest version ( 8.3 ). Version: 8.1 On this page Level: advanced ProcessEngineService.svc is a web service implemented in the Creatio service model to run business processes. Use the web service to integrate external apps with Creatio. Run a business process from an external app ​ Use the CreatioURL/0/ServiceModel/ProcessEngineService.svc URL to access Creatio objects. For example, https://mycreatio.com/0/ServiceModel/ProcessEngineService.svc . The Terrasoft.Core.Service.Model.ProcessEngineService class implements the ProcessEngineService.svc functionality. View the primary methods of the ProcessEngineService.svc service in the table below. Method Description Execute() Runs a business process. Passes a key-value collection of input business process parameters where key is the parameter code (the Code property value) and the value is the parameter value. Returns the process execution result. ExecProcElByUId() Executes a specific business process element. Can only execute an element of a running process. View the full list of the methods in the .NET classes reference . Run a business process from the front-end ​ Creatio lets you run a business process from the front-end using the following ways: executeProcess() method of the ProcessModuleUtilities module in the CrtNUI package execute() method of the Terrasoft.process.RunProcessRequest class Run a business process using the executeProcess() method ​ Create the Client module schema type if needed. Instructions: Configuration elements of the Client module type . Add the ProcessModuleUtilities module as a dependency to the module of the page that calls the service. Implement the executeProcess() method . Set the args object as a parameter. Pass the method parameters listed in the table below. Parameter Parameter type sysProcessName Name (the Code property value) of the business process to run. Optional if the sysProcessId parameter is used. sysProcessId The ID of the business process to run. Optional if the sysProcessName parameter is used. parameters Key-value collection of input business process parameters where key is the parameter code (the Code property value) and the value is the parameter value. Call the executeProcess() method . Run a business process using the execute() method ​ Create the Client module schema type if needed. Instructions: Configuration elements of the Client module type . Create the RunProcessRequest class . Pass the method parameters and list of output parameters listed in the table below. Parameter Parameter type schemaName Name (the Code property value) of the business process to run. schemaUId The ID of the business process to run. parameters Key-value collection of input business process parameters where key is the parameter code (the Code property value) and the value is the parameter value. resultParameterNames Collection of output business process parameters whose values must be received when executing the process. Pass as an array. Call the execute() method . Run a business process from the back-end ​ To run a business process from the back-end, call the Execute() method of the Terrasoft.Core.Process.IProcessExecutor interface. The IProcessExecutor interface provides a set of the Execute() method overloads for solving custom tasks. View the description of the IProcessExecutor interface in the .NET classes reference . note Creatio forbids running the business process that has output parameters in the background. Run a business process that passes or receives parameters ​ View a list of ways to run a business process that passes or receives parameters from the back-end in the table below. Method Description Execute(string processSchemaName) Parameters processSchemaName Name (the Code property value) of the business process to run. Runs a business process using the process name (the Code property value). Execute(Guid processSchemaUId) Parameters processSchemaUId The ID of the business process to run. Runs a business process using the process ID. View the example that runs a business process using the process name below. Example that runs a business process using the process name UserConnection userConnection = Get < UserConnection > ( \"UserConnection\" ) ; IProcessEngine processEngine = userConnection . ProcessEngine ; IProcessExecutor processExecutor = processEngine . ProcessExecutor ; processExecutor . Execute ( \"UsrProcess2Custom1\" ) ; return true ; Run a business process that passes input parameters ​ View a list of ways to run a business process that passes input parameters from the back-end in the table below. Method Description Execute(string processSchemaName, IReadOnlyDictionary<string, string> parameterValues) Parameters processSchemaName Name (the Code property value) of the business process to run. parameterValues Key-value collection of input business process parameters where key is the parameter code (the Code property value) and the value is the parameter value. Runs a business process using the process name (the Code property value). Execute(Guid processSchemaUId, IReadOnlyDictionary<string, string> parameterValues) Parameters processSchemaUId The ID of the business process to run. parameterValues Key-value collection of input business process parameters where key is the parameter code (the Code property value) and the value is the parameter value. Runs a business process using the process ID. View the examples that run a business process below. Transfer an integer parameter value Transfer a parameter value of the value collection type Transfer a parameter value of the object collection type with attributes UserConnection userConnection = Get < UserConnection > ( \"UserConnection\" ) ; IProcessEngine processEngine = userConnection . ProcessEngine ; IProcessExecutor processExecutor = processEngine . ProcessExecutor ; var nameValues = new Dictionary < string , string > ( ) ; int parameter1Value = 100 ; nameValues [ \"parameter1\" ] = parameter1Value . ToString ( ) ; processExecutor . Execute ( \"UsrProcess3Custom1\" , nameValues ) ; return true ; UserConnection userConnection = Get < UserConnection > ( \"UserConnection\" ) ; IProcessEngine processEngine = userConnection . ProcessEngine ; IProcessExecutor processExecutor = processEngine . ProcessExecutor ; ObjectList < int > values = ObjectList . Create ( 1 , 2 , 3 , 4 ) ; string serializedValue = BaseSerializableObjectUtilities . SerializeToJson ( values ) ; var parameterNameValues = new Dictionary < string , string > ( ) ; parameterNameValues [ \"InputValueList\" ] = serializedValue ; processExecutor . Execute ( \"ProcessRunsFromScriptTask\" , parameterNameValues ) ; return true ; UserConnection userConnection = Get < UserConnection > ( \"UserConnection\" ) ; IProcessEngine processEngine = userConnection . ProcessEngine ; IProcessExecutor processExecutor = processEngine . ProcessExecutor ; /* Create an object collection. */ var list = new CompositeObjectList < CompositeObject > ( ) ; var item1 = new CompositeObject ( ) ; /* The process parameter object includes \"Id\" and \"Name\" columns. */ item1 [ \"Id\" ] = new Guid ( \"94cc536a-71a7-4bfb-87ca-13f53b23c28e\" ) ; item1 [ \"Name\" ] = \"Name1\" ; list . Add ( item1 ) ; var item2 = new CompositeObject ( ) ; item2 [ \"Id\" ] = new Guid ( \"e694d36e-1727-4276-9fbf-b9aa193e4f44\" ) ; item2 [ \"Name\" ] = \"Name2\" ; list . Add ( item2 ) ; string serializedValue = BaseSerializableObjectUtilities . SerializeToJson ( list ) ; var parameterNameValues = new Dictionary < string , string > ( ) ; parameterNameValues [ \"InputObjectList\" ] = serializedValue ; processExecutor . Execute ( \"ProcessRunsFromScriptTask\" , parameterNameValues ) ; return true ; Run a business process that receives a single output parameter ​ View a list of ways to run a business process that receives a single output parameter from the back-end in the table below. Method Description Execute<TResult>(string processSchemaName, string resultParameterName, IReadOnlyDictionary<string, string> parameterValues) Parameters processSchemaName Name (the Code property value) of the business process to run. resultParameterName Name of the output business process parameter. parameterValues Key-value collection of input business process parameters where key is the parameter code (the Code property value) and the value is the parameter value. Optional. Runs a business process using the process name (the Code property value). Execute<TResult>(Guid processSchemaUId, string resultParameterName, IReadOnlyDictionary<string, string> parameterValues) Parameters processSchemaUId The ID of the business process to run. resultParameterName Name of the output business process parameter. parameterValues Key-value collection of input business process parameters where key is the parameter code (the Code property value) and the value is the parameter value. Optional. Runs a business process using the process ID. View the examples that run a business process using different ways below. Run a business process that receives a single output parameter UserConnection userConnection = GetUserConnection ( ) ; IProcessExecutor processExecutor = userConnection . ProcessEngine . ProcessExecutor ; /* Key-value collection of input business process parameters where key is the parameter code (the \"Code\" property value) and the value is the parameter value. */ var inputParameters = new Dictionary < string , string > { [ \"SomeInputParameter1\" ] = \"SomeInputParameter1Value\" , [ \"SomeInputParameter2\" ] = \"SomeInputParameter2Value\" } ; string processSchemaName = \"SomeBusinessProcessCode\" ; Guid processSchemaUId = Guid . Parse ( \"00000000-0000-0000-0000-000000000000\" ) ; /* Run a business process using the process name. Returns the text value of the \"SomeOutputParameter3\" parameter. */ string resultValue = processExecutor . Execute < string > ( processSchemaName , \"SomeOutputParameter3\" ) ; /* Run a business process using the process ID. Returns the text value of the \"SomeOutputParameter3\" parameter. */ string resultValue = processExecutor . Execute < string > ( processSchemaName , \"SomeOutputParameter3\" ) ; /* Run a business process using the process name and collection of input process parameters. Returns the text value of the \"SomeOutputParameter3\" parameter. */ string resultValue = processExecutor . Execute < string > ( processSchemaName , \"SomeOutputParameter3\" , inputParameters ) ; /* Run a business process using the process ID and collection of input process parameters. Returns the text value of the \"SomeOutputParameter3\" parameter. */ string resultValue = processExecutor . Execute < string > ( processSchemaUId , \"SomeOutputParameter3\" , inputParameters ) ; Run a business process that receives a collection of output parameters ​ View a list of ways to run a business process receives a collection of output parameters from the back-end in the table below. Method Description Execute<TResult>(string processSchemaName, IEnumerable<string> resultParameterNames, IReadOnlyDictionary<string, string> parameterValues) Parameters processSchemaName Name (the Code property value) of the business process to run. resultParameterNames Collection of output business process parameters. parameterValues Key-value collection of input business process parameters where key is the parameter code (the Code property value) and the value is the parameter value. Optional. Runs a business process using the process name (the Code property value). Execute<TResult>(Guid processSchemaUId, IEnumerable<string> resultParameterNames, IReadOnlyDictionary<string, string> parameterValues) Parameters processSchemaUId The ID of the business process to run. resultParameterNames Collection of output business process parameters. parameterValues Key-value collection of input business process parameters where key is the parameter code (the Code property value) and the value is the parameter value. Optional. Runs a business process using the process ID. View the examples that run a business process using different ways below. Example that runs a business process that receives a collection of output parameters UserConnection userConnection = GetUserConnection ( ) ; IProcessExecutor processExecutor = userConnection . ProcessEngine . ProcessExecutor ; /* Key-value collection of input business process parameters where key is the parameter code (the \"Code\" property value) and the value is the parameter value.*/ var inputParameters = new Dictionary < string , string > { [ \"SomeInputParameter1\" ] = \"SomeInputParameter1Value\" , [ \"SomeInputParameter2\" ] = \"SomeInputParameter2Value\" } ; /* Collection of output business process parameters.*/ var resultParameterNames = new string [ ] { \"SomeOutputParameter1\" , \"SomeOutputParameter2\" } ; string processSchemaName = \"SomeBusinessProcessCode\" ; Guid processSchemaUId = Guid . Parse ( \"00000000-0000-0000-0000-000000000000\" ) ; /* Run a business process using the process name and collection of output process parameters. */ ProcessDescriptor processDescriptor = processExecutor . Execute ( processSchemaName , resultParameterNames ) ; /* Run a business process using the process ID and collection of output process parameters. */ ProcessDescriptor processDescriptor = processExecutor . Execute ( processSchemaName , resultParameterNames ) ; /* Run a business process using the process name and collections of input and output process parameters. */ ProcessDescriptor processDescriptor = processExecutor . Execute ( processSchemaName , inputParameters , resultParameterNames ) ; /* Run a business process using the process ID and collections of input and output process parameters. */ ProcessDescriptor processDescriptor = processExecutor . Execute ( processSchemaUId , inputParameters , resultParameterNames ) ; Running a business process that receives a collection of output parameters returns an object of the ProcessDescriptor type. View the description of the ProcessDescriptor class in the .NET classes reference . To receive the values of output parameters , use the ResultParameterValues property of the IReadOnlyDictionary<string, object> type in the Terrasoft.Core.Process.ProcessDescriptor class. View the example that receives the output parameter values below. Example that receives the output parameter values ProcessDescriptor processDescriptor = processExecutor . Execute ( \"processSchemaName\" , inputParameters , resultParameterNames ) ; object parameter3Value = processDescriptor . ResultParameterValues [ \"SomeOutputParameter3\" ] ; if ( processDescriptor . ResultParameterValues . TryGetValue ( \"SomeOutputParameter4\" , out object parameter4value ) ) { Console . Log ( parameter4value ) ; } Resources ​ Terrasoft.Core.Service.Model.ProcessEngineService class (.NET classes reference) Terrasoft.Core.Process.IProcessExecutor interface (.NET classes reference) Terrasoft.Core.Process.ProcessDescriptor class (.NET classes reference) Run a business process from an external app Run a business process from the front-end Run a business process using the executeProcess() method Run a business process using the execute() method Run a business process from the back-end Run a business process that passes or receives parameters Run a business process that passes input parameters Run a business process that receives a single output parameter Run a business process that receives a collection of output parameters Resources",
  "markdown": "This is documentation for Creatio **8.1**.\n\nFor up-to-date documentation, see the **[latest version](/docs/8.x/dev/development-on-creatio-platform/integrations-and-api/business-process-service/overview)** (8.3).\n\nVersion: 8.1\n\nOn this page\n\nLevel: advanced\n\n`ProcessEngineService.svc` is a web service implemented in the Creatio service model to run business processes. Use the web service to integrate external apps with Creatio.\n\n## Run a business process from an external app​\n\nUse the `CreatioURL/0/ServiceModel/ProcessEngineService.svc` URL to access Creatio objects. For example, `https://mycreatio.com/0/ServiceModel/ProcessEngineService.svc`.\n\nThe `Terrasoft.Core.Service.Model.ProcessEngineService` class implements the `ProcessEngineService.svc` functionality. View the primary methods of the `ProcessEngineService.svc` service in the table below.\n\nMethod| Description| Execute()| Runs a business process. Passes a key-value collection of input business process parameters where key is the parameter code (the `Code` property value) and the value is the parameter value. Returns the process execution result.| ExecProcElByUId()| Executes a specific business process element. Can only execute an element of a running process.  \n---|---  \n  \nView the full list of the methods in the [.NET classes reference](https://academy.creatio.com/api/netcoreapi/8.0.0/api/Terrasoft.Core.ServiceModel.ProcessEngineService.html).\n\n## Run a business process from the front-end​\n\nCreatio lets you run a business process from the front-end using the following ways:\n\n  * `executeProcess()` method of the `ProcessModuleUtilities` module in the `CrtNUI` package\n  * `execute()` method of the `Terrasoft.process.RunProcessRequest` class\n\n\n\n### Run a business process using the executeProcess() method​\n\n  1. **Create the Client module schema type** if needed. Instructions: [Configuration elements of the Client module type](https://academy.creatio.com/documents?ver=8.1&id=15106).\n\n  2. **Add the** `ProcessModuleUtilities` **module as a dependency** to the module of the page that calls the service.\n\n  3. **Implement the** `executeProcess()` **method**. Set the `args` object as a parameter.\n\n  4. **Pass the method parameters** listed in the table below.\n\nParameter| Parameter type| sysProcessName| Name (the `Code` property value) of the business process to run. Optional if the `sysProcessId` parameter is used.| sysProcessId| The ID of the business process to run. Optional if the `sysProcessName` parameter is used.| parameters| Key-value collection of input business process parameters where key is the parameter code (the `Code` property value) and the value is the parameter value.  \n---|---  \n  \n  5. **Call the** `executeProcess()` **method**.\n\n\n\n\n### Run a business process using the execute() method​\n\n  1. **Create the Client module schema type** if needed. Instructions: [Configuration elements of the Client module type](https://academy.creatio.com/documents?ver=8.1&id=15106).\n\n  2. **Create the** `RunProcessRequest` **class**.\n\n  3. **Pass the method parameters and list of output parameters** listed in the table below.\n\nParameter| Parameter type| schemaName| Name (the `Code` property value) of the business process to run.| schemaUId| The ID of the business process to run.| parameters| Key-value collection of input business process parameters where key is the parameter code (the `Code` property value) and the value is the parameter value.| resultParameterNames| Collection of output business process parameters whose values must be received when executing the process. Pass as an array.  \n---|---  \n  \n  4. **Call the** `execute()` **method**.\n\n\n\n\n## Run a business process from the back-end​\n\nTo run a business process from the back-end, call the `Execute()` method of the `Terrasoft.Core.Process.IProcessExecutor` interface. The `IProcessExecutor` interface provides a set of the `Execute()` method overloads for solving custom tasks. View the description of the `IProcessExecutor` interface in the [.NET classes reference](https://academy.creatio.com/api/netcoreapi/8.0.0/api/Terrasoft.Core.Process.IProcessExecutor.html).\n\nnote\n\nCreatio forbids running the business process that has output parameters in the background.\n\n### Run a business process that passes or receives parameters​\n\nView a list of ways to run a business process that passes or receives parameters from the back-end in the table below.\n\nMethod| Description| Execute(string processSchemaName)Parameters| processSchemaName| Name (the `Code` property value) of the business process to run.  \n---|---  \n  \nRuns a business process using the process name (the `Code` property value).| Execute(Guid processSchemaUId)Parameters| processSchemaUId| The ID of the business process to run.  \n---|---  \n  \nRuns a business process using the process ID.  \n  \nView the example that runs a business process using the process name below.\n\nExample that runs a business process using the process name\n    \n    \n    UserConnection userConnection = Get<UserConnection>(\"UserConnection\");  \n    IProcessEngine processEngine = userConnection.ProcessEngine;  \n    IProcessExecutor processExecutor = processEngine.ProcessExecutor;  \n    processExecutor.Execute(\"UsrProcess2Custom1\");  \n    return true;  \n    \n\n### Run a business process that passes input parameters​\n\nView a list of ways to run a business process that passes input parameters from the back-end in the table below.\n\nMethod| Description| Execute(string processSchemaName, IReadOnlyDictionary<string, string> parameterValues)Parameters| processSchemaName| Name (the `Code` property value) of the business process to run.| parameterValues| Key-value collection of input business process parameters where key is the parameter code (the `Code` property value) and the value is the parameter value.  \n---|---  \n  \nRuns a business process using the process name (the `Code` property value).| Execute(Guid processSchemaUId, IReadOnlyDictionary<string, string> parameterValues)Parameters| processSchemaUId| The ID of the business process to run.| parameterValues| Key-value collection of input business process parameters where key is the parameter code (the `Code` property value) and the value is the parameter value.  \n---|---  \n  \nRuns a business process using the process ID.  \n  \nView the examples that run a business process below.\n\n  * Transfer an integer parameter value\n  * Transfer a parameter value of the value collection type\n  * Transfer a parameter value of the object collection type with attributes\n\n\n    \n    \n    UserConnection userConnection = Get<UserConnection>(\"UserConnection\");  \n    IProcessEngine processEngine = userConnection.ProcessEngine;  \n    IProcessExecutor processExecutor = processEngine.ProcessExecutor;  \n    var nameValues = new Dictionary<string, string>();  \n    int parameter1Value = 100;  \n    nameValues[\"parameter1\"] = parameter1Value.ToString();  \n    processExecutor.Execute(\"UsrProcess3Custom1\", nameValues);  \n    return true;  \n    \n    \n    \n    UserConnection userConnection = Get<UserConnection>(\"UserConnection\");  \n    IProcessEngine processEngine = userConnection.ProcessEngine;  \n    IProcessExecutor processExecutor = processEngine.ProcessExecutor;  \n    ObjectList<int> values = ObjectList.Create(1, 2, 3, 4);  \n    string serializedValue = BaseSerializableObjectUtilities.SerializeToJson(values);  \n    var parameterNameValues = new Dictionary<string, string>();  \n    parameterNameValues[\"InputValueList\"] = serializedValue;  \n    processExecutor.Execute(\"ProcessRunsFromScriptTask\", parameterNameValues);  \n    return true;  \n    \n    \n    \n    UserConnection userConnection = Get<UserConnection>(\"UserConnection\");  \n    IProcessEngine processEngine = userConnection.ProcessEngine;  \n    IProcessExecutor processExecutor = processEngine.ProcessExecutor;  \n      \n    /* Create an object collection. */  \n    var list = new CompositeObjectList<CompositeObject>();  \n    var item1 = new CompositeObject();  \n      \n    /* The process parameter object includes \"Id\" and \"Name\" columns. */  \n    item1[\"Id\"] = new Guid(\"94cc536a-71a7-4bfb-87ca-13f53b23c28e\");  \n    item1[\"Name\"] = \"Name1\"; list.Add(item1);  \n    var item2 = new CompositeObject(); item2[\"Id\"] = new Guid(\"e694d36e-1727-4276-9fbf-b9aa193e4f44\");  \n    item2[\"Name\"] = \"Name2\";  \n    list.Add(item2);  \n    string serializedValue = BaseSerializableObjectUtilities.SerializeToJson(list);  \n    var parameterNameValues = new Dictionary<string, string>();  \n    parameterNameValues[\"InputObjectList\"] = serializedValue;  \n    processExecutor.Execute(\"ProcessRunsFromScriptTask\", parameterNameValues);  \n    return true;  \n    \n\n### Run a business process that receives a single output parameter​\n\nView a list of ways to run a business process that receives a single output parameter from the back-end in the table below.\n\nMethod| Description| Execute<TResult>(string processSchemaName, string resultParameterName, IReadOnlyDictionary<string, string> parameterValues)Parameters| processSchemaName| Name (the `Code` property value) of the business process to run.| resultParameterName| Name of the output business process parameter.| parameterValues| Key-value collection of input business process parameters where key is the parameter code (the `Code` property value) and the value is the parameter value. Optional.  \n---|---  \n  \nRuns a business process using the process name (the `Code` property value).| Execute<TResult>(Guid processSchemaUId, string resultParameterName, IReadOnlyDictionary<string, string> parameterValues)Parameters| processSchemaUId| The ID of the business process to run.| resultParameterName| Name of the output business process parameter.| parameterValues| Key-value collection of input business process parameters where key is the parameter code (the `Code` property value) and the value is the parameter value. Optional.  \n---|---  \n  \nRuns a business process using the process ID.  \n  \nView the examples that run a business process using different ways below.\n\nRun a business process that receives a single output parameter\n    \n    \n    UserConnection userConnection = GetUserConnection();  \n    IProcessExecutor processExecutor = userConnection.ProcessEngine.ProcessExecutor;  \n      \n    /* Key-value collection of input business process parameters where key is the parameter code (the \"Code\" property value) and the value is the parameter value. */  \n    var inputParameters = new Dictionary<string, string> {  \n        [\"SomeInputParameter1\"] = \"SomeInputParameter1Value\",  \n        [\"SomeInputParameter2\"] = \"SomeInputParameter2Value\"  \n    };  \n    string processSchemaName = \"SomeBusinessProcessCode\";  \n    Guid processSchemaUId = Guid.Parse(\"00000000-0000-0000-0000-000000000000\");  \n      \n    /* Run a business process using the process name. Returns the text value of the \"SomeOutputParameter3\" parameter. */  \n    string resultValue = processExecutor.Execute<string>(processSchemaName, \"SomeOutputParameter3\");  \n      \n    /* Run a business process using the process ID. Returns the text value of the \"SomeOutputParameter3\" parameter. */  \n    string resultValue = processExecutor.Execute<string>(processSchemaName, \"SomeOutputParameter3\");  \n      \n    /* Run a business process using the process name and collection of input process parameters. Returns the text value of the \"SomeOutputParameter3\" parameter. */  \n    string resultValue = processExecutor.Execute<string>(processSchemaName, \"SomeOutputParameter3\", inputParameters);  \n      \n    /* Run a business process using the process ID and collection of input process parameters. Returns the text value of the \"SomeOutputParameter3\" parameter. */  \n    string resultValue = processExecutor.Execute<string>(processSchemaUId, \"SomeOutputParameter3\", inputParameters);  \n    \n\n### Run a business process that receives a collection of output parameters​\n\nView a list of ways to run a business process receives a collection of output parameters from the back-end in the table below.\n\nMethod| Description| Execute<TResult>(string processSchemaName, IEnumerable<string> resultParameterNames, IReadOnlyDictionary<string, string> parameterValues)Parameters| processSchemaName| Name (the `Code` property value) of the business process to run.| resultParameterNames| Collection of output business process parameters.| parameterValues| Key-value collection of input business process parameters where key is the parameter code (the `Code` property value) and the value is the parameter value. Optional.  \n---|---  \n  \nRuns a business process using the process name (the `Code` property value).| Execute<TResult>(Guid processSchemaUId, IEnumerable<string> resultParameterNames, IReadOnlyDictionary<string, string> parameterValues)Parameters| processSchemaUId| The ID of the business process to run.| resultParameterNames| Collection of output business process parameters.| parameterValues| Key-value collection of input business process parameters where key is the parameter code (the `Code` property value) and the value is the parameter value. Optional.  \n---|---  \n  \nRuns a business process using the process ID.  \n  \nView the examples that run a business process using different ways below.\n\nExample that runs a business process that receives a collection of output parameters\n    \n    \n    UserConnection userConnection = GetUserConnection();  \n    IProcessExecutor processExecutor = userConnection.ProcessEngine.ProcessExecutor;  \n      \n    /* Key-value collection of input business process parameters where key is the parameter code (the \"Code\" property value) and the value is the parameter value.*/  \n    var inputParameters = new Dictionary<string, string> {  \n        [\"SomeInputParameter1\"] = \"SomeInputParameter1Value\",  \n        [\"SomeInputParameter2\"] = \"SomeInputParameter2Value\"  \n    };  \n      \n    /* Collection of output business process parameters.*/  \n    var resultParameterNames = new string[] {   \n        \"SomeOutputParameter1\",  \n        \"SomeOutputParameter2\"  \n    };  \n    string processSchemaName = \"SomeBusinessProcessCode\";  \n    Guid processSchemaUId = Guid.Parse(\"00000000-0000-0000-0000-000000000000\");  \n      \n    /* Run a business process using the process name and collection of output process parameters. */  \n    ProcessDescriptor processDescriptor = processExecutor.Execute(processSchemaName, resultParameterNames);  \n      \n    /* Run a business process using the process ID and collection of output process parameters. */  \n    ProcessDescriptor processDescriptor = processExecutor.Execute(processSchemaName, resultParameterNames);  \n      \n    /* Run a business process using the process name and collections of input and output process parameters. */  \n    ProcessDescriptor processDescriptor = processExecutor.Execute(processSchemaName, inputParameters, resultParameterNames);  \n      \n    /* Run a business process using the process ID and collections of input and output process parameters. */  \n    ProcessDescriptor processDescriptor = processExecutor.Execute(processSchemaUId, inputParameters, resultParameterNames);  \n    \n\nRunning a business process that receives a collection of output parameters returns an object of the `ProcessDescriptor` type. View the description of the `ProcessDescriptor` class in the [.NET classes reference](https://academy.creatio.com/api/netcoreapi/8.0.0/api/Terrasoft.Core.Process.ProcessDescriptor.html).\n\nTo **receive the values of output parameters** , use the `ResultParameterValues` property of the `IReadOnlyDictionary<string, object>` type in the `Terrasoft.Core.Process.ProcessDescriptor` class.\n\nView the example that receives the output parameter values below.\n\nExample that receives the output parameter values\n    \n    \n    ProcessDescriptor processDescriptor = processExecutor.Execute(\"processSchemaName\", inputParameters, resultParameterNames);  \n    object parameter3Value = processDescriptor.ResultParameterValues[\"SomeOutputParameter3\"];  \n    if (processDescriptor.ResultParameterValues.TryGetValue(\"SomeOutputParameter4\", out object parameter4value)) {  \n        Console.Log(parameter4value);  \n    }  \n    \n\n* * *\n\n## Resources​\n\n[Terrasoft.Core.Service.Model.ProcessEngineService class](https://academy.creatio.com/api/netcoreapi/8.0.0/api/Terrasoft.Core.ServiceModel.ProcessEngineService.html) (.NET classes reference)\n\n[Terrasoft.Core.Process.IProcessExecutor interface](https://academy.creatio.com/api/netcoreapi/8.0.0/api/Terrasoft.Core.Process.IProcessExecutor.html) (.NET classes reference)\n\n[Terrasoft.Core.Process.ProcessDescriptor class](https://academy.creatio.com/api/netcoreapi/8.0.0/api/Terrasoft.Core.Process.ProcessDescriptor.html) (.NET classes reference)\n\n  * Run a business process from an external app\n  * Run a business process from the front-end\n    * Run a business process using the executeProcess() method\n    * Run a business process using the execute() method\n  * Run a business process from the back-end\n    * Run a business process that passes or receives parameters\n    * Run a business process that passes input parameters\n    * Run a business process that receives a single output parameter\n    * Run a business process that receives a collection of output parameters\n  * Resources\n\n\n",
  "analysis": {
    "word_count": 2160,
    "key_concepts": ["business process", "configuration", "web service", "package"],
    "use_cases": [
      "building applications",
      "custom development",
      "API integration",
      "system administration",
      "user management"
    ],
    "related_topics": ["automation", "workflow", "process design", "bpm"],
    "difficulty": "intermediate",
    "ai_tags": [
      "creatio",
      "package",
      "intermediate",
      "documentation",
      "configuration",
      "web service",
      "business process"
    ]
  },
  "ai_optimized": true,
  "processed_at": "2025-07-28T13:28:18.267140"
}
