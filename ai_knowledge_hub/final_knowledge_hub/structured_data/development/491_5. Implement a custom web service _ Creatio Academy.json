{
  "id": 491,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/getting-started/first-app/develop-application/step-5-create-a-web-service",
  "title": "5. Implement a custom web service | Creatio Academy",
  "category": "development",
  "description": "On the previous step, we implemented population of the group class timetable.",
  "content": "Version: 8.3 On this page Level: beginner On the previous step , we implemented population of the group class timetable. Now, implement a web service that provides information about the number of classes in the timetable. To call a web service, add the Web service button to the record page. Create a custom web service ​ Go to the Configuration section . Select the \"TryItPackage\" package from the package list. Click Add on the workspace toolbar and select the Source code configuration element type. Fill out the property fields as follows: Set Code to \"UsrClassService\". Set Title to \"Class service\". Add the source code in the Schema Designer. UsrClassService.cs namespace Terrasoft . Configuration . UsrClassService { using System ; using System . ServiceModel ; using System . ServiceModel . Web ; using System . ServiceModel . Activation ; using Terrasoft . Core ; using Terrasoft . Core . DB ; using Terrasoft . Common ; using Terrasoft . Web . Common ; using Terrasoft . Core . Entities ; [ ServiceContract ] [ AspNetCompatibilityRequirements ( RequirementsMode = AspNetCompatibilityRequirementsMode . Required ) ] public class UsrClassService : BaseService { [ OperationContract ] [ WebInvoke ( Method = \"POST\" , RequestFormat = WebMessageFormat . Json , BodyStyle = WebMessageBodyStyle . Wrapped , ResponseFormat = WebMessageFormat . Json ) ] public int GetTrainingsQuantity ( string code ) { var classQuery = new Select ( UserConnection ) . Column ( \"Id\" ) . From ( \"UsrClass\" ) . Where ( \"UsrCode\" ) . IsEqual ( Column . Parameter ( code ) ) as Select ; Guid id = classQuery . ExecuteScalar < Guid > ( ) ; if ( id == Guid . Empty ) { return - 1 ; } var countQuery = new Select ( UserConnection ) . Column ( Func . Count ( \"Id\" ) ) . As ( \"Count\" ) . From ( \"UsrGroupTraining\" ) . Where ( \"UsrClassId\" ) . IsEqual ( Column . Parameter ( id ) ) as Select ; int result = countQuery . ExecuteScalar < int > ( ) ; return result ; } } } Publish the schema . Modify the page source code ​ Add a class page button that calls the web service and displays the dialog box that contains the number of group classes in the timetable. Go to the Configuration section . Select the \"TryItPackage\" package from the package list. The Wizards added schemas of various types to the package. Filter schemas by the Client module type. Double-click the UsrClass1Page schema to open it. Add a new localizable string for the button name to the schema. Click the button in the Localizable strings block of the properties panel and fill out the localizable string properties : Set Code to \"ServiceButtonCaption\". Set Value to \"Web service\". Modify the source code. UsrClass1Page.js define ( \"UsrClass1Page\" , [ \"ServiceHelper\" , \"ProcessModuleUtilities\" ] , function ( ServiceHelper , ProcessModuleUtilities ) { return { entitySchemaName : \"UsrClass\" , /* No changes. */ messages : { // ... } , /* No changes. */ attributes : { // ... } , modules : /**SCHEMA_MODULES*/ { } /**SCHEMA_MODULES*/ , /* No changes. */ details : /**SCHEMA_DETAILS*/ { // ... } /**SCHEMA_DETAILS*/ , businessRules : /**SCHEMA_BUSINESS_RULES*/ { } /**SCHEMA_BUSINESS_RULES*/ , /* Add the new method to the existing methods. */ methods : { // ... /* The method that handles the button clicks. */ onGetServiceInfoClick : function ( ) { /* Retrieve the section code to pass as the incoming parameter of the service method. */ var code = this . get ( \"UsrCode\" ) ; var serviceData = { code : code } ; /* Call the service method. */ ServiceHelper . callService ( \"UsrClassService\" , \"GetTrainingsQuantity\" , function ( response ) { var result = response . GetTrainingsQuantityResult ; /* Display the service method output in the dialog box. */ this . showInformationDialog ( result ) ; } , serviceData , this ) ; } } , dataModels : /**SCHEMA_DATA_MODELS*/ { } /**SCHEMA_DATA_MODELS*/ , /* Display the button on the record page. */ diff : /**SCHEMA_DIFF*/ [ // ... /* Add the button element to the record page. */ { \"operation\" : \"insert\" , /* The parent element name. */ \"parentName\" : \"ActionButtonsContainer\" , \"propertyName\" : \"items\" , /* The element name. */ \"name\" : \"GetServiceInfoButton\" , \"values\" : { /* Set the element type to button. */ itemType : Terrasoft . ViewItemType . BUTTON , /* Retrieve the element caption from the localizable string. */ caption : { bindTo : \"Resources.Strings.ServiceButtonCaption\" } , /* The method that handles the button clicks. */ click : { bindTo : \"onGetServiceInfoClick\" } , enabled : true , /* The button position on the page. */ \"layout\" : { \"column\" : 1 , \"row\" : 6 , \"colSpan\" : 2 , \"rowSpan\" : 1 } } } , ] /**SCHEMA_DIFF*/ } ; } ) ; Save the changes . As a result, we implemented the web service that returns the number of group classes. See also ​ Step 4. Implement the population of the timetable Create a custom web service Modify the page source code See also",
  "markdown": "Version: 8.3\n\nOn this page\n\nLevel: beginner\n\nOn the [previous step](https://academy.creatio.com/documents?ver=8.3&id=15015), we implemented population of the group class timetable.\n\nNow, implement a web service that provides information about the number of classes in the timetable. To call a web service, add the **Web service** button to the record page.\n\n## Create a custom web service​\n\n  1. [Go to the **Configuration** section](https://academy.creatio.com/documents?ver=8.3&id=15101&anchor=title-2093-2).\n\n  2. Select the \"TryItPackage\" [package](https://academy.creatio.com/documents?ver=8.3&id=15121) from the package list.\n\n  3. Click **Add** on the workspace toolbar and select the **Source code** configuration element type.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_SourceCode.png)\n\n  4. **Fill out the property fields** as follows:\n\n     * Set **Code** to \"UsrClassService\".\n     * Set **Title** to \"Class service\".\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_SourceCodeProps.png)\n\n  5. Add the source code in the Schema Designer.\n\nUsrClassService.cs\n         \n         namespace Terrasoft.Configuration.UsrClassService {  \n             using System;  \n             using System.ServiceModel;  \n             using System.ServiceModel.Web;  \n             using System.ServiceModel.Activation;  \n             using Terrasoft.Core;  \n             using Terrasoft.Core.DB;  \n             using Terrasoft.Common;  \n             using Terrasoft.Web.Common;  \n             using Terrasoft.Core.Entities;  \n           \n             [ServiceContract]  \n             [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]  \n             public class UsrClassService: BaseService {  \n           \n                 [OperationContract]  \n                 [WebInvoke(Method = \"POST\", RequestFormat = WebMessageFormat.Json, BodyStyle = WebMessageBodyStyle.Wrapped,  \n                     ResponseFormat = WebMessageFormat.Json)]  \n                 public int GetTrainingsQuantity(string code) {  \n                     var classQuery = new Select(UserConnection)  \n                         .Column(\"Id\")  \n                         .From(\"UsrClass\")  \n                         .Where(\"UsrCode\")  \n                         .IsEqual(Column.Parameter(code))  \n                     as Select;  \n                     Guid id = classQuery.ExecuteScalar <Guid> ();  \n                     if (id == Guid.Empty) {  \n                         return -1;  \n                     }  \n                     var countQuery = new Select(UserConnection)  \n                         .Column(Func.Count(\"Id\")).As(\"Count\")  \n                         .From(\"UsrGroupTraining\")  \n                         .Where(\"UsrClassId\")  \n                         .IsEqual(Column.Parameter(id))  \n                     as Select;  \n                     int result = countQuery.ExecuteScalar <int> ();  \n           \n                     return result;  \n                 }  \n             }  \n         }  \n           \n         \n\n  6. **Publish the schema**.\n\n\n\n\n## Modify the page source code​\n\nAdd a class page button that calls the web service and displays the dialog box that contains the number of group classes in the timetable.\n\n  1. [Go to the **Configuration** section](https://academy.creatio.com/documents?ver=8.3&id=15101&anchor=title-2093-2).\n\n  2. Select the \"TryItPackage\" [package](https://academy.creatio.com/documents?ver=8.3&id=15121) from the package list.\n\n  3. The Wizards added schemas of various types to the package. Filter schemas by the **Client module** type.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_Client_Module.png)\n\n  4. Double-click the `UsrClass1Page` schema to open it.\n\n  5. Add a new localizable string for the button name to the schema.\n\nClick the ![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/CreateClientSchema\\(7.17\\)/scr_add_button.png) button in the **Localizable strings** block of the properties panel and fill out the **localizable string properties** :\n\n     * Set **Code** to \"ServiceButtonCaption\".\n     * Set **Value** to \"Web service\".\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_LocalizableString.png)\n\n  6. Modify the source code.\n\nUsrClass1Page.js\n         \n         define(\"UsrClass1Page\", [\"ServiceHelper\", \"ProcessModuleUtilities\"], function(ServiceHelper, ProcessModuleUtilities) {  \n             return {  \n                 entitySchemaName: \"UsrClass\",  \n                 /* No changes. */  \n                 messages: {  \n                     // ...  \n                 },  \n           \n                 /* No changes. */  \n                 attributes: {  \n                     // ...  \n                 },  \n           \n                 modules: /**SCHEMA_MODULES*/ {} /**SCHEMA_MODULES*/ ,  \n           \n                 /* No changes. */  \n                 details: /**SCHEMA_DETAILS*/ {  \n                     // ...  \n                 } /**SCHEMA_DETAILS*/ ,  \n           \n                 businessRules: /**SCHEMA_BUSINESS_RULES*/ {} /**SCHEMA_BUSINESS_RULES*/ ,  \n           \n                 /* Add the new method to the existing methods. */  \n                 methods: {  \n           \n                     // ...  \n           \n                     /* The method that handles the button clicks. */  \n                     onGetServiceInfoClick: function() {  \n                         /* Retrieve the section code to pass as the incoming parameter of the service method. */  \n                         var code = this.get(\"UsrCode\");  \n                         var serviceData = {  \n                             code: code  \n                         };  \n                         /* Call the service method. */  \n                         ServiceHelper.callService(\"UsrClassService\", \"GetTrainingsQuantity\", function(response) {  \n                             var result = response.GetTrainingsQuantityResult;  \n                             /* Display the service method output in the dialog box. */  \n                             this.showInformationDialog(result);  \n                         }, serviceData, this);  \n                     }  \n                 },  \n                 dataModels: /**SCHEMA_DATA_MODELS*/ {} /**SCHEMA_DATA_MODELS*/ ,  \n           \n                 /* Display the button on the record page. */  \n                 diff: /**SCHEMA_DIFF*/ [  \n           \n                     // ...  \n                     /* Add the button element to the record page. */  \n                     {  \n                         \"operation\": \"insert\",  \n                         /* The parent element name. */  \n                         \"parentName\": \"ActionButtonsContainer\",  \n                         \"propertyName\": \"items\",  \n                         /* The element name. */  \n                         \"name\": \"GetServiceInfoButton\",  \n                         \"values\": {  \n                             /* Set the element type to button. */  \n                             itemType: Terrasoft.ViewItemType.BUTTON,  \n                             /* Retrieve the element caption from the localizable string. */  \n                             caption: {  \n                                 bindTo: \"Resources.Strings.ServiceButtonCaption\"  \n                             },  \n                             /* The method that handles the button clicks. */  \n                             click: {  \n                                 bindTo: \"onGetServiceInfoClick\"  \n                             },  \n                             enabled: true,  \n                             /* The button position on the page. */  \n                             \"layout\": {  \n                                 \"column\": 1,  \n                                 \"row\": 6,  \n                                 \"colSpan\": 2,  \n                                 \"rowSpan\": 1  \n                             }  \n                         }  \n                     },  \n           \n                 ] /**SCHEMA_DIFF*/  \n             };  \n           \n         });  \n           \n         \n\n  7. **Save the changes**.\n\n\n\n\nAs a result, we implemented the web service that returns the number of group classes.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_Step5_Result.png)\n\n* * *\n\n## See also​\n\n[Step 4. Implement the population of the timetable](https://academy.creatio.com/documents?ver=8.3&id=15015)\n\n  * Create a custom web service\n  * Modify the page source code\n  * See also\n\n\n",
  "analysis": {
    "word_count": 858,
    "key_concepts": ["page schema", "configuration", "section", "detail", "web service", "operation", "package"],
    "use_cases": [
      "building applications",
      "custom development",
      "API integration",
      "system administration",
      "user management"
    ],
    "related_topics": [],
    "difficulty": "intermediate",
    "ai_tags": [
      "creatio",
      "intermediate",
      "documentation",
      "section",
      "detail",
      "page schema",
      "web service",
      "configuration"
    ]
  },
  "ai_optimized": true,
  "processed_at": "2025-07-28T13:24:20.458999"
}
