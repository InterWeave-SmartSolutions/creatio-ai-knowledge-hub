{
  "id": 467,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/getting-started/first-app/develop-application/step-4-implement-the-population",
  "title": "4. Implement the population of the timetable | Creatio Academy",
  "category": "development",
  "description": "On the previous step, we added a check for the current daily class number matching the group gym number to the page.",
  "content": "Version: 8.3 On this page Level: beginner On the previous step , we added a check for the current daily class number matching the group gym number to the page. Now, implement the population of the group class timetable. Add a page action that inserts 4 new records into the timetable. To do this, create a business process that populates the database table with relevant data and returns a message to the page schema that the records were added successfully. Create a business process ​ Go to the Configuration section . Select the \"TryItPackage\" package from the package list. Click Add on the workspace toolbar and select the Business process configuration element type. Fill out the property fields as follows: Set Name to \"UsrAddTrainingsProcess.\" Set Code to \"UsrAddTrainingsProcess.\" Add the incoming parameters and parameters the process requires to the Parameters tab: Title Code Data type Direction Value ProcessSchemaPeriodicity ProcessSchemaPeriodicity Text (500 characters) Input NewDate NewDate Date/Time Bidirectional Number Number Integer Bidirectional 4 ProcessSchemaId ProcessSchemaId Unique identifier Input ProcessSchemaCoach ProcessSchemaCoach Unique identifier Input Add the following elements to the process working area: Exclusive gateway (OR) Formula Add data Script task Connect the elements as specified in the figure below. The process must run as follows: The \"Periodicity\" Exclusive gateway (OR) gateway checks the periodicity of the class to add to the timetable and branches the process on the next step depending on the periodicity. The Formula elements calculate the class date depending on the periodicity. The process writes the date to the NewDate process parameter. The Add data element writes the new group class data to the database table. The \"New loop formula\" Formula element calculates the number of remaining empty records. For this example, the process must populate and write 4 new records. The results must be written to the Number process parameter. The \"New loop\" Exclusive gateway (OR) gateway checks the value of the Number process parameter. If it is more than 0, the process repeats the previous steps. If it equals 0, the process moves to the next step. The Script task element publishes the message that the new group class records were added. Set up the business process elements. Periodicity Exclusive gateway (OR) . Daily Conditional flow : Set Condition to move down the flow to [#ProcessSchemaPeriodicity#]==\"Daily\" . Every 3 days Conditional flow : Set Condition to move down the flow to [#ProcessSchemaPeriodicity#]==\"Every 3 days\" . Weekly Conditional flow : Set Condition to move down the flow to [#ProcessSchemaPeriodicity#]==\"Weekly\" . Daily formula Formula : Set Which parameter to set the formula value to? to \"NewDate\". Set Formula value to DateTime.Now.AddDays(4-[#Number#]) . Every 3 days formula Formula : Set Which parameter to set the formula value to? to \"NewDate\". Set Formula value to DateTime.Now.AddDays((4-[#Number#])*3) . Weekly formula Formula : Set Which parameter to set the formula value to? to \"NewDate\". Set Formula value to DateTime.Now.AddDays((4-[#Number#])*7) . Add training Add data : Set Which object to add data to? to \"Group training\". Set What is the data adding mode? to \"Add one record\". Set Which column values to set? as follows: Object column Type of data to add Value [Class] Process parameter ProcessSchemaId [Training date] Process parameter NewDate [Training status] Lookup value Planned [Training time] Time selection 09:00 AM [Coach] Process parameter ProcessSchemaCoach New loop formula Formula : Set Which parameter to set the formula value to? to \"Number\". Set Formula value to [#Number#]-1 . New loop Exclusive gateway (OR) . One more record Conditional flow : Set Condition to move down the flow to [#Number#]>=1 . All records added Conditional flow : Set Condition to move down the flow to [#Number#]<1 . Sending a message Script task var userConnection = Get < UserConnection > ( \"UserConnection\" ) ; Terrasoft . Configuration . MsgChannelUtilities . PostMessage ( userConnection , \"AddingTrainings\" , \"\" ) ; return true ; Save the process. Create a replacing view model ​ Create a view model that replaces the ClientMessageBridge base schema to implement message passing between the process and the page module. The base schema implements the broadcasting of WebSocket messages to Creatio subscribers. Go to the Configuration section . Select the \"TryItPackage\" package from the package list. Click Add on the workspace toolbar and select the Replacing view model configuration type. Set the Parent object field to \"ClientMessageBridge\" (\"ClientMessageBridge\"). Creatio will populate the other fields. Add the source code in the Schema Designer. ClientMessageBridge.js define ( \"ClientMessageBridge\" , [ \"ConfigurationConstants\" ] , function ( ConfigurationConstants ) { return { /* The messages. */ messages : { /* The message name. */ AddingTrainings : { /* Set the message type to broadcast, do not specify the subscriber. */ mode : Terrasoft . MessageMode . BROADCAST , /* Set the message direction to publishing. */ direction : Terrasoft . MessageDirectionType . PUBLISH , } , } , methods : { /* Initialize the schema. */ init : function ( ) { /* Call the parent method. */ this . callParent ( arguments ) ; /* Add a new configuration object to the configuration object collection. */ this . addMessageConfig ( { /* The name of the message received via WebSocket. */ sender : \"AddingTrainings\" , /* Send the message with this name. */ messageName : \"AddingTrainings\" , } ) ; } , } , } ; } ) ; Save the changes . Modify the page source code ​ Add the class page action that adds new group classes to the \"Group trainings\" detail. Go to the Configuration section . Select the \"TryItPackage\" package from the package list. The Wizards added schemas of various types to the package. Filter schemas by the Client module type. Double-click the UsrClass1Page schema to open it. Add a new localizable string for the action name to the schema. Click the button in the Localizable strings block of the properties panel and fill out the localizable string properties : Set Code to \"AddTrainingsActionCaption\". Set Value to \"Add trainings\". Modify schema source code: UsrClass1Page.js define ( \"UsrClass1Page\" , [ \"ProcessModuleUtilities\" ] , function ( ProcessModuleUtilities ) { return { entitySchemaName : \"UsrClass\" , messages : { /* The message that calls the detail update. */ \"AddingTrainings\" : { \"mode\" : Terrasoft . MessageMode . BROADCAST , \"direction\" : Terrasoft . MessageDirectionType . SUBSCRIBE } } , details : /**SCHEMA_DETAILS*/ { // ... } /**SCHEMA_DETAILS*/ , /* Add new methods to the existing methods. */ methods : { // ... init : function ( ) { this . callParent ( arguments ) ; /* Subscribe to the message that calls the detail update. */ this . sandbox . subscribe ( \"AddingTrainings\" , this . updateTrainings , this ) ; } , /* Add the action to the action menu. */ getActions : function ( ) { var actionMenuItems = this . callParent ( arguments ) ; actionMenuItems . addItem ( this . getButtonMenuItem ( { \"Caption\" : { bindTo : \"Resources.Strings.AddTrainingsActionCaption\" } , /* Define the handler method for the action. */ \"Click\" : { bindTo : \"getBusinessProcessAddTrainings\" } , \"Enabled\" : true } ) ) ; return actionMenuItems ; } , /* Call the update of the record page detail. */ updateTrainings : function ( ) { this . updateDetail ( { /* The detail code from details section.*/ \"detail\" : \"UsrSchema12c4c6adDetail5a26acfb\" , \"reloadAll\" : true } ) ; } , /* The handler method for the new menu action. */ getBusinessProcessAddTrainings : function ( ) { /* Retrieve the incoming parameters the process requires. */ var id = this . get ( \"Id\" ) ; var periodicity = this . get ( \"UsrPeriodicity\" ) . displayValue ; var coach = this . get ( \"UsrCoach\" ) . value ; if ( ! periodicity ) { return ; } /* Create a configuration object for running the process. */ var args = { /* The name of the process you created on the previous steps. */ sysProcessName : \"UsrAddTrainingsProcess\" , /* The incoming process parameters. */ parameters : { ProcessSchemaId : id , ProcessSchemaPeriodicity : periodicity , ProcessSchemaCoach : coach } } ; /* Run the process. */ ProcessModuleUtilities . executeProcess ( args ) ; } , } , /* No changes. */ diff : /**SCHEMA_DIFF*/ [ // ... ] /**SCHEMA_DIFF*/ } ; } ) ; Save the changes . As a result, we implemented the population of the group class timetable. On the next step , implement the web service that provides the information about the number of classes in the timetable. See also ​ Step 3. Add page validation Step 5. Create a custom web service Create a business process Create a replacing view model Modify the page source code See also",
  "markdown": "Version: 8.3\n\nOn this page\n\nLevel: beginner\n\nOn the [previous step](https://academy.creatio.com/documents?ver=8.3&id=15014), we added a check for the current daily class number matching the group gym number to the page.\n\nNow, implement the population of the group class timetable. Add a page action that inserts 4 new records into the timetable.\n\nTo do this, create a [business process](https://academy.creatio.com/documents?ver=8.3&id=7003) that populates the database table with relevant data and returns a message to the page schema that the records were added successfully.\n\n## Create a business process​\n\n  1. [Go to the **Configuration** section](https://academy.creatio.com/documents?ver=8.3&id=15101&anchor=title-2093-2).\n\n  2. Select the \"TryItPackage\" [package](https://academy.creatio.com/documents?ver=8.3&id=15121) from the package list.\n\n  3. Click **Add** on the workspace toolbar and select the **Business process** configuration element type.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_Add_BusinessProcess.png)\n\n  4. **Fill out the property fields** as follows:\n\n     * Set **Name** to \"UsrAddTrainingsProcess.\"\n     * Set **Code** to \"UsrAddTrainingsProcess.\"\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_BusinessProcess_Settings.png)\n\n  5. Add the incoming parameters and parameters the process requires to the **Parameters** tab:\n\nTitle| Code| Data type| Direction| Value| `ProcessSchemaPeriodicity`| `ProcessSchemaPeriodicity`| Text (500 characters)| Input| | `NewDate`| `NewDate`| Date/Time| Bidirectional| | `Number`| `Number`| Integer| Bidirectional| 4| `ProcessSchemaId`| `ProcessSchemaId`| Unique identifier| Input| | `ProcessSchemaCoach`| `ProcessSchemaCoach`| Unique identifier| Input|   \n---|---|---|---|---  \n  \n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_BusinessProcess_Parameters.png)\n\n  6. Add the following elements to the process working area:\n\n     * **Exclusive gateway (OR)**\n     * **Formula**\n     * **Add data**\n     * **Script task**\n\nConnect the elements as specified in the figure below.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_BusinessProcess_Schema.png)\n\nThe process must run as follows:\n\n     * The \"Periodicity\" **Exclusive gateway (OR)** gateway checks the periodicity of the class to add to the timetable and branches the process on the next step depending on the periodicity.\n     * The **Formula** elements calculate the class date depending on the periodicity. The process writes the date to the `NewDate` process parameter.\n     * The **Add data** element writes the new group class data to the database table.\n     * The \"New loop formula\" **Formula** element calculates the number of remaining empty records. For this example, the process must populate and write 4 new records. The results must be written to the `Number` process parameter.\n     * The \"New loop\" **Exclusive gateway (OR)** gateway checks the value of the `Number` process parameter. If it is more than 0, the process repeats the previous steps. If it equals 0, the process moves to the next step.\n     * The **Script task** element publishes the message that the new group class records were added.\n  7. Set up the business process elements.\n\n**Periodicity Exclusive gateway (OR)**.\n\n     1. Daily **Conditional flow** :\n\n        * Set **Condition to move down the flow** to `[#ProcessSchemaPeriodicity#]==\"Daily\"`.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_BP_2.png)\n\n     2. Every 3 days **Conditional flow** :\n\n        * Set **Condition to move down the flow** to `[#ProcessSchemaPeriodicity#]==\"Every 3 days\"`.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_BP_3.png)\n\n     3. Weekly **Conditional flow** :\n\n        * Set **Condition to move down the flow** to `[#ProcessSchemaPeriodicity#]==\"Weekly\"`.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_BP_4.png)\n\n**Daily formula Formula** :\n\n     * Set **Which parameter to set the formula value to?** to \"NewDate\".\n     * Set **Formula value** to `DateTime.Now.AddDays(4-[#Number#])`.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_BP_5.png)\n\n**Every 3 days formula Formula** :\n\n     * Set **Which parameter to set the formula value to?** to \"NewDate\".\n     * Set **Formula value** to `DateTime.Now.AddDays((4-[#Number#])*3)`.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_BP_6.png)\n\n**Weekly formula Formula** :\n\n     * Set **Which parameter to set the formula value to?** to \"NewDate\".\n     * Set **Formula value** to `DateTime.Now.AddDays((4-[#Number#])*7)`.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_BP_6.png)\n\n**Add training Add data** :\n\n     * Set **Which object to add data to?** to \"Group training\".\n\n     * Set **What is the data adding mode?** to \"Add one record\".\n\n     * Set **Which column values to set?** as follows:\n\nObject column| Type of data to add| Value| `[Class]`| Process parameter| `ProcessSchemaId`| `[Training date]`| Process parameter| `NewDate`| `[Training status]`| Lookup value| `Planned`| `[Training time]`| Time selection| `09:00 AM`| `[Coach]`| Process parameter| `ProcessSchemaCoach`  \n---|---|---  \n  \n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_BP_7.png)\n\n**New loop formula Formula** :\n\n     * Set **Which parameter to set the formula value to?** to \"Number\".\n     * Set **Formula value** to `[#Number#]-1`.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_BP_8.png)\n\n**New loop Exclusive gateway (OR)**.\n\n     1. One more record **Conditional flow** :\n\n        * Set **Condition to move down the flow** to `[#Number#]>=1`.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_BP_9.png)\n\n     2. All records added **Conditional flow** :\n\n        * Set **Condition to move down the flow** to `[#Number#]<1`.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_BP_10.png)\n\nSending a message Script task\n    \n    var userConnection = Get<UserConnection>(\"UserConnection\");  \n    Terrasoft.Configuration.MsgChannelUtilities.PostMessage(  \n        userConnection,  \n        \"AddingTrainings\",  \n        \"\");  \n    return true;  \n    \n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_BP_11.png)\n\n  8. Save the process.\n\n\n\n\n## Create a replacing view model​\n\nCreate a view model that replaces the `ClientMessageBridge` base schema to implement message passing between the process and the page module. The base schema implements the broadcasting of WebSocket messages to Creatio subscribers.\n\n  1. [Go to the **Configuration** section](https://academy.creatio.com/documents?ver=8.3&id=15101&anchor=title-2093-2).\n\n  2. Select the \"TryItPackage\" [package](https://academy.creatio.com/documents?ver=8.3&id=15121) from the package list.\n\n  3. Click **Add** on the workspace toolbar and select the **Replacing view model** configuration type.\n\n  4. Set the **Parent object** field to \"ClientMessageBridge\" (\"ClientMessageBridge\"). Creatio will populate the other fields.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_ClientMessageBridge.png)\n\n  5. Add the source code in the Schema Designer.\n\nClientMessageBridge.js\n         \n         define(\"ClientMessageBridge\", [\"ConfigurationConstants\"], function (ConfigurationConstants) {  \n             return {  \n                 /* The messages. */  \n                 messages: {  \n                     /* The message name. */  \n                     AddingTrainings: {  \n                         /* Set the message type to broadcast, do not specify the subscriber. */  \n                         mode: Terrasoft.MessageMode.BROADCAST,  \n                         /* Set the message direction to publishing. */  \n                         direction: Terrasoft.MessageDirectionType.PUBLISH,  \n                     },  \n                 },  \n                 methods: {  \n                     /* Initialize the schema. */  \n                     init: function () {  \n                         /* Call the parent method. */  \n                         this.callParent(arguments);  \n                         /* Add a new configuration object to the configuration object collection. */  \n                         this.addMessageConfig({  \n                             /* The name of the message received via WebSocket. */  \n                             sender: \"AddingTrainings\",  \n                             /* Send the message with this name. */  \n                             messageName: \"AddingTrainings\",  \n                         });  \n                     },  \n                 },  \n             };  \n         });  \n           \n         \n\n  6. **Save the changes**.\n\n\n\n\n## Modify the page source code​\n\nAdd the class page action that adds new group classes to the \"Group trainings\" detail.\n\n  1. [Go to the **Configuration** section](https://academy.creatio.com/documents?ver=8.3&id=15101&anchor=title-2093-2).\n\n  2. Select the \"TryItPackage\" [package](https://academy.creatio.com/documents?ver=8.3&id=15121) from the package list.\n\n  3. The Wizards added schemas of various types to the package. Filter schemas by the **Client module** type.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_Client_Module.png)\n\n  4. Double-click the `UsrClass1Page` schema to open it.\n\n  5. Add a new localizable string for the action name to the schema.\n\nClick the ![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/CreateClientSchema\\(7.17\\)/scr_add_button.png) button in the **Localizable strings** block of the properties panel and fill out the **localizable string properties** :\n\n     * Set **Code** to \"AddTrainingsActionCaption\".\n     * Set **Value** to \"Add trainings\".\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_LocalizableStringAction.png)\n\n  6. Modify schema source code:\n\nUsrClass1Page.js\n         \n         define(\"UsrClass1Page\", [\"ProcessModuleUtilities\"], function(ProcessModuleUtilities) {  \n             return {  \n                 entitySchemaName: \"UsrClass\",  \n                 messages: {  \n                     /* The message that calls the detail update. */  \n                     \"AddingTrainings\": {  \n                         \"mode\": Terrasoft.MessageMode.BROADCAST,  \n                         \"direction\": Terrasoft.MessageDirectionType.SUBSCRIBE  \n                     }  \n                 },  \n                 details: /**SCHEMA_DETAILS*/{  \n                     // ...  \n                 }/**SCHEMA_DETAILS*/,  \n                 /* Add new methods to the existing methods. */  \n                 methods: {  \n           \n                     // ...  \n           \n                     init: function() {  \n                         this.callParent(arguments);  \n                         /* Subscribe to the message that calls the detail update. */  \n                         this.sandbox.subscribe(\"AddingTrainings\", this.updateTrainings, this);  \n                     },  \n                     /* Add the action to the action menu. */  \n                     getActions: function() {  \n                         var actionMenuItems = this.callParent(arguments);  \n                         actionMenuItems.addItem(this.getButtonMenuItem({  \n                             \"Caption\": {bindTo: \"Resources.Strings.AddTrainingsActionCaption\"},  \n                             /* Define the handler method for the action. */  \n                             \"Click\": {bindTo: \"getBusinessProcessAddTrainings\"},  \n                             \"Enabled\": true  \n                         }));  \n                         return actionMenuItems;  \n                     },  \n                     /* Call the update of the record page detail. */  \n                     updateTrainings: function() {  \n                         this.updateDetail({  \n                             /* The detail code from details section.*/  \n                             \"detail\": \"UsrSchema12c4c6adDetail5a26acfb\",  \n                             \"reloadAll\": true  \n                         });  \n                     },  \n                     /* The handler method for the new menu action. */  \n                     getBusinessProcessAddTrainings: function() {  \n                         /* Retrieve the incoming parameters the process requires. */  \n                         var id = this.get(\"Id\");  \n                         var periodicity = this.get(\"UsrPeriodicity\").displayValue;  \n                         var coach = this.get(\"UsrCoach\").value;  \n                         if (!periodicity) {  \n                             return;  \n                         }  \n                         /* Create a configuration object for running the process. */  \n                         var args = {  \n                             /* The name of the process you created on the previous steps. */  \n                             sysProcessName: \"UsrAddTrainingsProcess\",  \n                             /* The incoming process parameters. */  \n                             parameters: {  \n                                 ProcessSchemaId: id,  \n                                 ProcessSchemaPeriodicity: periodicity,  \n                                 ProcessSchemaCoach: coach  \n                             }  \n                         };  \n                         /* Run the process. */  \n                         ProcessModuleUtilities.executeProcess(args);  \n                     },  \n                 },  \n                 /* No changes. */  \n                 diff: /**SCHEMA_DIFF*/[  \n           \n                 // ...  \n           \n                 ]/**SCHEMA_DIFF*/  \n             };  \n         });  \n         \n\n  7. **Save the changes**.\n\n\n\n\nAs a result, we implemented the population of the group class timetable. On the [next step](https://academy.creatio.com/documents?ver=8.3&id=15106), implement the web service that provides the information about the number of classes in the timetable.\n\n* * *\n\n## See also​\n\n[Step 3. Add page validation](https://academy.creatio.com/documents?ver=8.3&id=15014)\n\n[Step 5. Create a custom web service](https://academy.creatio.com/documents?ver=8.3&id=15016)\n\n  * Create a business process\n  * Create a replacing view model\n  * Modify the page source code\n  * See also\n\n\n",
  "analysis": {
    "word_count": 1443,
    "key_concepts": [
      "business process",
      "page schema",
      "configuration",
      "section",
      "detail",
      "lookup",
      "web service",
      "database",
      "package"
    ],
    "use_cases": [
      "building applications",
      "custom development",
      "API integration",
      "system administration",
      "user management"
    ],
    "related_topics": ["automation", "workflow", "process design", "bpm"],
    "difficulty": "intermediate",
    "ai_tags": [
      "creatio",
      "intermediate",
      "documentation",
      "section",
      "detail",
      "page schema",
      "business process",
      "configuration"
    ]
  },
  "ai_optimized": true,
  "processed_at": "2025-07-28T13:23:53.032588"
}
