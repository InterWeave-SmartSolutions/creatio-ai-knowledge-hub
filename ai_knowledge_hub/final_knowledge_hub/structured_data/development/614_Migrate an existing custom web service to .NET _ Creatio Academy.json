{
  "id": 614,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/back-end-development/web-services/migrating",
  "title": "Migrate an existing custom web service to .NET | Creatio Academy",
  "category": "development",
  "description": "You can migrate a .NET Framework custom web service that retrieves the scope without inheriting the Terrasoft.Web.Common.BaseService base class to .NET. To do this, adapt the custom web service.",
  "content": "Version: 8.3 Level: intermediate You can migrate a .NET Framework custom web service that retrieves the scope without inheriting the Terrasoft.Web.Common.BaseService base class to .NET. To do this, adapt the custom web service . The HttpContextAccessor property of the Terrasoft.Web.Common.BaseService provides unified access to context ( HttpContext ) both in .NET Framework and .NET. The UserConnection and AppConnection properties let you retrieve the user connection object and the connection object on the application level. This lets you omit the HttpContext.Current property of the System.Web library. Example that uses the properties of the Terrasoft.Web.Common.BaseService parent class namespace Terrasoft . Configuration . UsrCustomNamespace { using Terrasoft . Web . Common ; [ ServiceContract ] [ AspNetCompatibilityRequirements ( RequirementsMode = AspNetCompatibilityRequirementsMode . Required ) ] public class UsrCustomConfigurationService : BaseService { /* The web service method. */ [ OperationContract ] [ WebInvoke ( Method = \"GET\" , RequestFormat = WebMessageFormat . Json , BodyStyle = WebMessageBodyStyle . Wrapped , ResponseFormat = WebMessageFormat . Json ) ] public void SomeMethod ( ) { .. . /* UserConnection is the BaseService property. */ var currentUser = UserConnection . CurrentUser ; /* AppConnection is the BaseService property. */ var sdkHelpUrl = AppConnection . SdkHelpUrl ; /* HttpContextAccessor is the BaseService property. */ var httpContext = HttpContextAccessor . GetInstance ( ) ; .. . } } } Creatio supports the following scope retrieval options for web services developed without inheriting the Terrasoft.Web.Common.BaseService class: via the IHttpContextAccessor interface registered in DI ( ClassFactory ). This option lets you view the explicit class dependencies for thorough automated testing and debugging. Learn more about using the class factory: Replacing class factory . via the HttpContext.Current static property . Add the Terrasoft.Web.Http.Abstractions namespace to the source code using the using directive. The HttpContext.Current static property implements unified access to HttpContext . To adapt the web service code to .NET, replace the System.Web namespace using Terrasoft.Web.Http.Abstractions . Important Do not use specific access implementations to request context peculiar to .NET Framework (the System.Web library) or .NET (the Microsoft.AspNetCore.Http namespace) in the configuration. Example that adapts the web service to .NET namespace Terrasoft . Configuration . UsrCustomNamespace { /* Use instead of System.Web. */ using Terrasoft . Web . Http . Abstractions ; [ ServiceContract ] [ AspNetCompatibilityRequirements ( RequirementsMode = AspNetCompatibilityRequirementsMode . Required ) ] public class UsrCustomConfigurationService { /* The web service method. */ [ OperationContract ] [ WebInvoke ( Method = \"GET\" , RequestFormat = WebMessageFormat . Json , BodyStyle = WebMessageBodyStyle . Wrapped , ResponseFormat = WebMessageFormat . Json ) ] public void SomeMethod ( ) { .. . var httpContext = HttpContext . Current ; .. . } } }",
  "markdown": "Version: 8.3\n\nLevel: intermediate\n\nYou can migrate a .NET Framework custom web service that retrieves the scope without inheriting the `Terrasoft.Web.Common.BaseService` base class to .NET. To do this, **adapt the custom web service**.\n\nThe `HttpContextAccessor` property of the `Terrasoft.Web.Common.BaseService` provides unified access to context (`HttpContext`) both in .NET Framework and .NET. The `UserConnection` and `AppConnection` properties let you retrieve the user connection object and the connection object on the application level. This lets you omit the `HttpContext.Current` property of the `System.Web` library.\n\nExample that uses the properties of the Terrasoft.Web.Common.BaseService parent class\n    \n    \n    namespace Terrasoft.Configuration.UsrCustomNamespace {  \n        using Terrasoft.Web.Common;  \n      \n        [ServiceContract]  \n        [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]  \n        public class UsrCustomConfigurationService: BaseService {  \n            /* The web service method. */  \n            [OperationContract]  \n            [WebInvoke(Method = \"GET\", RequestFormat = WebMessageFormat.Json, BodyStyle = WebMessageBodyStyle.Wrapped,  \n                ResponseFormat = WebMessageFormat.Json)]  \n            public void SomeMethod() {  \n                ...  \n                /* UserConnection is the BaseService property. */  \n                var currentUser = UserConnection.CurrentUser;  \n                /* AppConnection is the BaseService property. */  \n                var sdkHelpUrl = AppConnection.SdkHelpUrl;  \n                /* HttpContextAccessor is the BaseService property. */  \n                var httpContext = HttpContextAccessor.GetInstance();  \n                ...  \n            }  \n        }  \n      \n    }  \n      \n    \n\nCreatio supports the following **scope retrieval options** for web services developed without inheriting the `Terrasoft.Web.Common.BaseService` class:\n\n  * via the `IHttpContextAccessor` **interface** registered in `DI` (`ClassFactory`).\n\nThis option lets you view the explicit class dependencies for thorough automated testing and debugging. Learn more about using the class factory: [Replacing class factory](https://academy.creatio.com/documents?ver=8.3&id=15221).\n\n  * via the `HttpContext.Current` **static property**.\n\nAdd the `Terrasoft.Web.Http.Abstractions` namespace to the source code using the `using` directive. The `HttpContext.Current` static property implements unified access to `HttpContext`. To adapt the web service code to .NET, replace the `System.Web` namespace using `Terrasoft.Web.Http.Abstractions`.\n\n\n\n\nImportant\n\nDo not use specific access implementations to request context peculiar to .NET Framework (the `System.Web` library) or .NET (the `Microsoft.AspNetCore.Http` namespace) in the configuration.\n\nExample that adapts the web service to .NET\n    \n    \n    namespace Terrasoft.Configuration.UsrCustomNamespace {  \n        /* Use instead of System.Web. */  \n        using Terrasoft.Web.Http.Abstractions;  \n      \n        [ServiceContract]  \n        [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]  \n        public class UsrCustomConfigurationService {  \n            /* The web service method. */  \n            [OperationContract]  \n            [WebInvoke(Method = \"GET\", RequestFormat = WebMessageFormat.Json, BodyStyle = WebMessageBodyStyle.Wrapped,  \n                ResponseFormat = WebMessageFormat.Json)]  \n            public void SomeMethod() {  \n                ...  \n                var httpContext = HttpContext.Current;  \n                ...  \n            }  \n        }  \n    }  \n    \n",
  "analysis": {
    "word_count": 442,
    "key_concepts": ["configuration", "web service", "operation"],
    "use_cases": [
      "building applications",
      "custom development",
      "API integration",
      "system administration",
      "user management"
    ],
    "related_topics": [],
    "difficulty": "intermediate",
    "ai_tags": ["creatio", "intermediate", "operation", "documentation", "configuration", "web service"]
  },
  "ai_optimized": true,
  "processed_at": "2025-07-28T13:26:51.320146"
}
