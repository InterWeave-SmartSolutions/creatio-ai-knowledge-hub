{
  "id": 343,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/platform-customization/freedom-ui/close-the-websocket",
  "title": "Close the WebSocket when destroying the View of the model | Creatio Academy",
  "category": "development",
  "description": "To close the WebSocket when destroying the View of the model, add a custom implementation of the crt.HandleViewModelDestroyRequest system request handler to the handlers schema section. The handler is executed when the View of the model is destroyed (for example, when you open another page). Designed to destroy resources. We do not recommend writing asynchronous code in the handler (server calls, timeouts, etc.) except for reading the value of attributes.",
  "content": "Version: 8.3 Level: intermediate To close the WebSocket when destroying the View of the model , add a custom implementation of the crt.HandleViewModelDestroyRequest system request handler to the handlers schema section. The handler is executed when the View of the model is destroyed (for example, when you open another page). Designed to destroy resources. We do not recommend writing asynchronous code in the handler (server calls, timeouts, etc.) except for reading the value of attributes. View an example of the crt.HandleViewModelDestroyRequest request handler that closes the custom SomeWebSocket WebSocket below. Freedom UI cannot destroy a View model and loads the last page state when you re-open a previously loaded module. Use the crt.HandleViewModelPauseRequest handler called every time you open a different page. The crt.HandleViewModelDestroyRequest and crt.HandleViewModelPauseRequest handlers use the same data. handlers schema section handlers : /**SCHEMA_HANDLERS*/ [ { request : \"crt.HandleViewModelPauseRequest\" , /* Custom implementation of a system request handler. */ handler : async ( request , next ) => { /* Close the SomeWebSocket WebSocket */ ( await request . $context . SomeWebSocket ) . close ( ) ; /* Call the next handler if it exists and return its result. */ return next ?. handle ( request ) ; } } ] /**SCHEMA_HANDLERS*/ ,",
  "markdown": "Version: 8.3\n\nLevel: intermediate\n\nTo **close the WebSocket when destroying** the `View` of the **model** , add a custom implementation of the `crt.HandleViewModelDestroyRequest` system request handler to the `handlers` schema section. The handler is executed when the `View` of the model is destroyed (for example, when you open another page). Designed to destroy resources. We do not recommend writing asynchronous code in the handler (server calls, timeouts, etc.) except for reading the value of attributes.\n\nView an example of the `crt.HandleViewModelDestroyRequest` request handler that closes the custom `SomeWebSocket` WebSocket below.\n\nFreedom UI cannot destroy a `View` model and loads the last page state when you re-open a previously loaded module. Use the `crt.HandleViewModelPauseRequest` handler called every time you open a different page. The `crt.HandleViewModelDestroyRequest` and `crt.HandleViewModelPauseRequest` handlers use the same data.\n\nhandlers schema section\n    \n    \n    handlers: /**SCHEMA_HANDLERS*/[  \n        {  \n            request: \"crt.HandleViewModelPauseRequest\",  \n            /* Custom implementation of a system request handler. */  \n            handler: async (request, next) => {  \n                /* Close the SomeWebSocket WebSocket */  \n                (await request.$context.SomeWebSocket).close();  \n                /* Call the next handler if it exists and return its result. */  \n                return next?.handle(request);  \n            }  \n        }  \n    ]/**SCHEMA_HANDLERS*/,  \n    \n",
  "analysis": {
    "word_count": 207,
    "key_concepts": ["freedom ui", "section"],
    "use_cases": [
      "building applications",
      "custom development",
      "API integration",
      "system administration",
      "user management"
    ],
    "related_topics": ["customization", "layout", "ui design", "page schema"],
    "difficulty": "intermediate",
    "ai_tags": ["creatio", "intermediate", "freedom ui", "documentation", "section"]
  },
  "ai_optimized": true,
  "processed_at": "2025-07-28T13:21:18.056606"
}
