{
  "id": 357,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/8.0/back-end-development/objects-business-logic",
  "title": "Configure object events | Creatio Academy",
  "category": "development",
  "description": "You can configure object events (saving, editing, deleting, etc.) in the following ways:",
  "content": "This is documentation for Creatio 8.0 . For up-to-date documentation, see the latest version ( 8.3 ). Version: 8.0 On this page Level: advanced You can configure object events (saving, editing, deleting, etc.) in the following ways : In the Creatio UI using event subprocesses of the Object Designer. In the Creatio back-end using development tools. Mechanism of the Entity event layer ​ The purpose of the Entity event layer is to configure object event handlers in the Creatio back-end using development tools. Creatio supports only those handlers that are defined in the main configuration and file content assemblies. Handlers from external assemblies are not supported. Important Creatio triggers the mechanism of the Entity event layer after executing the object event subprocesses. The event layer can handle the following object events : OnDeleted after a record is deleted. OnInserted after a record is added. OnInserting before a record is added. OnDeleting before a record is deleted. OnSaved after a record is saved. OnSaving before a record is saved. OnUpdated after a record is updated. OnUpdating before a record is updated. The following components implement the mechanism of the Entity event layer: BaseEntityEventListener . Provides the handler methods of entity events. EntityAfterEventArgs . Provides the properties with the arguments of the handler method that is executed after the event triggers. The EntityBeforeEventArgs class. Provides the properties with the arguments of the handler method that is executed before the event fires. The EntityEventListener attribute. Registers the listener. BaseEntityEventListener class ​ The purpose of the Terrasoft.Core.Entities.Events.BaseEntityEventListener class is to provide the handler methods of various entity events. View the handler methods in the table below. Handler methods of event entities Handler method Method description OnDeleted(object sender, EntityAfterEventArgs e) Handles events after a record is deleted. OnDeleting(object sender, EntityBeforeEventArgs e) Handles events before a record is deleted. OnInserted(object sender, EntityAfterEventArgs e) Handles events after a record is added. OnInserting(object sender, EntityBeforeEventArgs e) Handles events before a record is added. OnSaved(object sender, EntityAfterEventArgs e) Handles events after a record is saved. OnSaving(object sender, EntityBeforeEventArgs e) Handles events before a record is saved. OnUpdated(object sender, EntityAfterEventArgs e) Handles events after a record is updated. OnUpdating(object sender, EntityBeforeEventArgs e) Handles events before a record is updated. The methods of the BaseEntityEventListener class have the following parameters : sender . The link to the object instance that generates the event. e . The event arguments. Can take on the EntityAfterEventArgs (after the event) or EntityBeforeEventArgs (before the event) value. View the call sequence of the event handler methods in the table below. Call sequence of the event handler methods Create an object record Edit an object Delete an object OnSaving() OnInserting() OnInserted() OnSaved() OnSaving() OnUpdating() OnUpdated() OnSaved() OnDeleting() OnDeleted() Event handlers retrieve the instance of UserConnection from the sender parameter. View an example that retrieves UserConnection below. Example that retrieves UserConnection [ EntityEventListener ( SchemaName = \"Activity\" ) ] public class ActivityEntityEventListener : BaseEntityEventListener { public override void OnSaved ( object sender , EntityAfterEventArgs e ) { base . OnSaved ( sender , e ) ; var entity = ( Entity ) sender ; var userConnection = entity . UserConnection ; } } EntityAfterEventArgs class ​ The purpose of the Terrasoft.Core.Entities.EntityAfterEventArgs class is to provide properties with the arguments of the handler method that is executed after the event fires. The EntityAfterEventArgs class has the following properties : ModifiedColumnValues . A collection of the modified columns. PrimaryColumnValue . The record ID. EntityBeforeEventArgs class ​ The purpose of the Terrasoft.Core.Entities.EntityBeforeEventArgs class is to provide properties with the arguments of the handler method that is executed before the event triggers. The EntityBeforeEventArgs class has the following properties : KeyValue . The record ID. IsCanceled . Enables canceling the further event execution. AdditionalCondition . Enables providing additional description of the entity filter conditions before the action. EntityEventListener attribute ​ The purpose of the EntityEventListener attribute is to register a listener. The listener can be linked to all objects ( IsGlobal = true ) or to a specific object (for example, SchemaName = \"Contact\" ). You can tag one listener class with many attributes to define a custom set of listened entities. Set up the object event handler ​ To set up the event handler for an object that inherits from the Entity class: Create a class that inherits from the BaseEntityEventListener class. Decorate the class with the [EntityEventListener] attribute and specify the name of the entity whose event subscription to execute. Override the event handler method. Example that overrides the event handler method /* Event listener of the \"Activity\" entity. */ public class ActivityEntityEventListener : BaseEntityEventListener { [ EntityEventListener ( SchemaName = \"Activity\" ) ] /* Override the handler of the entity save event. */ public override void OnSaved ( object sender , EntityAfterEventArgs e ) { /* Call the parent implementation. */ base . OnSaved ( sender , e ) ; /* Additional actions. ... */ } } Asynchronous behavior in the Entity event layer ​ The additional business logic of an object is time-consuming and executed sequentially. This hurts Creatio's front-end performance, for example, when an entity is saved or edited. The mechanism of asynchronous operation execution based on the Entity event layer solves this problem. The following components implement asynchronous behavior in the Entity event layer: The IEntityEventAsyncExecutor interface. Declares the method that executes operations asynchronously. The IEntityEventAsyncOperation interface. Declares the method that launches an asynchronous operation. The EntityEventAsyncOperationArgs class. Instances of the class serve as arguments to pass to an asynchronous operation. IEntityEventAsyncExecutor interface ​ The purpose of the Terrasoft.Core.Entities.AsyncOperations.Interfaces.IEntityEventAsyncExecutor interface is to declare the method that executes operations asynchronously. ExecuteAsync<TOperation>(object parameters) is a typed method that launches an operation with parameters. TOperation is a configuration class that implements the IEntityEventAsyncOperation interface. IEntityEventAsyncOperation interface ​ The purpose of the Terrasoft.Core.Entities.AsyncOperations.Interfaces.IEntityEventAsyncOperation interface is to declare the method that launches an asynchronous operation. Execute(UserConnection userConnection, EntityEventAsyncOperationArgs arguments) is the launch method. Important We do not recommend describing the change logic of the primary entity in the class that implements the IEntityEventAsyncOperation interface. This can lead to incorrect data creation. We also do not recommend executing lightweight operations (for example, calculating a field value) since creating a separate thread can take more time than executing the operation itself. EntityEventAsyncOperationArgs class ​ The purpose of the Terrasoft.Core.Entities.AsyncOperations.EntityEventAsyncOperationArgs class is to provide its instances as arguments to pass to an asynchronous operation. The EntityEventAsyncOperationArgs class includes the following properties : EntityId . The record ID. EntitySchemaName . The name of the schema. EntityColumnValues . The glossary of current column values of an entity. OldEntityColumnValues . The glossary of old column values of an entity. Implement asynchronous behavior in the event layer ​ To implement asynchronous behavior in the event layer : Create a class that implements the IEntityEventAsyncOperation interface. Implement additional logic that can be run asynchronously in the class. View an example of a class that implements additional logic below. Example of a class that implements additional logic /* The class that implements asynchronous operation calls. */ public class DoSomethingActivityAsyncOperation : IEntityEventAsyncOperation { /* The start method of the class. */ public void Execute ( UserConnection userConnection , EntityEventAsyncOperationArgs arguments ) { /* ... */ } } Use a class factory in the handler method of the activity object listener. The class factory serves the following purposes : Retrieve the instance of the class that implements the IEntityEventAsyncExecutor interface. Prepare the parameters. Pass the class that implements additional logic for execution. View an example that calls an asynchronous operation in the event layer below. Example that calls an asynchronous operation in the event layer [ EntityEventListener ( SchemaName = \"Activity\" ) ] public class ActivityEntityEventListener : BaseEntityEventListener { /* The handler method of the event after the entity is saved. */ public override void OnSaved ( object sender , EntityAfterEventArgs e ) { base . OnSaved ( sender , e ) ; /* The instance of the class to execute asynchronously. */ var asyncExecutor = ClassFactory . Get < IEntityEventAsyncExecutor > ( new ConstructorArgument ( \"userConnection\" , ( ( Entity ) sender ) . UserConnection ) ) ; /* The parameters to execute asynchronously. */ var operationArgs = new EntityEventAsyncOperationArgs ( ( Entity ) sender , e ) ; /* Asynchronous execution. */ asyncExecutor . ExecuteAsync < DoSomethingActivityAsyncOperation > ( operationArgs ) ; } } Mechanism of the Entity event layer BaseEntityEventListener class EntityAfterEventArgs class EntityBeforeEventArgs class EntityEventListener attribute Set up the object event handler Asynchronous behavior in the Entity event layer IEntityEventAsyncExecutor interface IEntityEventAsyncOperation interface EntityEventAsyncOperationArgs class Implement asynchronous behavior in the event layer",
  "markdown": "This is documentation for Creatio **8.0**.\n\nFor up-to-date documentation, see the **[latest version](/docs/8.x/dev/development-on-creatio-platform/back-end-development/objects-business-logic)** (8.3).\n\nVersion: 8.0\n\nOn this page\n\nLevel: advanced\n\nYou can configure object events (saving, editing, deleting, etc.) in the following **ways** :\n\n  * In the Creatio UI using event subprocesses of the Object Designer.\n  * In the Creatio back-end using development tools.\n\n\n\n## Mechanism of the Entity event layer​\n\nThe **purpose** of the `Entity` event layer is to configure object event handlers in the Creatio back-end using development tools. Creatio supports only those handlers that are defined in the main configuration and file content assemblies. Handlers from external assemblies are not supported.\n\nImportant\n\nCreatio triggers the mechanism of the `Entity` event layer after executing the object event subprocesses.\n\nThe event layer can handle the following **object events** :\n\n  * `OnDeleted` after a record is deleted.\n  * `OnInserted` after a record is added.\n  * `OnInserting` before a record is added.\n  * `OnDeleting` before a record is deleted.\n  * `OnSaved` after a record is saved.\n  * `OnSaving` before a record is saved.\n  * `OnUpdated` after a record is updated.\n  * `OnUpdating` before a record is updated.\n\n\n\nThe following **components** implement the mechanism of the `Entity` event layer:\n\n  * `BaseEntityEventListener`. Provides the handler methods of entity events.\n  * `EntityAfterEventArgs`. Provides the properties with the arguments of the handler method that is executed after the event triggers.\n  * The `EntityBeforeEventArgs` class. Provides the properties with the arguments of the handler method that is executed before the event fires.\n  * The `EntityEventListener` attribute. Registers the listener.\n\n\n\n### BaseEntityEventListener class​\n\nThe purpose of the `Terrasoft.Core.Entities.Events.BaseEntityEventListener` class is to provide the handler methods of various entity events. View the handler methods in the table below.\n\nHandler methods of event entities\n\nHandler method| Method description| `OnDeleted(object sender, EntityAfterEventArgs e)`| Handles events after a record is deleted.| `OnDeleting(object sender, EntityBeforeEventArgs e)`| Handles events before a record is deleted.| `OnInserted(object sender, EntityAfterEventArgs e)`| Handles events after a record is added.| `OnInserting(object sender, EntityBeforeEventArgs e)`| Handles events before a record is added.| `OnSaved(object sender, EntityAfterEventArgs e)`| Handles events after a record is saved.| `OnSaving(object sender, EntityBeforeEventArgs e)`| Handles events before a record is saved.| `OnUpdated(object sender, EntityAfterEventArgs e)`| Handles events after a record is updated.| `OnUpdating(object sender, EntityBeforeEventArgs e)`| Handles events before a record is updated.  \n---|---  \n  \nThe methods of the `BaseEntityEventListener` class have the following **parameters** :\n\n  * `sender`. The link to the object instance that generates the event.\n  * `e`. The event arguments. Can take on the `EntityAfterEventArgs` (after the event) or `EntityBeforeEventArgs` (before the event) value.\n\n\n\nView the call sequence of the event handler methods in the table below.\n\nCall sequence of the event handler methods\n\nCreate an object record| Edit an object| Delete an object| `OnSaving()` `OnInserting()` `OnInserted()` `OnSaved()`| `OnSaving()` `OnUpdating()` `OnUpdated()` `OnSaved()`| `OnDeleting()` `OnDeleted()`  \n---|---|---  \n  \nEvent handlers retrieve the instance of `UserConnection` from the `sender` parameter. View an example that retrieves `UserConnection` below.\n\nExample that retrieves UserConnection\n    \n    \n    [EntityEventListener(SchemaName = \"Activity\")]  \n    public class ActivityEntityEventListener: BaseEntityEventListener {  \n        public override void OnSaved(object sender, EntityAfterEventArgs e) {  \n            base.OnSaved(sender, e);  \n            var entity = (Entity) sender;  \n            var userConnection = entity.UserConnection;  \n        }  \n    }  \n    \n\n### EntityAfterEventArgs class​\n\nThe **purpose** of the `Terrasoft.Core.Entities.EntityAfterEventArgs` class is to provide properties with the arguments of the handler method that is executed after the event fires.\n\nThe `EntityAfterEventArgs` class has the following **properties** :\n\n  * `ModifiedColumnValues`. A collection of the modified columns.\n  * `PrimaryColumnValue`. The record ID.\n\n\n\n### EntityBeforeEventArgs class​\n\nThe **purpose** of the `Terrasoft.Core.Entities.EntityBeforeEventArgs` class is to provide properties with the arguments of the handler method that is executed before the event triggers.\n\nThe `EntityBeforeEventArgs` class has the following **properties** :\n\n  * `KeyValue`. The record ID.\n  * `IsCanceled`. Enables canceling the further event execution.\n  * `AdditionalCondition`. Enables providing additional description of the entity filter conditions before the action.\n\n\n\n### EntityEventListener attribute​\n\nThe **purpose** of the `EntityEventListener` attribute is to register a listener. The listener can be linked to all objects (`IsGlobal = true`) or to a specific object (for example, `SchemaName = \"Contact\"`). You can tag one listener class with many attributes to define a custom set of listened entities.\n\n### Set up the object event handler​\n\nTo **set up** the event handler for an object that inherits from the `Entity` class:\n\n  1. Create a class that inherits from the `BaseEntityEventListener` class.\n  2. Decorate the class with the `[EntityEventListener]` attribute and specify the name of the entity whose event subscription to execute.\n  3. Override the event handler method.\n\n\n\nExample that overrides the event handler method\n    \n    \n    /* Event listener of the \"Activity\" entity. */  \n    public class ActivityEntityEventListener: BaseEntityEventListener {  \n        [EntityEventListener(SchemaName = \"Activity\")]  \n        /* Override the handler of the entity save event. */  \n        public override void OnSaved(object sender, EntityAfterEventArgs e) {  \n            /* Call the parent implementation. */  \n            base.OnSaved(sender, e);  \n            /* Additional actions.  \n            ... */  \n        }  \n    }  \n    \n\n## Asynchronous behavior in the Entity event layer​\n\nThe additional business logic of an object is time-consuming and executed sequentially. This hurts Creatio's front-end performance, for example, when an entity is saved or edited. The **mechanism of asynchronous operation execution** based on the `Entity` event layer solves this problem.\n\nThe following **components** implement asynchronous behavior in the `Entity` event layer:\n\n  * The `IEntityEventAsyncExecutor` interface. Declares the method that executes operations asynchronously.\n  * The `IEntityEventAsyncOperation` interface. Declares the method that launches an asynchronous operation.\n  * The `EntityEventAsyncOperationArgs` class. Instances of the class serve as arguments to pass to an asynchronous operation.\n\n\n\n### IEntityEventAsyncExecutor interface​\n\nThe **purpose** of the `Terrasoft.Core.Entities.AsyncOperations.Interfaces.IEntityEventAsyncExecutor` interface is to declare the method that executes operations asynchronously. `ExecuteAsync<TOperation>(object parameters)` is a typed method that launches an operation with parameters. `TOperation` is a configuration class that implements the `IEntityEventAsyncOperation` interface.\n\n### IEntityEventAsyncOperation interface​\n\nThe **purpose** of the `Terrasoft.Core.Entities.AsyncOperations.Interfaces.IEntityEventAsyncOperation` interface is to declare the method that launches an asynchronous operation. `Execute(UserConnection userConnection, EntityEventAsyncOperationArgs arguments)` is the launch method.\n\nImportant\n\nWe do not recommend describing the change logic of the primary entity in the class that implements the `IEntityEventAsyncOperation` interface. This can lead to incorrect data creation. We also do not recommend executing lightweight operations (for example, calculating a field value) since creating a separate thread can take more time than executing the operation itself.\n\n### EntityEventAsyncOperationArgs class​\n\nThe **purpose** of the `Terrasoft.Core.Entities.AsyncOperations.EntityEventAsyncOperationArgs` class is to provide its instances as arguments to pass to an asynchronous operation.\n\nThe `EntityEventAsyncOperationArgs` class includes the following **properties** :\n\n  * `EntityId`. The record ID.\n  * `EntitySchemaName`. The name of the schema.\n  * `EntityColumnValues`. The glossary of current column values of an entity.\n  * `OldEntityColumnValues`. The glossary of old column values of an entity.\n\n\n\n### Implement asynchronous behavior in the event layer​\n\nTo **implement asynchronous behavior in the event layer** :\n\n  1. Create a class that implements the `IEntityEventAsyncOperation` interface. Implement additional logic that can be run asynchronously in the class.\n\nView an example of a class that implements additional logic below.\n\nExample of a class that implements additional logic\n         \n         /* The class that implements asynchronous operation calls. */  \n         public class DoSomethingActivityAsyncOperation: IEntityEventAsyncOperation {  \n             /* The start method of the class. */  \n             public void Execute(UserConnection userConnection, EntityEventAsyncOperationArgs arguments) {  \n                 /* ... */  \n             }  \n         }  \n         \n\n  2. Use a [class factory](https://academy.creatio.com/documents?ver=8.0&id=15221) in the handler method of the activity object listener.\n\nThe class factory serves the following **purposes** :\n\n     * Retrieve the instance of the class that implements the `IEntityEventAsyncExecutor` interface.\n     * Prepare the parameters.\n     * Pass the class that implements additional logic for execution.\n\nView an example that calls an asynchronous operation in the event layer below.\n\nExample that calls an asynchronous operation in the event layer\n    \n    [EntityEventListener(SchemaName = \"Activity\")]  \n    public class ActivityEntityEventListener: BaseEntityEventListener {  \n        /* The handler method of the event after the entity is saved. */  \n        public override void OnSaved(object sender, EntityAfterEventArgs e) {  \n            base.OnSaved(sender, e);  \n            /* The instance of the class to execute asynchronously. */  \n            var asyncExecutor = ClassFactory.Get <IEntityEventAsyncExecutor> (  \n                new ConstructorArgument(\"userConnection\", ((Entity) sender).UserConnection));  \n            /* The parameters to execute asynchronously. */  \n            var operationArgs = new EntityEventAsyncOperationArgs((Entity) sender, e);  \n            /* Asynchronous execution. */  \n            asyncExecutor.ExecuteAsync <DoSomethingActivityAsyncOperation> (operationArgs);  \n        }  \n    }  \n    \n\n\n\n\n  * Mechanism of the Entity event layer\n    * BaseEntityEventListener class\n    * EntityAfterEventArgs class\n    * EntityBeforeEventArgs class\n    * EntityEventListener attribute\n    * Set up the object event handler\n  * Asynchronous behavior in the Entity event layer\n    * IEntityEventAsyncExecutor interface\n    * IEntityEventAsyncOperation interface\n    * EntityEventAsyncOperationArgs class\n    * Implement asynchronous behavior in the event layer\n\n\n",
  "analysis": {
    "word_count": 1424,
    "key_concepts": ["configuration", "operation", "lead", "contact"],
    "use_cases": [
      "building applications",
      "custom development",
      "API integration",
      "system administration",
      "user management"
    ],
    "related_topics": [],
    "difficulty": "intermediate",
    "ai_tags": ["creatio", "contact", "intermediate", "operation", "documentation", "lead", "configuration"]
  },
  "ai_optimized": true,
  "processed_at": "2025-07-28T13:21:34.419116"
}
