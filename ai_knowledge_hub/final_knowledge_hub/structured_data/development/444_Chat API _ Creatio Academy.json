{
  "id": 444,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/8.0/platform-customization/classic-ui/chat-management-api/references/chat-api",
  "title": "Chat API | Creatio Academy",
  "category": "development",
  "description": "The functionality is relevant to Classic UI.",
  "content": "This is documentation for Creatio 8.0 . For up-to-date documentation, see the latest version ( 8.3 ). Version: 8.0 On this page Level: advanced note The functionality is relevant to Classic UI. MessageManager class ​ Enables the messenger integration with Creatio instance. Methods ​ Receive ( ) Receives incoming messages in the unified format ( UnifiedMessage , a unified message class) or as a string, which is then converted into the unified format. If the conversion is required, the method uses a class that implements the IIncomeMessageWorker interface. Implementation of the interface depends on the messenger. The method also receives messages in Creatio. Send ( ) Sends outgoing messages. Creatio selects the relevant message sender class. The class must implement the IOutcomeMessageWorker interface. The method also sends messages in Creatio. Register ( ) Adds a channel when setting up Facebook Messenger integration. The method uses the class that implements the IMessengerRegistrationWorker interface. Required for messengers that need additional actions upon registration. For example, retrieve a token. GetMessagesByChatId ( ) Receives messages of a specific chat in the IEnumerable<UnifiedMessage> format. Pass the chat in method parameters. OmnichannelMessagingService class ​ Receives and sends messages. Parent class for the following classes: FacebookOmnichannelMessagingService . Receives and sends messages from Facebook Messenger. TelegramOmnichannelMessagingService .  Receives and sends messages from Telegram. Methods ​ InternalReceive ( ) Receives messages. OmnichannelChatService class ​ Receives history, chats of a specific agent, etc. Methods ​ AcceptChat ( ) Assigns the chat to the current user. GetUnreadChatsCount ( ) Receives the number of unread chats. MarkChatAsRead ( ) Marks all messages in the chat as read. GetConversation ( ) Receives chat messages to display them in the communication panel. CloseActiveChat ( ) Closes the chat. GetChats ( ) Receives all chats of the agent. GetChatActions ( ) Receives the list of actions available for the chat’s queue. GetUnreadMessagesCount ( ) Receives the number of unread messages in all chats of the agent. MessageManager class Methods OmnichannelMessagingService class Methods OmnichannelChatService class Methods",
  "markdown": "This is documentation for Creatio **8.0**.\n\nFor up-to-date documentation, see the **[latest version](/docs/8.x/dev/development-on-creatio-platform/getting-started/development-recommendations)** (8.3).\n\nVersion: 8.0\n\nOn this page\n\nLevel: advanced\n\nnote\n\nThe functionality is relevant to Classic UI.\n\n## MessageManager class​\n\nEnables the messenger integration with Creatio instance.\n\n### Methods​\n    \n    \n    Receive()  \n    \n\nReceives incoming messages in the unified format (`UnifiedMessage`, a unified message class) or as a string, which is then converted into the unified format. If the conversion is required, the method uses a class that implements the `IIncomeMessageWorker` interface. Implementation of the interface depends on the messenger. The method also receives messages in Creatio.\n    \n    \n    Send()  \n    \n\nSends outgoing messages. Creatio selects the relevant message sender class. The class must implement the `IOutcomeMessageWorker` interface. The method also sends messages in Creatio.\n    \n    \n    Register()  \n    \n\nAdds a channel when setting up Facebook Messenger integration. The method uses the class that implements the `IMessengerRegistrationWorker` interface. Required for messengers that need additional actions upon registration. For example, retrieve a token.\n    \n    \n    GetMessagesByChatId()  \n    \n\nReceives messages of a specific chat in the `IEnumerable<UnifiedMessage>` format. Pass the chat in method parameters.\n\n## OmnichannelMessagingService class​\n\nReceives and sends messages. Parent class for the following classes:\n\n  * `FacebookOmnichannelMessagingService`. Receives and sends messages from Facebook Messenger.\n  * `TelegramOmnichannelMessagingService`. Receives and sends messages from Telegram.\n\n\n\n### Methods​\n    \n    \n    InternalReceive()  \n    \n\nReceives messages.\n\n## OmnichannelChatService class​\n\nReceives history, chats of a specific agent, etc.\n\n### Methods​\n    \n    \n    AcceptChat()  \n    \n\nAssigns the chat to the current user.\n    \n    \n    GetUnreadChatsCount()  \n    \n\nReceives the number of unread chats.\n    \n    \n    MarkChatAsRead()  \n    \n\nMarks all messages in the chat as read.\n    \n    \n    GetConversation()  \n    \n\nReceives chat messages to display them in the communication panel.\n    \n    \n    CloseActiveChat()  \n    \n\nCloses the chat.\n    \n    \n    GetChats()  \n    \n\nReceives all chats of the agent.\n    \n    \n    GetChatActions()  \n    \n\nReceives the list of actions available for the chat’s queue.\n    \n    \n    GetUnreadMessagesCount()  \n    \n\nReceives the number of unread messages in all chats of the agent.\n\n  * MessageManager class\n    * Methods\n  * OmnichannelMessagingService class\n    * Methods\n  * OmnichannelChatService class\n    * Methods\n\n\n",
  "analysis": {
    "word_count": 330,
    "key_concepts": ["classic ui", "integration"],
    "use_cases": ["third-party integration", "data synchronization", "system connectivity"],
    "related_topics": ["webhooks", "data sync", "web service", "api"],
    "difficulty": "intermediate",
    "ai_tags": ["creatio", "intermediate", "documentation", "integration", "classic ui"]
  },
  "ai_optimized": true,
  "processed_at": "2025-07-28T13:23:24.627918"
}
