{
  "id": 863,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/8.2/getting-started/first-app/develop-application/step-3-add-page-validation",
  "title": "3. Implement the page validation | Creatio Academy",
  "category": "development",
  "description": "On the previous step, we added the example's required data to the interface and attached it to the development package.",
  "content": "This is documentation for Creatio 8.2 . For up-to-date documentation, see the latest version ( 8.3 ). Version: 8.2 On this page Level: beginner On the previous step , we added the example's required data to the interface and attached it to the development package. Now, implement the business logic of the example. A daily class is scheduled only if there is an unoccupied gym. The number of the fitness center's gyms is set via a system setting and equals 4. When adding or editing a daily group class, Creatio must check if the changes result in the total number of active daily classes exceeding the value of the system setting. If yes, saving is disallowed and the message \"No available gyms, no more than N classes allowed\" is displayed, where N is the system setting's value. To do this, modify the source code of the client module responsible for the section page operation. Go to the Configuration section . Select the \"TryItPackage\" package from the package list. The Wizards add schemas of various types to the package. Filter schemas by the Client module type. Double-click the \"UsrClass1Page\" schema to open it and modify its source code. UsrClass1Page.js define ( \"UsrClass1Page\" , [ ] , function ( ) { return { entitySchemaName : \"UsrClass\" , messages : { } , attributes : { /* The attribute that stores the number of currently active daily classes. */ \"responseCollectionTrainings\" : { \"dataValueType\" : Terrasoft . DataValueType . INTEGER , \"type\" : Terrasoft . ViewModelColumnType . VIRTUAL_COLUMN } , /* The attribute that stores the value of the system setting. */ \"maximumDailyActiveSections\" : { \"dataValueType\" : Terrasoft . DataValueType . INTEGER , \"type\" : Terrasoft . ViewModelColumnType . VIRTUAL_COLUMN } } , methods : { /* Run when the page's schema is loaded and call the method that counts the current number of active daily classes and the method that reads the value of the system setting. */ onEntityInitialized : function ( ) { this . callParent ( arguments ) ; this . getPeriodicityActiveNumber ( ) ; this . getMaximumDailyActiveSections ( ) ; } , /* Calculate the current number of active daily classes and write the calculated value to the \"responseCollectionTrainings\" attribute. */ getPeriodicityActiveNumber : function ( ) { var periodicity = \"Daily\" ; var esqPeriodicity = this . Ext . create ( \"Terrasoft.EntitySchemaQuery\" , { rootSchemaName : \"UsrClass\" } ) ; esqPeriodicity . addColumn ( \"UsrName\" ) ; var groupFilters = this . Ext . create ( \"Terrasoft.FilterGroup\" ) ; var filterPerodicity = this . Terrasoft . createColumnFilterWithParameter ( this . Terrasoft . ComparisonType . EQUAL , \"UsrPeriodicity.Name\" , periodicity ) ; var thisId = this . get ( \"Id\" ) ; var filterId = this . Terrasoft . createColumnFilterWithParameter ( this . Terrasoft . ComparisonType . NOT_EQUAL , \"Id\" , thisId ) ; var filterIsActive = this . Terrasoft . createColumnFilterWithParameter ( this . Terrasoft . ComparisonType . EQUAL , \"UsrIsActive\" , true ) ; groupFilters . addItem ( filterPerodicity ) ; groupFilters . logicalOperation = this . Terrasoft . LogicalOperatorType . AND ; groupFilters . addItem ( filterIsActive ) ; groupFilters . logicalOperation = this . Terrasoft . LogicalOperatorType . AND ; groupFilters . addItem ( filterId ) ; esqPeriodicity . filters . add ( groupFilters ) ; esqPeriodicity . getEntityCollection ( function ( result ) { if ( ! result . success ) { this . showInformationDialog ( \"Request error\" ) ; return ; } else { var lengthCollection = result . collection . collection . length ; this . set ( \"responseCollectionTrainings\" , lengthCollection ) ; } } , this ) ; } , /* Provide validation for the \"Periodicity\" field. The validator method will be called each time the field is modified or the record is saved. */ setValidationConfig : function ( ) { this . callParent ( arguments ) ; this . addColumnValidator ( \"UsrPeriodicity\" , this . periodicityValidator ) ; } , /* The validator method: if the class is daily, compare the number of active daily classes to the \"GymNumber\" system setting. Add a warning message to the \"Periodicity\" field if the system setting's value is exceeded. Saving the record is impossible in this case. */ periodicityValidator : function ( ) { var invalidMessage = \"\" ; var periodicity = this . get ( \"UsrPeriodicity\" ) . displayValue ; if ( periodicity === \"Daily\" ) { var isActive = this . get ( \"UsrIsActive\" ) ; var myVariable = this . get ( \"maximumDailyActiveSections\" ) ; var lengthCollection = this . get ( \"responseCollectionTrainings\" ) ; if ( lengthCollection >= myVariable && isActive ) { invalidMessage = \"The number of gyms is limited. No more than \" + myVariable + \" daily trainings.\" ; } } else { invalidMessage = \"\" ; } return { invalidMessage : invalidMessage } ; } , /* Retrieve the value of the \"GymNumber\" system setting. */ getMaximumDailyActiveSections : function ( ) { var myVariable ; var callback = function ( value ) { myVariable = value ; } ; this . Terrasoft . SysSettings . querySysSettingsItem ( \"GymsNumber\" , callback , this ) ; if ( myVariable === undefined ) { return ; } else { this . set ( \"maximumDailyActiveSections\" , myVariable ) ; } } } , modules : /**SCHEMA_MODULES*/ { } /**SCHEMA_MODULES*/ , /* No changes. */ details : /**SCHEMA_DETAILS*/ { // … } /**SCHEMA_DETAILS*/ , businessRules : /**SCHEMA_BUSINESS_RULES*/ { } /**SCHEMA_BUSINESS_RULES*/ , dataModels : /**SCHEMA_DATA_MODELS*/ { } /**SCHEMA_DATA_MODELS*/ , /* No changes. */ diff : /**SCHEMA_DIFF*/ [ // … ] /**SCHEMA_DIFF*/ } ; } ) ; Save the changes . The result of the changes: As a result, we implemented the required business logic of the page. On the next step , implement the population of the group class timetable. See also ​ Step 2. Add new data Step 4. Implement the population of the timetable See also",
  "markdown": "This is documentation for Creatio **8.2**.\n\nFor up-to-date documentation, see the **[latest version](/docs/8.x/dev/development-on-creatio-platform/getting-started/first-app/develop-application/step-3-add-page-validation)** (8.3).\n\nVersion: 8.2\n\nOn this page\n\nLevel: beginner\n\nOn the [previous step](https://academy.creatio.com/documents?ver=8.2&id=15013), we added the example's required data to the interface and attached it to the development package.\n\nNow, implement the business logic of the example.\n\n  * A daily class is scheduled only if there is an unoccupied gym.\n  * The number of the fitness center's gyms is set via a system setting and equals 4.\n  * When adding or editing a daily group class, Creatio must check if the changes result in the total number of active daily classes exceeding the value of the system setting. If yes, saving is disallowed and the message \"No available gyms, no more than N classes allowed\" is displayed, where N is the system setting's value.\n\n\n\nTo do this, modify the source code of the client module responsible for the section page operation.\n\n  1. [Go to the **Configuration** section](https://academy.creatio.com/documents?ver=8.2&id=15101&anchor=title-2093-2).\n\n  2. Select the \"TryItPackage\" [package](https://academy.creatio.com/documents?ver=8.2&id=15121) from the package list.\n\n  3. The Wizards add schemas of various types to the package. Filter schemas by the **Client module** type.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_Client_Module.png)\n\n  4. Double-click the \"UsrClass1Page\" schema to open it and modify its source code.\n\nUsrClass1Page.js\n         \n         define(\"UsrClass1Page\", [], function() {  \n             return {  \n                 entitySchemaName: \"UsrClass\",  \n                 messages: {},  \n                 attributes: {  \n                     /* The attribute that stores the number of currently active daily classes. */  \n                     \"responseCollectionTrainings\": {  \n                         \"dataValueType\": Terrasoft.DataValueType.INTEGER,  \n                         \"type\": Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN  \n                     },  \n                     /* The attribute that stores the value of the system setting. */  \n                     \"maximumDailyActiveSections\": {  \n                         \"dataValueType\": Terrasoft.DataValueType.INTEGER,  \n                         \"type\": Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN  \n                     }  \n                 },  \n                 methods: {  \n                     /* Run when the page's schema is loaded and call the method that counts the current number of active daily classes and the method that reads the value of the system setting. */  \n                     onEntityInitialized: function(){  \n                         this.callParent(arguments);  \n                         this.getPeriodicityActiveNumber();  \n                         this.getMaximumDailyActiveSections();  \n                     },  \n                     /* Calculate the current number of active daily classes and write the calculated value to the \"responseCollectionTrainings\" attribute. */  \n                     getPeriodicityActiveNumber: function() {  \n                         var periodicity = \"Daily\";  \n                         var esqPeriodicity = this.Ext.create(\"Terrasoft.EntitySchemaQuery\", {  \n                             rootSchemaName: \"UsrClass\"  \n                         });  \n                         esqPeriodicity.addColumn(\"UsrName\");  \n                         var groupFilters = this.Ext.create(\"Terrasoft.FilterGroup\");  \n                         var filterPerodicity = this.Terrasoft.createColumnFilterWithParameter(this.Terrasoft.ComparisonType.EQUAL, \"UsrPeriodicity.Name\", periodicity);  \n                         var thisId = this.get(\"Id\");  \n                         var filterId = this.Terrasoft.createColumnFilterWithParameter(this.Terrasoft.ComparisonType.NOT_EQUAL, \"Id\", thisId);  \n                         var filterIsActive = this.Terrasoft.createColumnFilterWithParameter(this.Terrasoft.ComparisonType.EQUAL, \"UsrIsActive\", true);  \n                         groupFilters.addItem(filterPerodicity);  \n                         groupFilters.logicalOperation = this.Terrasoft.LogicalOperatorType.AND;  \n                         groupFilters.addItem(filterIsActive);  \n                         groupFilters.logicalOperation = this.Terrasoft.LogicalOperatorType.AND;  \n                         groupFilters.addItem(filterId);  \n                         esqPeriodicity.filters.add(groupFilters);  \n                         esqPeriodicity.getEntityCollection(function(result) {  \n                             if (!result.success) {  \n                                 this.showInformationDialog(\"Request error\");  \n                                 return;  \n                             }  \n                             else {  \n                                 var lengthCollection = result.collection.collection.length;  \n                                 this.set(\"responseCollectionTrainings\", lengthCollection);  \n                             }  \n                         }, this);  \n                     },  \n                     /* Provide validation for the \"Periodicity\" field. The validator method will be called each time the field is modified or the record is saved. */  \n                     setValidationConfig: function() {  \n                         this.callParent(arguments);  \n                         this.addColumnValidator(\"UsrPeriodicity\", this.periodicityValidator);  \n                     },  \n                     /* The validator method: if the class is daily, compare the number of active daily classes to the \"GymNumber\" system setting. Add a warning message to the \"Periodicity\" field if the system setting's value is exceeded. Saving the record is impossible in this case. */  \n                     periodicityValidator: function() {  \n                         var invalidMessage= \"\";  \n                         var periodicity = this.get(\"UsrPeriodicity\").displayValue;  \n                         if (periodicity===\"Daily\") {  \n                             var isActive = this.get(\"UsrIsActive\");  \n                             var myVariable = this.get(\"maximumDailyActiveSections\");  \n                             var lengthCollection = this.get(\"responseCollectionTrainings\");  \n                             if (lengthCollection >= myVariable && isActive) {  \n                                 invalidMessage = \"The number of gyms is limited. No more than \" + myVariable + \" daily trainings.\";  \n                             }  \n                         }  \n                         else {  \n                             invalidMessage = \"\";  \n                         }  \n                         return {  \n                             invalidMessage: invalidMessage  \n                         };  \n                     },  \n                     /* Retrieve the value of the \"GymNumber\" system setting. */  \n                     getMaximumDailyActiveSections: function() {  \n                         var myVariable;  \n                         var callback = function(value) {  \n                             myVariable = value;  \n                         };  \n                         this.Terrasoft.SysSettings.querySysSettingsItem(\"GymsNumber\", callback, this);  \n                         if (myVariable === undefined) {  \n                             return;  \n                         }  \n                         else {  \n                             this.set(\"maximumDailyActiveSections\", myVariable);  \n                         }  \n                     }  \n                 },  \n                 modules: /**SCHEMA_MODULES*/{}/**SCHEMA_MODULES*/,  \n                 /* No changes. */  \n                 details: /**SCHEMA_DETAILS*/{  \n           \n                     // …  \n           \n                 }/**SCHEMA_DETAILS*/,  \n                 businessRules: /**SCHEMA_BUSINESS_RULES*/{}/**SCHEMA_BUSINESS_RULES*/,  \n                 dataModels: /**SCHEMA_DATA_MODELS*/{}/**SCHEMA_DATA_MODELS*/,  \n                 /* No changes. */  \n                 diff: /**SCHEMA_DIFF*/[  \n           \n                 // …  \n           \n                 ]/**SCHEMA_DIFF*/  \n             };  \n         });  \n           \n         \n\n  5. **Save the changes**.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_SourceCode_ClientModule.png)\n\n\n\n\nThe result of the changes:\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/TryIt/scr_Result_Validation.png)\n\nAs a result, we implemented the required business logic of the page. On the [next step](https://academy.creatio.com/documents?ver=8.2&id=15015), implement the population of the group class timetable.\n\n* * *\n\n## See also​\n\n[Step 2. Add new data](https://academy.creatio.com/documents?ver=8.2&id=15013)\n\n[Step 4. Implement the population of the timetable](https://academy.creatio.com/documents?ver=8.2&id=15015)\n\n  * See also\n\n\n",
  "analysis": {
    "word_count": 985,
    "key_concepts": ["configuration", "section", "detail", "operation", "system setting", "package", "case"],
    "use_cases": [
      "building applications",
      "custom development",
      "API integration",
      "system administration",
      "user management"
    ],
    "related_topics": [],
    "difficulty": "intermediate",
    "ai_tags": [
      "creatio",
      "system setting",
      "intermediate",
      "operation",
      "documentation",
      "section",
      "detail",
      "configuration"
    ]
  },
  "ai_optimized": true,
  "processed_at": "2025-07-28T13:31:55.942004"
}
