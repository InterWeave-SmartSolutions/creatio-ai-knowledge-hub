{
  "id": 571,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/8.2/development-tools/packages/project-package",
  "title": "Project package | Creatio Academy",
  "category": "development",
  "description": "A project package is a package that lets you develop Creatio functionality as a standard C# project.",
  "content": "This is documentation for Creatio 8.2 . For up-to-date documentation, see the latest version ( 8.3 ). Version: 8.2 On this page Level: intermediate A project package is a package that lets you develop Creatio functionality as a standard C# project. Project package major features ​ Project packages take much faster to compile than simple packages if both contain a large number of Source code type schemas: 1-2 seconds as opposed to 30-120 seconds. Project packages let you deploy functionality to a production environment indirectly. Project packages streamline C# development for Creatio in the cloud. Project packages let you track the implementation dependencies. Use this to create a list of classes to test after functionality updates. Project packages streamline the automatic functionality tests. Project package structure ​ The project package structure in the file system is identical to the structure of a simple package. The main difference between the project package and a simple package is in the Package.sln and Package.csproj files unique to the project package. Learn more about the simple package structure: Packages basics . View the structure of project package directories in the figure below. Include the functionality developed in the project package in the package file content (the Files directory) as the compiled library and *.cs files. Project package development tools ​ Creatio command-line interface utility (clio) is an open source utility for integration, development, and CI/CD. Use the utility : to create a project package to import the package into Creatio on-site or in the cloud to export the package from Creatio on-site or in the cloud to restart Creatio to convert existing packages CreatioSDK is a NuGet package that provides a set of development tools. Use the NuGet package to create an application on the Creatio platform. Import a project package ​ Compile the project package. Compile the project package into a library as an individual C# project. The library name must match the package name. Place the compiled files to the ../Files/Bin/[PackageName].dll directory. Transfer the library. Copy the library to the directory. Run Creatio. As a result, Creatio will check for qualifying libraries in the packages upon start or restart. If such libraries exist, Creatio will connect them immediately. You do not have to compile the configuration to deploy the functionality. View the package import procedure in the figure below. See also ​ Environment overview Packages basics Packages file content Resources ​ Creatio command-line interface utility (clio) CreatioSDK NuGet package Project package major features Project package structure Project package development tools Import a project package See also Resources",
  "markdown": "This is documentation for Creatio **8.2**.\n\nFor up-to-date documentation, see the **[latest version](/docs/8.x/dev/development-on-creatio-platform/development-tools/packages/project-package)** (8.3).\n\nVersion: 8.2\n\nOn this page\n\nLevel: intermediate\n\nA **project package** is a package that lets you develop Creatio functionality as a standard C# project.\n\n## Project package major features​\n\n  * Project packages take much faster to compile than simple packages if both contain a large number of **Source code** type schemas: 1-2 seconds as opposed to 30-120 seconds.\n  * Project packages let you deploy functionality to a [production environment](https://academy.creatio.com/documents?ver=8.2&id=15201&anchor=title-2124-3) indirectly.\n  * Project packages streamline C# development for Creatio in the cloud.\n  * Project packages let you track the implementation dependencies. Use this to create a list of classes to test after functionality updates.\n  * Project packages streamline the automatic functionality tests.\n\n\n\n## Project package structure​\n\nThe project package structure in the file system is identical to the structure of a simple package. The main **difference** between the project package and a simple package is in the `Package.sln` and `Package.csproj` files unique to the project package. Learn more about the simple package structure: [Packages basics](https://academy.creatio.com/documents?ver=8.2&id=15121&anchor=title-2105-2).\n\nView the structure of project package directories in the figure below. Include the functionality developed in the project package in the [package file content](https://academy.creatio.com/documents?ver=8.2&id=15126) (the `Files` directory) as the compiled library and *.cs files.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/PackageProject/7.18/scr_package_project_folders.png)\n\n## Project package development tools​\n\n  1. [Creatio command-line interface utility (clio)](https://github.com/Advance-Technologies-Foundation/clio) is an open source utility for integration, development, and CI/CD.\n\n**Use the utility** :\n\n     * to create a project package\n     * to import the package into Creatio on-site or in the cloud\n     * to export the package from Creatio on-site or in the cloud\n     * to restart Creatio\n     * to convert existing packages\n  2. [CreatioSDK](https://www.nuget.org/packages/CreatioSDK) is a NuGet package that provides a set of development tools. Use the NuGet package to create an application on the Creatio platform.\n\n\n\n\n## Import a project package​\n\n  1. Compile the project package.\n\nCompile the project package into a library as an individual C# project. The library name must match the package name. Place the compiled files to the `../Files/Bin/[PackageName].dll` directory.\n\n  2. Transfer the library.\n\n  3. Copy the library to the directory.\n\n  4. Run Creatio.\n\n\n\n\nAs a result, Creatio will check for qualifying libraries in the packages upon start or restart. If such libraries exist, Creatio will connect them immediately. You do not have to compile the configuration to deploy the functionality.\n\nView the package import procedure in the figure below.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/PackageProject/7.18/scr_package_project_compile.png)\n\n* * *\n\n## See also​\n\n[Environment overview](https://academy.creatio.com/documents?ver=8.2&id=15201)\n\n[Packages basics](https://academy.creatio.com/documents?ver=8.2&id=15121)\n\n[Packages file content](https://academy.creatio.com/documents?ver=8.2&id=15126)\n\n* * *\n\n## Resources​\n\n[Creatio command-line interface utility (clio)](https://github.com/Advance-Technologies-Foundation/clio)\n\n[CreatioSDK NuGet package](https://www.nuget.org/packages/CreatioSDK)\n\n  * Project package major features\n  * Project package structure\n  * Project package development tools\n  * Import a project package\n  * See also\n  * Resources\n\n\n",
  "analysis": {
    "word_count": 425,
    "key_concepts": ["configuration", "integration", "package"],
    "use_cases": [
      "building applications",
      "custom development",
      "API integration",
      "system administration",
      "user management"
    ],
    "related_topics": ["webhooks", "data sync", "web service", "api"],
    "difficulty": "beginner",
    "ai_tags": ["beginner", "creatio", "package", "documentation", "integration", "configuration"]
  },
  "ai_optimized": true,
  "processed_at": "2025-07-28T13:25:59.348144"
}
