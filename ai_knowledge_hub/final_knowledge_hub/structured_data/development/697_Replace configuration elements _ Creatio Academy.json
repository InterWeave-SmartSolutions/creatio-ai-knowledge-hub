{
  "id": 697,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/development-tools/creatio-ide/replace-configuration-elements",
  "title": "Replace configuration elements | Creatio Academy",
  "category": "development",
  "description": "Creatio development is based on the main principles of object-oriented programming. In particular, the Creatio extension model is based on the open-closed principle: the major Creatio logic is open for extension but closed for modification. This means that new features must be developed by introducing new entities rather than modifying the existing entities.",
  "content": "Version: 8.3 On this page Level: beginner Creatio development is based on the main principles of object-oriented programming. In particular, the Creatio extension model is based on the open-closed principle : the major Creatio logic is open for extension but closed for modification. This means that new features must be developed by introducing new entities rather than modifying the existing entities. The configuration elements in pre-installed packages are closed for modification on the system level. Develop and modify the functionality in custom packages using the replacement mechanism . In Creatio, the replacement implementation is based on the concepts of replacing and replaced configuration elements. The replacing configuration element is a configuration element that replaces another configuration element of the corresponding type. The replaced configuration element is a configuration element that is replaced by another configuration element of the corresponding type. Creatio IDE lets you replace the following configuration elements : Client module that defines the view model . Client modules implement the front-end part of Creatio. To create a replacing client module, use the replacing view model schema. Instructions: Client module . Object . Objects implement the back-end of Creatio. To create a replacing object, use the replacing object schema. Instructions: Object . Source code . Source code implements the back-end of Creatio. Classes serve as replacing configuration elements. To create a replacing class, use the schema of the Source code type. Instructions: Source code (C#) . After you implement the replacing configuration element, Creatio will execute the logic of the replacing configuration element when accessing the element. Creatio IDE lets you replace a single configuration element in multiple user-made packages. The hierarchy of packages that contain the replacing configuration elements defines the resulting implementation of the replacing configuration element in the compiled configuration. See also ​ Packages basics Client module Object Source code (C#) Resources ​ Back-end development Front-end development E-learning courses ​ Development on Creatio platform See also Resources E-learning courses",
  "markdown": "Version: 8.3\n\nOn this page\n\nLevel: beginner\n\nCreatio development is based on the main principles of object-oriented programming. In particular, the Creatio extension model is based on the **open-closed principle** : the major Creatio logic is open for extension but closed for modification. This means that new features must be developed by introducing new entities rather than modifying the existing entities.\n\nThe configuration elements in pre-installed packages are closed for modification on the system level. Develop and modify the functionality in custom [packages](https://academy.creatio.com/documents?ver=8.3&id=15121) using the **replacement mechanism**. In Creatio, the replacement implementation is based on the concepts of replacing and replaced configuration elements.\n\nThe **replacing configuration element** is a configuration element that replaces another configuration element of the corresponding type.\n\nThe **replaced configuration element** is a configuration element that is replaced by another configuration element of the corresponding type.\n\nCreatio IDE lets you replace the following **configuration elements** :\n\n  * **Client module that defines the view model**.\n\nClient modules implement the front-end part of Creatio. To create a replacing client module, use the replacing view model schema. Instructions: [Client module](https://academy.creatio.com/documents?ver=8.3&id=15106&anchor=title-3028-4).\n\n  * **Object**.\n\nObjects implement the back-end of Creatio. To create a replacing object, use the replacing object schema. Instructions: [Object](https://academy.creatio.com/documents?ver=8.3&id=15107&anchor=title-3028-7).\n\n  * **Source code**.\n\nSource code implements the back-end of Creatio. Classes serve as replacing configuration elements. To create a replacing class, use the schema of the **Source code** type. Instructions: [Source code (C#)](https://academy.creatio.com/documents?ver=8.3&id=15108&anchor=title-3028-16).\n\n\n\n\nAfter you implement the replacing configuration element, Creatio will execute the logic of the replacing configuration element when accessing the element.\n\nCreatio IDE lets you replace a single configuration element in multiple user-made packages. The hierarchy of packages that contain the replacing configuration elements defines the resulting implementation of the replacing configuration element in the compiled configuration.\n\n* * *\n\n## See also​\n\n[Packages basics](https://academy.creatio.com/documents?ver=8.3&id=15121)\n\n[Client module](https://academy.creatio.com/documents?ver=8.3&id=15106)\n\n[Object](https://academy.creatio.com/documents?ver=8.3&id=15107)\n\n[Source code (C#)](https://academy.creatio.com/documents?ver=8.3&id=15108)\n\n* * *\n\n## Resources​\n\n[Back-end development](https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/category/back-end-development)\n\n[Front-end development](https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/category/front-end-development)\n\n* * *\n\n## E-learning courses​\n\n[Development on Creatio platform](https://academy.creatio.com/e-learning/development-creatio-platform)\n\n  * See also\n  * Resources\n  * E-learning courses\n\n\n",
  "analysis": {
    "word_count": 323,
    "key_concepts": ["configuration", "package"],
    "use_cases": [
      "building applications",
      "custom development",
      "API integration",
      "system administration",
      "user management"
    ],
    "related_topics": [],
    "difficulty": "beginner",
    "ai_tags": ["beginner", "creatio", "package", "documentation", "configuration"]
  },
  "ai_optimized": true,
  "processed_at": "2025-07-28T13:28:30.399034"
}
