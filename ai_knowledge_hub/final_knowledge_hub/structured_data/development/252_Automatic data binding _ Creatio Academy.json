{
  "id": 252,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/back-end-development/automatic-data-binding",
  "title": "Automatic data binding | Creatio Academy",
  "category": "development",
  "description": "Use the automatic data binding mechanism on the data of objects with a complex object model. Automatic data binding is available for product catalog in Financial Services Creatio product lineup.",
  "content": "Version: 8.3 On this page Level: advanced Use the automatic data binding mechanism on the data of objects with a complex object model. Automatic data binding is available for product catalog in Financial Services Creatio product lineup. Structure of automatic data binding ​ View the components of automatic data binding in the table below. Name Purpose Classes and interfaces Service Generates data bindings based on the set structure Creatio generates data bindings in the background . Service . The interface that calls automatic data binding from the front-end. Controller Accesses the Obtainer (obtains the structure of bound records) and Manufacturer (generates the data bindings) classes. Controller . The class that manages the creation of data bindings. Binding generator Wraps the PackageElementUtilities core class. Provides a convenient interface to execute CRUD operations on data bindings. Learn more about data operations: Data access through ORM , Access data directly . Manufacturer . A proxy class that interacts with the controller, PackageElementUtilities class, and PackageValidator class. Structure obtainer Returns the structure of the main entity’s bound records to the controller. Obtainer . Provides flexible modification of the structure of the main entity’s bound objects when creating data bindings. Uses the Strategy template to define the required implementation. Creatio implements the base structure , within which only the current entity and its columns (except for system columns) are returned. View the properties of the base structure in the table below. Property Description EntitySchemaName The name of the entity. FilterColumnPathes The array of paths to the main entity’s primary column. If you use filters, join them using the OR operator. IsBundle The way to save the records. The ways to save the records are as follows: Save the records to a single binding. Create a binding per each record bound to the main entity record via the filter. Columns The list of columns to bind. InnerStructures The list of nested objects’ structures. For example, details connected to the main entity. DependsStructures The list of structures on which the current structure depends. For example, lookups to which the record in the current structure links via lookup fields. Operating procedure of automatic data binding ​ View the operating procedure of automatic data binding in the figure below. Creatio starts processing the structure from the main entity. The structure is processed for each instance of the SchemaDataBindingStructure structure class. The structure processing procedure is as follows: Creatio recursively processes each structure from the list of structures contained in the DependsStructures property. This is done to bind the objects to which the current object links before binding the main entity. Creatio adds the binding to the main entity record by the filter in the FilterColumnPathes property. Creatio recursively processes each structure from the list of structures contained in the InnerStructures property. Since the structures reference the main entity, bind them after binding the main entity. The following naming patterns are available: agb_EntitySchemaName if the IsBundle property is true . EntitySchemaName is the name of the current binding’s entity. agb_EntitySchemaName_PrimaryEntityId if the IsBundle property is false . PrimaryEntityId is the ID of the main entity record to which the records in the current binding are bound. Important We recommend against renaming automatically created bindings. Automatic updates are available only for the bindings whose names match the specified template. Add a custom structure for the object binding ​ Create a Source code schema. Learn more about creating schemas: Source code (C#) . Create a service class. Add the Terrasoft.Configuration namespace in the Schema Designer. Create a class. Name the class according to the following template: [EntityName]SchemaDataBindingStructureObtainer . For example, ProductSchemaDataBindingStructureObtainer . Creatio will search for classes based on the template when defining the relevant obtainer implementation (the Obtainer component). Specify the BaseSchemaDataBindingStructureObtainer class as a parent class. Add a custom implementation of the ObtainStructure() interface method. Create and return the needed entity structure in this method. ObtainStructure() method public override SchemaDataBindingStructure ObtainStructure ( UserConnection userConnection ) Important If you need to modify a structure implementation from a non-editable package, create a class in a user-made package and use the [Override] attribute. Learn more about the attribute: [Override] attribute . Publish the schema . Call automatic data binding ​ You can call automatic data binding from the front-end and back-end. Call automatic data binding from the front-end ​ Call the service that generates bindings. Specify the binding generation settings. You can specify binding generation settings in the following ways : Pass the parameters. package for which to generate the binding name of the entity list of IDs to bind Pass the filter. View the example that calls automatic data binding from the front-end using the parameters below. Example that calls automatic data binding from the front-end using parameters ServiceHelper . callService ( \"SchemaDataBindingService\" , \"GenerateBindings\" , callback , { \"schemaName\" : this . entitySchemaName , \"sysPackageUId\" : sysPackageUId \"recordIds\" : [ \"...\" , \"...\" ] } , this ) ; View the example that calls automatic data binding from the front-end using a filter below. Example that calls automatic data binding from the front-end using a filter ServiceHelper . callService ( \"SchemaDataBindingService\" , \"GenerateBindingsByFilter\" , callback , { \"schemaName\" : this . entitySchemaName , \"sysPackageUId\" : sysPackageUId \"filterConfig\" : .. . } , this ) ; Important Creatio runs automatic data binding called from the front-end in the background. Once the binding is complete, Creatio will display a notification message in the communication panel. The message will contain the number of successfully and unsuccessfully bound product records. Call automatic data binding from the back-end ​ Create an instance of the SchemaDataBindingController class. Call the GenerateBindings method. Pass the following to the method: package ID entity name list of IDs to bind View the example that calls automatic data binding from the back-end below. Example that calls automatic data binding from the back-end var dataBindingController = ClassFactory . Get < IDataBindingController > ( new ConstructorArgument ( \"userConnection\" , UserConnection ) ) ; var result = dataBindingController . GenerateBindings ( schemaName , recordIds , sysPackageUId ) ; See also ​ Data access through ORM Access data directly Configuration elements Replacing class factory Execute operations in the background Resources ​ Description of the product catalog in Financial Services Creatio product lineup Structure of automatic data binding Operating procedure of automatic data binding Add a custom structure for the object binding Call automatic data binding Call automatic data binding from the front-end Call automatic data binding from the back-end See also Resources",
  "markdown": "Version: 8.3\n\nOn this page\n\nLevel: advanced\n\nUse the **automatic data binding** mechanism on the data of objects with a complex object model. Automatic data binding is available for [product catalog](https://academy.creatio.com/docs/8.x/creatio-apps/category/product-catalog) in Financial Services Creatio product lineup.\n\n## Structure of automatic data binding​\n\nView the **components** of automatic data binding in the table below.\n\nName| Purpose| Classes and interfaces| Service| Generates data bindings based on the set structure Creatio generates data bindings [in the background](https://academy.creatio.com/documents?ver=8.3&id=15231).| `Service`. The interface that calls automatic data binding from the front-end.| Controller| Accesses the `Obtainer` (obtains the structure of bound records) and `Manufacturer` (generates the data bindings) classes.| `Controller`. The class that manages the creation of data bindings.| Binding generator| Wraps the `PackageElementUtilities` core class. Provides a convenient interface to execute CRUD operations on data bindings. Learn more about data operations: [Data access through ORM](https://academy.creatio.com/documents?ver=8.3&id=15246), [Access data directly](https://academy.creatio.com/documents?ver=8.3&id=15233).| `Manufacturer`. A proxy class that interacts with the controller, `PackageElementUtilities` class, and `PackageValidator` class.| Structure obtainer| Returns the structure of the main entity’s bound records to the controller.| `Obtainer`. Provides flexible modification of the structure of the main entity’s bound objects when creating data bindings. Uses the `Strategy` template to define the required implementation.  \n---|---|---  \n  \nCreatio implements the **base structure** , within which only the current entity and its columns (except for system columns) are returned. View the properties of the base structure in the table below.\n\nProperty| Description| EntitySchemaName| The name of the entity.| FilterColumnPathes| The array of paths to the main entity’s primary column. If you use filters, join them using the `OR` operator.| IsBundle| The way to save the records. The **ways** to save the records are as follows:\n\n  * Save the records to a single binding.\n  * Create a binding per each record bound to the main entity record via the filter.\n\n| Columns| The list of columns to bind.| InnerStructures| The list of nested objects’ structures. For example, details connected to the main entity.| DependsStructures| The list of structures on which the current structure depends. For example, lookups to which the record in the current structure links via lookup fields.  \n---|---  \n  \n## Operating procedure of automatic data binding​\n\nView the **operating procedure** of automatic data binding in the figure below.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/AutoBind/7.18/src_AutoBind_diagram_en.png)\n\nCreatio starts processing the structure from the main entity. The structure is processed for each instance of the `SchemaDataBindingStructure` structure class.\n\nThe **structure processing procedure** is as follows:\n\n  1. Creatio recursively processes each structure from the list of structures contained in the `DependsStructures` property. This is done to bind the objects to which the current object links before binding the main entity.\n  2. Creatio adds the binding to the main entity record by the filter in the `FilterColumnPathes` property.\n  3. Creatio recursively processes each structure from the list of structures contained in the `InnerStructures` property. Since the structures reference the main entity, bind them after binding the main entity.\n\n\n\nThe following **naming patterns** are available:\n\n  * `agb_EntitySchemaName` if the `IsBundle` property is `true`. `EntitySchemaName` is the name of the current binding’s entity.\n  * `agb_EntitySchemaName_PrimaryEntityId` if the `IsBundle` property is `false`. `PrimaryEntityId` is the ID of the main entity record to which the records in the current binding are bound.\n\n\n\nImportant\n\nWe recommend against renaming automatically created bindings. Automatic updates are available only for the bindings whose names match the specified template.\n\n## Add a custom structure for the object binding​\n\n  1. Create a **Source code** schema. Learn more about creating schemas: [Source code (C#)](https://academy.creatio.com/documents?ver=8.3&id=15108&anchor=title-2123-8).\n\n  2. Create a service class.\n\n     1. Add the `Terrasoft.Configuration` namespace in the Schema Designer.\n\n     2. Create a class. Name the class according to the following template: `[EntityName]SchemaDataBindingStructureObtainer`. For example, `ProductSchemaDataBindingStructureObtainer`. Creatio will search for classes based on the template when defining the relevant obtainer implementation (the `Obtainer` component).\n\n     3. Specify the `BaseSchemaDataBindingStructureObtainer` class as a parent class.\n\n     4. Add a custom implementation of the `ObtainStructure()` interface method. Create and return the needed entity structure in this method.\n\nObtainStructure() method\n            \n            public override SchemaDataBindingStructure ObtainStructure(UserConnection userConnection)  \n            \n\nImportant\n\nIf you need to modify a structure implementation from a non-editable package, create a class in a user-made package and use the `[Override]` attribute. Learn more about the attribute: [`[Override]` attribute](https://academy.creatio.com/documents?ver=8.3&id=15221&anchor=title-1238-6).\n\n  3. **Publish the schema**.\n\n\n\n\n## Call automatic data binding​\n\nYou can call automatic data binding from the front-end and back-end.\n\n### Call automatic data binding from the front-end​\n\n  1. Call the service that generates bindings.\n\n  2. Specify the binding generation settings.\n\nYou can specify binding generation settings in the following **ways** :\n\n     * Pass the parameters.\n\n       * package for which to generate the binding\n       * name of the entity\n       * list of IDs to bind\n     * Pass the filter.\n\n\n\n\nView the example that calls automatic data binding from the front-end using the parameters below.\n\nExample that calls automatic data binding from the front-end using parameters\n    \n    \n    ServiceHelper.callService(\"SchemaDataBindingService\",  \n        \"GenerateBindings\",  \n        callback, {  \n            \"schemaName\": this.entitySchemaName,  \n            \"sysPackageUId\": sysPackageUId  \n            \"recordIds\": [\"...\", \"...\"]  \n        },  \n        this  \n    );  \n    \n\nView the example that calls automatic data binding from the front-end using a filter below.\n\nExample that calls automatic data binding from the front-end using a filter\n    \n    \n    ServiceHelper.callService(\"SchemaDataBindingService\",  \n        \"GenerateBindingsByFilter\",  \n        callback, {  \n            \"schemaName\": this.entitySchemaName,  \n            \"sysPackageUId\": sysPackageUId  \n            \"filterConfig\": ...  \n        },  \n        this  \n    );  \n    \n\nImportant\n\nCreatio runs automatic data binding called from the front-end in the background. Once the binding is complete, Creatio will display a notification message in the communication panel. The message will contain the number of successfully and unsuccessfully bound product records.\n\n### Call automatic data binding from the back-end​\n\n  1. Create an instance of the `SchemaDataBindingController` class.\n\n  2. Call the `GenerateBindings` method. Pass the following to the method:\n\n     * package ID\n     * entity name\n     * list of IDs to bind\n\n\n\nView the example that calls automatic data binding from the back-end below.\n\nExample that calls automatic data binding from the back-end\n    \n    \n    var dataBindingController = ClassFactory.Get<IDataBindingController>(new ConstructorArgument(\"userConnection\", UserConnection));  \n    var result = dataBindingController.GenerateBindings(schemaName, recordIds, sysPackageUId);  \n    \n\n* * *\n\n## See also​\n\n[Data access through ORM](https://academy.creatio.com/documents?ver=8.3&id=15246)\n\n[Access data directly](https://academy.creatio.com/documents?ver=8.3&id=15233)\n\n[Configuration elements](https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/category/configuration-elements)\n\n[Replacing class factory](https://academy.creatio.com/documents?ver=8.3&id=15221)\n\n[Execute operations in the background](https://academy.creatio.com/documents?ver=8.3&id=15231)\n\n* * *\n\n## Resources​\n\n[Description of the product catalog in Financial Services Creatio product lineup](https://academy.creatio.com/docs/8.x/creatio-apps/category/product-catalog)\n\n  * Structure of automatic data binding\n  * Operating procedure of automatic data binding\n  * Add a custom structure for the object binding\n  * Call automatic data binding\n    * Call automatic data binding from the front-end\n    * Call automatic data binding from the back-end\n  * See also\n  * Resources\n\n\n",
  "analysis": {
    "word_count": 1076,
    "key_concepts": ["configuration", "detail", "lookup", "operation", "package", "notification"],
    "use_cases": [
      "building applications",
      "custom development",
      "API integration",
      "system administration",
      "user management"
    ],
    "related_topics": [],
    "difficulty": "intermediate",
    "ai_tags": ["creatio", "package", "intermediate", "operation", "documentation", "detail", "lookup", "configuration"]
  },
  "ai_optimized": true,
  "processed_at": "2025-07-28T13:19:24.665624"
}
