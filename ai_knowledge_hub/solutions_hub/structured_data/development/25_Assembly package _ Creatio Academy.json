{
  "id": 25,
  "url": "https://academy.creatio.com/docs/8.x/dev/development-on-creatio-platform/8.1/development-tools/packages/assembly-package",
  "title": "Assembly package | Creatio Academy",
  "category": "development",
  "content": "This is documentation for Creatio 8.1 . For up-to-date documentation, see the latest version ( 8.3 ). Version: 8.1 On this page Level: advanced An assembly package is a package whose source and automatically generated code is compiled into a separate assembly. A new assembly package is created when you add a new package. This streamlines change transfer between environments. The purpose of an assembly package is: To streamline development. Since the assembly package is the only one compiled, the compilation time is reduced. To accelerate feature deployment. Since the assembly package includes a precompiled part, the compilation is not necessary. Assembly package structure ​ The assembly package structure in the file system is identical to the structure of a simple package. The main differences between an assembly package and a simple package are the values of Type (package type) and ProjectPath (relative path from the package root directory to the project file of the assembly package) properties in the descriptor.json file. Learn more: Package structure . Creatio adds or updates auxiliary files of the assembly package in the following cases: when you download an assembly package to the file system if the file system development mode is enabled when you compile an assembly package if the file system development mode is disabled when you upload an assembly package to the version control system regardless of the file system development mode status View auxiliary files of the assembly package in the table below. Auxiliary file Description SomePackage.csproj The project file that contains the assembly package to compile. Directory.Build.targets The file that excludes the assembly package from the main configuration compilation. Assembly package dependencies ​ You can add a link to an external assembly to the current package in the following ways: If you need to use an external assembly from the current package , Creatio adds a link to an external assembly to an assembly package automatically. If you need to use an external assembly from another package , add a link to an external assembly from the current assembly package using the existing 3rd Party References section. Open the SomePackage.csproj file of the assembly package. Reference the required external assembly using the section of external libraries ( <ItemGroup Label=\"3rd Party References\"></ItemGroup> ). View an example that links to: Quartz.dll library located in the core third-party library located in a simple package from the ..\\Terrasoft.Configuration\\Lib directory CrtBaseConsts.dll library located in an assembly package from the ..\\Terrasoft.Configuration\\Lib directory Example that links to external assemblies < ItemGroup Label = \" 3rd Party References \" > <!-- Example that adds a library from the core. --> < Reference Include = \" Quartz \" > < HintPath > $(CoreLibPath)\\Quartz.dll </ HintPath > < Private > false </ Private > </ Reference > <!-- Example that adds a library from a simple package. --> < Reference Include = \" ClassLibrary2 \" > < HintPath > $(ConfLibPath)/ClassLibrary2.SomePackage.dll </ HintPath > < SpecificVersion > False </ SpecificVersion > < Private > False </ Private > </ Reference > <!-- Example that adds a library from an assembly package. --> < Reference Include = \" IntegrationApi \" > < HintPath > $(RelativePkgFolderPath)/CrtBaseConsts/Autogenerated/Lib/IntegrationApi.CrtBaseConsts.dll </ HintPath > < SpecificVersion > False </ SpecificVersion > < Private > False </ Private > </ Reference > </ ItemGroup > note We do not recommend adding a link to an external assembly from another package to the current package using other assembly package sections since all other sections are generated automatically and manual changes are overridden after compilation. If you compile the package using Creatio IDE, the TargetFramework of the project will match the TargetFramework of the core. If you compile the package using an external IDE, the default \"net472\" value will be used. The value is modifiable. Unlike the main configuration project, the assembly package project does not include third-party libraries. If you require third-party libraries, connect the core abstractions or external package assemblies to the project file of the assembly package. The assembly package contains the following link sections : system libraries external package assemblies ( <ItemGroup Label=\"Package Assembly References\"></ItemGroup> ) core libraries ( <ItemGroup Label=\"Core References\"></ItemGroup> ) libraries for dependent packages ( <ItemGroup Label=\"Core References\"></ItemGroup> ) external libraries ( <ItemGroup Label=\"3rd Party References\"></ItemGroup> ) Assembly package specifics ​ Creatio saves the assembly package to the database. Creatio copies the file content of the assembly package. Creatio does not compile the configuration. The assembly package is already compiled at the development stage and includes the runtime assembly. Creatio restarts the website, initializes the web services and class factories within the assembly package. Recommendations for assembly package naming ​ Do not use Terrasoft.Configuration namespace for the assembly package name. Use the following pattern for the assembly package name: SomeMaintainer.SomePackageOrArea.SomeFunctionality . For example, Microsoft.Office360.Authorization . Requirements for an assembly package ​ Object access is not supported via the OData protocol version 3. Use the OData protocol version 4 to access objects in an assembly package. Learn more: OData basics . Do not implement object business logic via event sub-processes in the Object Designer. Use EntityEventListener to work with the event model. The EntityEventListener event set does not match the Creatio IDE event model fully. Learn more about the Entity event layer: Configure object events . The C# code of the package does not support usage of Entity types (e. g., typecasting to them) or the creation of their instances using the new operator or reflection. This applies to code written in any IDE. You cannot access new Entity object columns and methods within the assembly package via the Entity base class. For example, ColumnValues.GetByName(nameValues) . The types of the current assembly package are not available in the configuration. However, they are available for its dependency assembly packages. Operations with assembly packages ​ You can execute the following operations with assembly packages: add an assembly package move configuration elements to the assembly package compile an assembly package delete an assembly package Add an assembly package ​ Open the Configuration section . Instructions: Open the Configuration section . Create a package . To do this, click in the package workspace. This opens the Package window. Fill out the package properties . The Compile into a separate assembly checkbox that marks a package as assembly package is selected out of the box. Save the changes . Set up the package dependencies . Instructions: Set up the package dependencies . Implement custom functionality . Compile the assembly package in Creatio .NET Framework. Read more >>> Transfer the assembly package to a .NET environment . Compile the transferred assembly package . Read more >>> The platform order (.NET Framework and .NET) does not affect the development of an assembly package. However, it is important to compile it in both Creatio .NET Framework and .NET. This will enable users to use the package in both Creatio .NET Framework and .NET. As a result , the assembly package will be ready for deployment to the end-users. Move configuration elements to the assembly package ​ Prepare configuration elements for relocation to the assembly package by modifying the element code so that it follows the assembly package specifics. Add an assembly package . Read more >>> Set up the assembly package dependencies . The assembly package dependencies must match the dependencies of the simple package from which to move the configuration elements. Move the configuration elements . To move all configuration elements , click → Move all elements in the menu of the package from which to move the configuration elements. To move a single configuration element , click → Move to another package in the menu of the package from which to move the configuration elements. Compile the configuration . Instructions: Compile the configuration . Update the dependencies of inheritor packages . To do this, change their parent package to the assembly package to which you moved the configuration elements. As a result , Creatio will move the configuration elements to the assembly package. Compile an assembly package ​ Compile an assembly package to eliminate the need to recompile the entire configuration and accelerate development. Creatio lets you compile an assembly package that contains C# code of configuration elements schemas. Compile an assembly package for both Creatio .NET Framework and .NET. This lets you deliver an assembly package to other environments regardless of the framework. We do not recommend compiling an assembly package only for the framework of the current Creatio instance. In this case, the package must be compiled after the installation, which the user might not know. You can compile an assembly package in several ways : in a universal way using the command line Compile an assembly package in a universal way ​ Compile an assembly package in the current Creatio instance. You can use multiple compilation types. Read more >>> Install an assembly package into a Creatio instance that uses a different framework. For example, install the assembly package into Creatio .NET if you developed the package in Creatio .NET Framework and vice versa. Install an assembly package together with all packages, dependencies, and configuration elements schemas. The installation of an assembly package is similar to that of a simple package. Learn more: Transfer the package . Compile the installed assembly package . You can use multiple compilation types. Read more >>> Export the compiled assembly package similarly to a simple package. Instructions: Transfer the package . As a result, Creatio will save the binary files of the compiled assembly package to the following directories: ..\\Terrasoft.WebApp\\Terrasoft.Configuration\\Pkg[Package name]\\Files\\Bin[Package name].dll for Creatio .NET Framework . ..\\Terrasoft.WebApp\\Terrasoft.Configuration\\Pkg[Package name]\\Files\\Bin\\netstandard[Package name].dll for Creatio .NET . Important Deliver the binary files of the compiled assembly package together with the assembly package to ensure the functionality operates as intended. Save the compiled assembly package (optional). Move the assembly package together with the binary files from ..\\Files\\Bin folder to the repository if you use a version control system. Save the assembly package and binary files both for Creatio .NET Framework and .NET to the repository if you are going to use the package in both frameworks. As a result , Creatio will compile the assembly package for .NET Framework and .NET. You can deliver the assembly packages to other environments or publish it on Creatio Marketplace. Compilation types of assembly package: compile the configuration and assembly packages compile the assembly package To compile the configuration and assembly packages , go to the Creatio IDE's toolbar → drop-down list of the Compile button → click the Compile all button. To compile the assembly package : Click → Compile in the package menu of Creatio IDE. Publish the schema . If you are editing a Source code type schema in an assembly package, Creatio compiles only the assembly package instead of the entire configuration. Otherwise, the entire configuration is compiled. As a result , Creatio will: compile the assembly package. If the assembly package inherits from uncompiled assembly packages, Creatio will compile them as well. save the binary files of the compiled assembly package to the following directories: ..\\Terrasoft.WebApp\\Terrasoft.Configuration\\Pkg[Package name]\\Files\\Bin[Package name].dll for Creatio .NET Framework . ..\\Terrasoft.WebApp\\Terrasoft.Configuration\\Pkg[Package name]\\Files\\Bin\\netstandard[Package name].dll for Creatio .NET . Compile an assembly package (command line) ​ Important Compile an assembly package for Creatio .NET Framework and .NET using the command line if the current assembly package does not depend on other packages, including user-made packages. You can compile an assembly package for Creatio .NET Framework and .NET using the command line in multiple ways : Run the commands below at the command line interface (command prompt). Create and execute *.cmd or *.bat files that include the commands below. Commands that compile an assembly package for Creatio .NET Framework and .NET set csprojPath = C: \\Creatio\\ Terrasoft.WebApp\\ Terrasoft.Configuration\\ Pkg\\ SomePackage\\ Files\\ SomePackage.csproj set framework_CoreLibPath = C: \\frameworkDistributive\\ 7.18.5.1990_ Studio_Softkey_MSSQL_ENU\\ Terrasoft.WebApp\\ bin set framework_RelativePkgFolderPath = C: \\frameworkDistributive\\ 7.18.5.1990_ Studio_Softkey_MSSQL_ENU\\ Terrasoft.WebApp\\ Terrasoft.Configuration\\ Pkg set netCore_CoreLibPath = C: \\netCoreDistributive\\ 7.18.5.1989_ Studio_Linux_Softkey_PostgreSQL_ENU_NetCore set netCore_RelativePkgFolderPath = C: \\netCoreDistributive\\ 7.18.5.1989_ Studio_Linux_Softkey_PostgreSQL_ENU_NetCore\\ Terrasoft.Configuration\\ Pkg set CoreLibPath = % framework_CoreLibPath % set RelativePkgFolderPath = % framework_RelativePkgFolderPath % set CoreTargetFramework = net472 dotnet build % csprojPath % set CoreLibPath = % netCore_CoreLibPath % set RelativePkgFolderPath = % netCore_RelativePkgFolderPath % set CoreTargetFramework = netstandard2 .0 dotnet build % csprojPath % Pause Where SomePackage is the assembly package name. As a result , Creatio will: compile the assembly packages for .NET Framework and .NET. save the binary files of the compiled assembly package to the following directories: ..\\Terrasoft.WebApp\\Terrasoft.Configuration\\Pkg[Package name]\\Files\\Bin[Package name].dll for Creatio .NET Framework . ..\\Terrasoft.WebApp\\Terrasoft.Configuration\\Pkg[Package name]\\Files\\Bin\\netstandard[Package name].dll for Creatio .NET . Deliver the binary files of the compiled assembly package together with the assembly package to other environments or publish them on Creatio Marketplace to ensure the functionality operates as intended. Delete an assembly package ​ To delete an assembly package, click → Delete in the menu of the package from which to move the configuration elements. Learn more about deleting a simple package: Manage packages . As a result , Creatio will delete the assembly package from the configuration. See also ​ OData basics Configure object events Packages overview Environment overview Creatio IDE overview Delivery using the Configuration section Convert a package Assembly package structure Assembly package dependencies Assembly package specifics Recommendations for assembly package naming Requirements for an assembly package Operations with assembly packages Add an assembly package Move configuration elements to the assembly package Compile an assembly package Delete an assembly package See also",
  "markdown": "Assembly package | Creatio Academy\n\nSkip to main content\n\n  * [Creatio](https://www.creatio.com/)\n  * [Community](https://community.creatio.com/)\n  * [Marketplace](https://marketplace.creatio.com/)\n  * [Knowledge Hub](https://knowledge-hub.creatio.com/)\n\n\n\nThis is documentation for Creatio **8.1**.\n\nFor up-to-date documentation, see the **[latest version](/docs/8.x/dev/development-on-creatio-platform/development-tools/packages/assembly-package)** (8.3).\n\nVersion: 8.1\n\nOn this page\n\nLevel: advanced\n\nAn **assembly package** is a package whose source and automatically generated code is compiled into a separate assembly. A new assembly package is created when you add a new package. This streamlines change transfer between environments.\n\nThe **purpose** of an assembly package is:\n\n  * To streamline development. Since the assembly package is the only one compiled, the compilation time is reduced.\n  * To accelerate feature deployment. Since the assembly package includes a precompiled part, the compilation is not necessary.\n\n\n\n## Assembly package structure​\n\nThe assembly package structure in the file system is identical to the structure of a simple package. The main differences between an assembly package and a simple package are the values of `Type` (package type) and `ProjectPath` (relative path from the package root directory to the project file of the assembly package) properties in the `descriptor.json` file. Learn more: [Package structure](https://academy.creatio.com/documents?ver=8.1&id=15121&anchor=title-2105-2).\n\nCreatio adds or updates auxiliary files of the assembly package in the following cases:\n\n  * when you download an assembly package to the file system if the file system development mode is enabled\n  * when you compile an assembly package if the file system development mode is disabled\n  * when you upload an assembly package to the version control system regardless of the file system development mode status\n\n\n\nView **auxiliary files** of the assembly package in the table below.\n\nAuxiliary file| Description| SomePackage.csproj| The project file that contains the assembly package to compile.| Directory.Build.targets| The file that excludes the assembly package from the main configuration compilation.  \n---|---  \n  \n## Assembly package dependencies​\n\nYou can add a link to an external assembly to the current package in the following ways:\n\n  * If you need to use an **external assembly from the current package** , Creatio adds a link to an external assembly to an assembly package automatically.\n\n  * If you need to use an **external assembly from another package** , add a link to an external assembly from the current assembly package using the existing `3rd Party References` section.\n\n    1. Open the `SomePackage.csproj` file of the assembly package.\n    2. Reference the required external assembly using the section of external libraries (`<ItemGroup Label=\"3rd Party References\"></ItemGroup>`).\n\nView an example that links to:\n\n    * `Quartz.dll` library located in the core\n    * third-party library located in a simple package from the `..\\Terrasoft.Configuration\\Lib` directory\n    * `CrtBaseConsts.dll` library located in an assembly package from the `..\\Terrasoft.Configuration\\Lib` directory\n\nExample that links to external assemblies\n    \n    <ItemGroup Label=\"3rd Party References\">  \n        <!-- Example that adds a library from the core. -->  \n        <Reference Include=\"Quartz\">  \n            <HintPath>$(CoreLibPath)\\Quartz.dll</HintPath>  \n            <Private>false</Private>  \n        </Reference>  \n        <!-- Example that adds a library from a simple package. -->  \n        <Reference Include=\"ClassLibrary2\">  \n            <HintPath>$(ConfLibPath)/ClassLibrary2.SomePackage.dll</HintPath>  \n            <SpecificVersion>False</SpecificVersion>  \n            <Private>False</Private>  \n        </Reference>  \n        <!-- Example that adds a library from an assembly package. -->  \n        <Reference Include=\"IntegrationApi\">  \n            <HintPath>$(RelativePkgFolderPath)/CrtBaseConsts/Autogenerated/Lib/IntegrationApi.CrtBaseConsts.dll</HintPath>  \n            <SpecificVersion>False</SpecificVersion>  \n            <Private>False</Private>  \n        </Reference>  \n    </ItemGroup>  \n    \n\n\n\n\nnote\n\nWe do not recommend adding a link to an external assembly from another package to the current package using other assembly package sections since all other sections are generated automatically and manual changes are overridden after compilation.\n\nIf you compile the package using Creatio IDE, the `TargetFramework` of the project will match the `TargetFramework` of the core. If you compile the package using an external IDE, the default \"net472\" value will be used. The value is modifiable.\n\nUnlike the main configuration project, the assembly package project does not include third-party libraries. If you require third-party libraries, connect the core abstractions or external package assemblies to the project file of the assembly package.\n\nThe assembly package contains the following **link sections** :\n\n  * system libraries\n  * external package assemblies (`<ItemGroup Label=\"Package Assembly References\"></ItemGroup>`)\n  * core libraries (`<ItemGroup Label=\"Core References\"></ItemGroup>`)\n  * libraries for dependent packages (`<ItemGroup Label=\"Core References\"></ItemGroup>`)\n  * external libraries (`<ItemGroup Label=\"3rd Party References\"></ItemGroup>`)\n\n\n\n## Assembly package specifics​\n\n  * Creatio saves the assembly package to the database.\n  * Creatio copies the file content of the assembly package.\n  * Creatio does not compile the configuration. The assembly package is already compiled at the development stage and includes the runtime assembly.\n  * Creatio restarts the website, initializes the web services and class factories within the assembly package.\n\n\n\n## Recommendations for assembly package naming​\n\n  * Do not use `Terrasoft.Configuration` namespace for the assembly package name.\n  * Use the following pattern for the assembly package name: `SomeMaintainer.SomePackageOrArea.SomeFunctionality`. For example, `Microsoft.Office360.Authorization`.\n\n\n\n## Requirements for an assembly package​\n\n  * Object access is not supported via the OData protocol version 3. Use the OData protocol version 4 to access objects in an assembly package. Learn more: [OData basics](https://academy.creatio.com/documents?ver=8.1&id=15431).\n  * Do not implement object business logic via event sub-processes in the Object Designer. Use `EntityEventListener` to work with the event model. The `EntityEventListener` event set does not match the Creatio IDE event model fully. Learn more about the `Entity` event layer: [Configure object events](https://academy.creatio.com/documents?ver=8.1&id=15267).\n  * The C# code of the package does not support usage of `Entity` types (e. g., typecasting to them) or the creation of their instances using the `new` operator or reflection. This applies to code written in any IDE.\n  * You cannot access new `Entity` object columns and methods within the assembly package via the `Entity` base class. For example, `ColumnValues.GetByName(nameValues)`.\n  * The types of the current assembly package are not available in the configuration. However, they are available for its dependency assembly packages.\n\n\n\n## Operations with assembly packages​\n\nYou can execute the following operations with assembly packages:\n\n  * add an assembly package\n  * move configuration elements to the assembly package\n  * compile an assembly package\n  * delete an assembly package\n\n\n\n### Add an assembly package​\n\n  1. **Open the Configuration section**. Instructions: [Open the **Configuration** section](https://academy.creatio.com/documents?ver=8.1&id=15101&anchor=title-2093-2).\n\n  2. **Create a package**. To do this, click ![](https://d3a7ykdi65m4cy.cloudfront.net/ac-en/s3fs-public/documentation/sdk/en/BPMonlineWebSDK/Screenshots/CreateNewPackage/scr_pkg_create_button.png) in the package workspace. This opens the **Package** window.\n\n  3. **Fill out the package properties**. The **Compile into a separate assembly** checkbox that marks a package as assembly package is selected out of the box.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/PackageAssembly/scr_CreatePackageAssembly.png)\n\n  4. **Save the changes**.\n\n  5. **Set up the package dependencies**. Instructions: [Set up the package dependencies](https://academy.creatio.com/documents?ver=8.1&id=15122&anchor=title-15122-2).\n\n  6. **Implement custom functionality**.\n\n  7. **Compile the assembly package** in Creatio .NET Framework. [Read more >>>](https://academy.creatio.com/documents?ver=8.1&id=15125&anchor=title-3554-4)\n\n  8. **Transfer the assembly package to a .NET environment**.\n\n  9. **Compile the transferred assembly package**. [Read more >>>](https://academy.creatio.com/documents?ver=8.1&id=15125&anchor=title-3554-4)\n\n\n\n\nThe platform order (.NET Framework and .NET) does not affect the development of an assembly package. However, it is important to compile it in both Creatio .NET Framework and .NET. This will enable users to use the package in both Creatio .NET Framework and .NET.\n\n**As a result** , the assembly package will be ready for deployment to the end-users.\n\n### Move configuration elements to the assembly package​\n\n  1. **Prepare configuration elements for relocation** to the assembly package by modifying the element code so that it follows the assembly package specifics.\n\n  2. **Add an assembly package**. [Read more >>>](https://academy.creatio.com/documents?ver=8.1&id=15125&anchor=title-3554-3)\n\n  3. **Set up the assembly package dependencies**. The assembly package dependencies must match the dependencies of the simple package from which to move the configuration elements.\n\n  4. **Move the configuration elements**.\n\n     * To **move all configuration elements** , click ![](https://d3a7ykdi65m4cy.cloudfront.net/ac-en/s3fs-public/documentation/sdk/en/BPMonlineWebSDK/Screenshots/PopulateDeliveryType/8.1/scr_open_properties.png) → **Move all elements** in the menu of the package from which to move the configuration elements.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/PackageAssembly/scr_MoveAllElements.png)\n\n     * To **move a single configuration element** , click ![](https://d3a7ykdi65m4cy.cloudfront.net/ac-en/s3fs-public/documentation/sdk/en/BPMonlineWebSDK/Screenshots/PopulateDeliveryType/8.1/scr_open_properties.png) → **Move to another package** in the menu of the package from which to move the configuration elements.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/PackageAssembly/scr_MoveToAnotherPackage.png)\n\n  5. **Compile the configuration**. Instructions: [Compile the configuration](https://academy.creatio.com/documents?ver=8.1&id=15101&anchor=title-2093-8).\n\n  6. **Update the dependencies of inheritor packages**. To do this, change their parent package to the assembly package to which you moved the configuration elements.\n\n\n\n\n**As a result** , Creatio will move the configuration elements to the assembly package.\n\n### Compile an assembly package​\n\nCompile an assembly package to eliminate the need to recompile the entire configuration and accelerate development. Creatio lets you compile an assembly package that contains C# code of configuration elements schemas.\n\nCompile an assembly package for both Creatio .NET Framework and .NET. This lets you deliver an assembly package to other environments regardless of the framework. We do not recommend compiling an assembly package only for the framework of the current Creatio instance. In this case, the package must be compiled after the installation, which the user might not know.\n\nYou can compile an assembly package in several **ways** :\n\n  * in a universal way\n  * using the command line\n\n\n\n#### Compile an assembly package in a universal way​\n\n  1. **Compile an assembly package** in the current Creatio instance. You can use multiple compilation types. [Read more >>>](https://academy.creatio.com/documents?ver=8.1&id=15125&anchor=compilationTypes)\n\n  2. **Install an assembly package** into a Creatio instance that uses a different framework. For example, install the assembly package into Creatio .NET if you developed the package in Creatio .NET Framework and vice versa. Install an assembly package together with all packages, dependencies, and configuration elements schemas. The installation of an assembly package is similar to that of a simple package. Learn more: [Transfer the package](https://academy.creatio.com/documents?ver=8.1&id=15203&anchor=title-1226-1).\n\n  3. **Compile the installed assembly package**. You can use multiple compilation types. [Read more >>>](https://academy.creatio.com/documents?ver=8.1&id=15125&anchor=compilationTypes)\n\n  4. **Export the compiled assembly package** similarly to a simple package. Instructions: [Transfer the package](https://academy.creatio.com/documents?ver=8.1&id=15203&anchor=title-1226-1).\n\nAs a result, Creatio will save the binary files of the compiled assembly package to the following directories:\n\n     * `..\\Terrasoft.WebApp\\Terrasoft.Configuration\\Pkg[Package name]\\Files\\Bin[Package name].dll` for Creatio **.NET Framework**.\n     * `..\\Terrasoft.WebApp\\Terrasoft.Configuration\\Pkg[Package name]\\Files\\Bin\\netstandard[Package name].dll` for Creatio **.NET**.\n\nImportant\n\nDeliver the binary files of the compiled assembly package together with the assembly package to ensure the functionality operates as intended.\n\n  5. **Save the compiled assembly package** (optional). Move the assembly package together with the binary files from `..\\Files\\Bin` folder to the repository if you use a version control system. Save the assembly package and binary files both for Creatio .NET Framework and .NET to the repository if you are going to use the package in both frameworks.\n\n\n\n\n**As a result** , Creatio will compile the assembly package for .NET Framework and .NET. You can deliver the assembly packages to other environments or publish it on Creatio Marketplace.\n\n**Compilation types** of assembly package:\n\n  * compile the configuration and assembly packages\n  * compile the assembly package\n\n\n\nTo **compile the configuration and assembly packages** , go to the Creatio IDE's toolbar → drop-down list of the **Compile** button → click the **Compile all** button.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/PackageAssembly/scr_CompileAll.png)\n\nTo **compile the assembly package** :\n\n  1. **Click** ![](https://d3a7ykdi65m4cy.cloudfront.net/ac-en/s3fs-public/documentation/sdk/en/BPMonlineWebSDK/Screenshots/PopulateDeliveryType/8.1/scr_open_properties.png) → **Compile** in the package menu of Creatio IDE.\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/PackageAssembly/scr_Compile.png)\n\n  2. **Publish the schema**. If you are editing a **Source code** type schema in an assembly package, Creatio compiles only the assembly package instead of the entire configuration. Otherwise, the entire configuration is compiled.\n\n\n\n\n**As a result** , Creatio will:\n\n  * compile the assembly package. If the assembly package inherits from uncompiled assembly packages, Creatio will compile them as well.\n\n  * save the binary files of the compiled assembly package to the following directories:\n\n    * `..\\Terrasoft.WebApp\\Terrasoft.Configuration\\Pkg[Package name]\\Files\\Bin[Package name].dll` for Creatio **.NET Framework**.\n    * `..\\Terrasoft.WebApp\\Terrasoft.Configuration\\Pkg[Package name]\\Files\\Bin\\netstandard[Package name].dll` for Creatio **.NET**.\n\n\n\n#### Compile an assembly package (command line)​\n\nImportant\n\nCompile an assembly package for Creatio .NET Framework and .NET using the command line if the current assembly package does not depend on other packages, including user-made packages.\n\nYou can compile an assembly package for Creatio .NET Framework and .NET using the command line in **multiple ways** :\n\n  * Run the commands below at the command line interface (command prompt).\n  * Create and execute *.cmd or *.bat files that include the commands below.\n\n\n\nCommands that compile an assembly package for Creatio .NET Framework and .NET\n    \n    \n    set csprojPath = C: \\Creatio\\ Terrasoft.WebApp\\ Terrasoft.Configuration\\ Pkg\\ SomePackage\\ Files\\ SomePackage.csproj  \n    set framework_CoreLibPath = C: \\frameworkDistributive\\ 7.18.5.1990_ Studio_Softkey_MSSQL_ENU\\ Terrasoft.WebApp\\ bin  \n    set framework_RelativePkgFolderPath = C: \\frameworkDistributive\\ 7.18.5.1990_ Studio_Softkey_MSSQL_ENU\\ Terrasoft.WebApp\\ Terrasoft.Configuration\\ Pkg  \n    set netCore_CoreLibPath = C: \\netCoreDistributive\\ 7.18.5.1989_ Studio_Linux_Softkey_PostgreSQL_ENU_NetCore  \n    set netCore_RelativePkgFolderPath = C: \\netCoreDistributive\\ 7.18.5.1989_ Studio_Linux_Softkey_PostgreSQL_ENU_NetCore\\ Terrasoft.Configuration\\ Pkg  \n      \n    set CoreLibPath = % framework_CoreLibPath %  \n        set RelativePkgFolderPath = % framework_RelativePkgFolderPath %  \n        set CoreTargetFramework = net472  \n      \n    dotnet build % csprojPath %  \n      \n        set CoreLibPath = % netCore_CoreLibPath %  \n        set RelativePkgFolderPath = % netCore_RelativePkgFolderPath %  \n        set CoreTargetFramework = netstandard2 .0  \n      \n    dotnet build % csprojPath %  \n      \n        Pause  \n    \n\nWhere `SomePackage` is the assembly package name.\n\n**As a result** , Creatio will:\n\n  * compile the assembly packages for .NET Framework and .NET.\n\n  * save the binary files of the compiled assembly package to the following directories:\n\n    * `..\\Terrasoft.WebApp\\Terrasoft.Configuration\\Pkg[Package name]\\Files\\Bin[Package name].dll` for Creatio **.NET Framework**.\n    * `..\\Terrasoft.WebApp\\Terrasoft.Configuration\\Pkg[Package name]\\Files\\Bin\\netstandard[Package name].dll` for Creatio **.NET**.\n\n\n\nDeliver the binary files of the compiled assembly package together with the assembly package to other environments or publish them on Creatio Marketplace to ensure the functionality operates as intended.\n\n### Delete an assembly package​\n\nTo delete an assembly package, click ![](https://d3a7ykdi65m4cy.cloudfront.net/ac-en/s3fs-public/documentation/sdk/en/BPMonlineWebSDK/Screenshots/PopulateDeliveryType/8.1/scr_open_properties.png) → **Delete** in the menu of the package from which to move the configuration elements. Learn more about deleting a simple package: [Manage packages](https://academy.creatio.com/documents?ver=8.1&id=15101&anchor=title-2093-5).\n\n![](https://academy.creatio.com/sites/default/files/documentation/sdk/ru/BPMonlineWebSDK/Screenshots/PackageAssembly/scr_Delete.png)\n\n**As a result** , Creatio will delete the assembly package from the configuration.\n\n* * *\n\n## See also​\n\n[OData basics](https://academy.creatio.com/documents?ver=8.1&id=15431)\n\n[Configure object events](https://academy.creatio.com/documents?ver=8.1&id=15267)\n\n[Packages overview](https://academy.creatio.com/documents?ver=8.1&id=15121)\n\n[Environment overview](https://academy.creatio.com/documents?ver=8.1&id=15201)\n\n[Creatio IDE overview](https://academy.creatio.com/documents?ver=8.1&id=15101)\n\n[Delivery using the Configuration section](https://academy.creatio.com/documents?ver=8.1&id=15203)\n\n[Convert a package](https://academy.creatio.com/documents?ver=8.1&id=15131)\n\n  * Assembly package structure\n  * Assembly package dependencies\n  * Assembly package specifics\n  * Recommendations for assembly package naming\n  * Requirements for an assembly package\n  * Operations with assembly packages\n    * Add an assembly package\n    * Move configuration elements to the assembly package\n    * Compile an assembly package\n    * Delete an assembly package\n  * See also\n\n\n",
  "word_count": 2223,
  "processed_at": "2025-07-28T12:58:56.919359"
}
