#!/usr/bin/env python3
"""
Credential Management for Creatio Remote Connections
Securely stores and retrieves authentication credentials using keyring
"""

import os
import sys
import json
import keyring
import getpass
from typing import Dict, Any, Optional
import argparse
from pathlib import Path

class CreatioCredentialManager:
    """Manages secure credential storage for Creatio environments"""
    
    def __init__(self, service_name: str = "creatio-ai-hub"):
        self.service_name = service_name
        self.credential_keys = {
            'production': [
                'CREATIO_CLIENT_ID',
                'CREATIO_CLIENT_SECRET'
            ],
            'staging': [
                'CREATIO_STAGING_CLIENT_ID', 
                'CREATIO_STAGING_CLIENT_SECRET'
            ],
            'development': [
                'CREATIO_DEV_USERNAME',
                'CREATIO_DEV_PASSWORD'
            ]
        }
    
    def store_credential(self, key: str, value: str = None) -> bool:
        """Store a credential in the keyring"""
        try:
            if value is None:
                value = getpass.getpass(f"Enter value for {key}: ")
            
            keyring.set_password(self.service_name, key, value)
            print(f"✓ Credential '{key}' stored successfully")
            return True
        except Exception as e:
            print(f"✗ Failed to store credential '{key}': {e}")
            return False
    
    def get_credential(self, key: str) -> Optional[str]:
        """Retrieve a credential from the keyring"""
        try:
            return keyring.get_password(self.service_name, key)
        except Exception as e:
            print(f"Warning: Could not retrieve credential '{key}': {e}")
            return None
    
    def delete_credential(self, key: str) -> bool:
        """Delete a credential from the keyring"""
        try:
            keyring.delete_password(self.service_name, key)
            print(f"✓ Credential '{key}' deleted successfully")
            return True
        except Exception as e:
            print(f"✗ Failed to delete credential '{key}': {e}")
            return False
    
    def list_stored_credentials(self) -> Dict[str, bool]:
        """List which credentials are stored"""
        all_keys = []
        for env_keys in self.credential_keys.values():
            all_keys.extend(env_keys)
        
        stored = {}
        for key in all_keys:
            credential = self.get_credential(key)
            stored[key] = credential is not None
        
        return stored
    
    def setup_environment(self, env_name: str) -> bool:
        """Interactive setup for an environment's credentials"""
        if env_name not in self.credential_keys:
            print(f"Unknown environment: {env_name}")
            return False
        
        print(f"\\n=== Setting up credentials for {env_name.upper()} environment ===")
        
        success = True
        for key in self.credential_keys[env_name]:
            print(f"\\nSetting up: {key}")
            if not self.store_credential(key):
                success = False
        
        if success:
            print(f"\\n✓ All credentials for {env_name} environment configured successfully")
        else:
            print(f"\\n✗ Some credentials for {env_name} environment failed to configure")
        
        return success
    
    def validate_environment(self, env_name: str) -> bool:
        """Check if all required credentials for an environment are stored"""
        if env_name not in self.credential_keys:
            print(f"Unknown environment: {env_name}")
            return False
        
        missing = []
        for key in self.credential_keys[env_name]:
            if not self.get_credential(key):
                missing.append(key)
        
        if missing:
            print(f"Missing credentials for {env_name}: {', '.join(missing)}")
            return False
        else:
            print(f"All credentials for {env_name} are configured")
            return True
    
    def export_to_env_file(self, file_path: str, include_values: bool = False) -> bool:
        """Export credential keys to .env file format"""
        try:
            with open(file_path, 'w') as f:
                f.write("# Creatio Environment Credentials\\n")
                f.write("# Generated by Creatio Credential Manager\\n\\n")
                
                for env_name, keys in self.credential_keys.items():
                    f.write(f"# {env_name.upper()} Environment\\n")
                    for key in keys:
                        if include_values:
                            value = self.get_credential(key) or ""
                            f.write(f"{key}={value}\\n")
                        else:
                            f.write(f"# {key}=your_value_here\\n")
                    f.write("\\n")
            
            print(f"✓ Environment file exported to: {file_path}")
            return True
        except Exception as e:
            print(f"✗ Failed to export environment file: {e}")
            return False
    
    def import_from_env_file(self, file_path: str) -> bool:
        """Import credentials from .env file"""
        if not os.path.exists(file_path):
            print(f"Environment file not found: {file_path}")
            return False
        
        success_count = 0
        total_count = 0
        
        try:
            with open(file_path, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        key = key.strip()
                        value = value.strip()
                        
                        if key and value:
                            total_count += 1
                            if self.store_credential(key, value):
                                success_count += 1
            
            print(f"✓ Imported {success_count}/{total_count} credentials from {file_path}")
            return success_count == total_count
            
        except Exception as e:
            print(f"✗ Failed to import from environment file: {e}")
            return False
    
    def cleanup_all_credentials(self) -> bool:
        """Remove all stored credentials"""
        print("⚠️  This will delete ALL stored Creatio credentials!")
        confirm = input("Are you sure? (yes/no): ").lower()
        
        if confirm != 'yes':
            print("Cleanup cancelled")
            return False
        
        all_keys = []
        for env_keys in self.credential_keys.values():
            all_keys.extend(env_keys)
        
        success_count = 0
        for key in all_keys:
            if self.delete_credential(key):
                success_count += 1
        
        print(f"✓ Cleaned up {success_count}/{len(all_keys)} credentials")
        return success_count == len(all_keys)


def main():
    """Command line interface for credential manager"""
    parser = argparse.ArgumentParser(description='Creatio Credential Manager')
    parser.add_argument('--service', '-s', default='creatio-ai-hub', 
                       help='Keyring service name')
    
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Store command
    store_parser = subparsers.add_parser('store', help='Store a credential')
    store_parser.add_argument('key', help='Credential key name')
    store_parser.add_argument('--value', '-v', help='Credential value (will prompt if not provided)')
    
    # Get command
    get_parser = subparsers.add_parser('get', help='Retrieve a credential')
    get_parser.add_argument('key', help='Credential key name')
    
    # Delete command  
    delete_parser = subparsers.add_parser('delete', help='Delete a credential')
    delete_parser.add_argument('key', help='Credential key name')
    
    # List command
    list_parser = subparsers.add_parser('list', help='List stored credentials')
    
    # Setup command
    setup_parser = subparsers.add_parser('setup', help='Setup credentials for an environment')
    setup_parser.add_argument('environment', choices=['production', 'staging', 'development'],
                             help='Environment name')
    
    # Validate command
    validate_parser = subparsers.add_parser('validate', help='Validate environment credentials')
    validate_parser.add_argument('environment', choices=['production', 'staging', 'development'],
                                help='Environment name')
    
    # Export command
    export_parser = subparsers.add_parser('export', help='Export to .env file')
    export_parser.add_argument('file_path', help='Output file path')
    export_parser.add_argument('--include-values', action='store_true',
                              help='Include actual credential values (INSECURE)')
    
    # Import command
    import_parser = subparsers.add_parser('import', help='Import from .env file')
    import_parser.add_argument('file_path', help='Input file path')
    
    # Cleanup command
    cleanup_parser = subparsers.add_parser('cleanup', help='Remove all credentials')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    manager = CreatioCredentialManager(args.service)
    
    try:
        if args.command == 'store':
            success = manager.store_credential(args.key, args.value)
            sys.exit(0 if success else 1)
            
        elif args.command == 'get':
            value = manager.get_credential(args.key)
            if value:
                print(value)
                sys.exit(0)
            else:
                print(f"Credential '{args.key}' not found")
                sys.exit(1)
                
        elif args.command == 'delete':
            success = manager.delete_credential(args.key)
            sys.exit(0 if success else 1)
            
        elif args.command == 'list':
            stored = manager.list_stored_credentials()
            print("\\nStored Credentials Status:")
            print("-" * 40)
            for key, is_stored in stored.items():
                status = "✓ Stored" if is_stored else "✗ Missing"
                print(f"{key:<30} {status}")
            print()
            
        elif args.command == 'setup':
            success = manager.setup_environment(args.environment)
            sys.exit(0 if success else 1)
            
        elif args.command == 'validate':
            success = manager.validate_environment(args.environment)
            sys.exit(0 if success else 1)
            
        elif args.command == 'export':
            success = manager.export_to_env_file(args.file_path, args.include_values)
            sys.exit(0 if success else 1)
            
        elif args.command == 'import':
            success = manager.import_from_env_file(args.file_path)
            sys.exit(0 if success else 1)
            
        elif args.command == 'cleanup':
            success = manager.cleanup_all_credentials()
            sys.exit(0 if success else 1)
            
    except KeyboardInterrupt:
        print("\\nOperation cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()
