version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        BUILD_VERSION: ${BUILD_VERSION:-dev}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
    ports:
      - "8000:8000"
      - "8001:8001"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=sqlite:///ai_knowledge_hub/knowledge_hub.db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
      - API_RATE_LIMIT=1000
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./ai_knowledge_hub:/app/ai_knowledge_hub
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - creatio-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - creatio-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Elasticsearch for advanced search (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - creatio-network
    restart: unless-stopped
    profiles: ["full"] # Optional service

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - creatio-network
    restart: unless-stopped
    profiles: ["production"]

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - creatio-network
    restart: unless-stopped
    profiles: ["monitoring"]

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - creatio-network
    restart: unless-stopped
    profiles: ["monitoring"]

  # Database backup service
  backup:
    image: alpine:latest
    volumes:
      - ./ai_knowledge_hub:/app/ai_knowledge_hub:ro
      - ./backups:/backups
    command: |
      sh -c "
        apk add --no-cache sqlite tar gzip &&
        while true; do
          timestamp=$$(date +%Y%m%d_%H%M%S) &&
          mkdir -p /backups/$$timestamp &&
          cp /app/ai_knowledge_hub/knowledge_hub.db /backups/$$timestamp/ &&
          tar -czf /backups/backup_$$timestamp.tar.gz -C /backups $$timestamp &&
          rm -rf /backups/$$timestamp &&
          find /backups -name 'backup_*.tar.gz' -mtime +7 -delete &&
          sleep 86400
        done
      "
    networks:
      - creatio-network
    restart: unless-stopped
    profiles: ["backup"]

volumes:
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  creatio-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
