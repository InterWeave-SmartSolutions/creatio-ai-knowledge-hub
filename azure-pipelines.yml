trigger:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md
    - docs/*

pr:
  branches:
    include:
    - main
    - develop

variables:
  - group: creatio-ai-hub-variables
  - name: pythonVersion
    value: '3.11'
  - name: vmImageName
    value: 'ubuntu-latest'
  - name: containerRegistry
    value: 'creatioaihub.azurecr.io'
  - name: imageRepository
    value: 'creatio-ai-knowledge-hub'
  - name: dockerfilePath
    value: '$(Build.SourcesDirectory)/Dockerfile'
  - name: tag
    value: '$(Build.BuildId)'

stages:
- stage: CodeQuality
  displayName: 'Code Quality & Security'
  jobs:
  - job: CodeQuality
    displayName: 'Code Quality Checks'
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - task: Cache@2
      inputs:
        key: 'python | "$(Agent.OS)" | requirements*.txt'
        restoreKeys: |
          python | "$(Agent.OS)"
          python
        path: $(Pipeline.Workspace)/.pip
      displayName: 'Cache pip packages'

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
      displayName: 'Install dependencies'

    - script: |
        black --check --diff .
      displayName: 'Code formatting check (Black)'

    - script: |
        isort --check-only --diff .
      displayName: 'Import sorting check (isort)'

    - script: |
        flake8 . --output-file=flake8-report.txt
      displayName: 'Linting (flake8)'

    - script: |
        mypy . --html-report mypy-report --cobertura-xml-report mypy-coverage.xml
      displayName: 'Type checking (mypy)'
      continueOnError: true

    - script: |
        bandit -r . -f json -o bandit-report.json
      displayName: 'Security check (bandit)'
      continueOnError: true

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Code Quality Tests'
      condition: succeededOrFailed()

    - task: PublishHtmlReport@1
      inputs:
        reportDir: 'mypy-report'
        tabName: 'MyPy Type Check Report'

- stage: Test
  displayName: 'Test Stage'
  dependsOn: CodeQuality
  jobs:
  - job: UnitTests
    displayName: 'Unit Tests'
    pool:
      vmImage: $(vmImageName)
    strategy:
      matrix:
        Python39:
          python.version: '3.9'
        Python310:
          python.version: '3.10'
        Python311:
          python.version: '3.11'

    services:
      redis:
        image: redis:7-alpine
        ports:
          6379:6379

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
      displayName: 'Use Python $(python.version)'

    - script: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg tesseract-ocr
      displayName: 'Install system dependencies'

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
      displayName: 'Install Python dependencies'

    - script: |
        cat > .env.test << EOF
        ENVIRONMENT=test
        DATABASE_URL=sqlite:///test_knowledge_hub.db
        REDIS_URL=redis://localhost:6379
        SECRET_KEY=test-secret-key-for-testing-only
        API_RATE_LIMIT=1000
        EOF
      displayName: 'Create test environment file'

    - script: |
        pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html --junitxml=junit/test-results.xml
      displayName: 'Run unit tests'
      env:
        ENVIRONMENT: test

    - script: |
        pytest tests/integration/ -v --maxfail=1 --junitxml=junit/integration-test-results.xml
      displayName: 'Run integration tests'
      env:
        ENVIRONMENT: test

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Python $(python.version)'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

  - job: PerformanceTests
    displayName: 'Performance Tests'
    pool:
      vmImage: $(vmImageName)
    dependsOn: UnitTests
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'

    - script: |
        pip install -r requirements.txt
        pip install locust
      displayName: 'Install dependencies'

    - script: |
        locust -f tests/performance/locustfile.py --headless \
          --users 50 --spawn-rate 5 --run-time 2m \
          --host http://localhost:8000 \
          --html performance-report.html
      displayName: 'Run performance tests'

    - task: PublishHtmlReport@1
      inputs:
        reportDir: '.'
        tabName: 'Performance Test Report'

- stage: Build
  displayName: 'Build Stage'
  dependsOn: Test
  jobs:
  - job: Build
    displayName: 'Build Docker Image'
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: Docker@2
      displayName: 'Build and push image'
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

- stage: DeployStaging
  displayName: 'Deploy to Staging'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployStaging
    displayName: 'Deploy to Staging Environment'
    pool:
      vmImage: $(vmImageName)
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnection)
              appName: $(stagingWebAppName)
              containers: $(containerRegistry)/$(imageRepository):$(tag)

          - script: |
              ./scripts/smoke-tests.sh staging
            displayName: 'Run smoke tests'

          - task: SlackNotification@1
            inputs:
              SlackApiToken: $(slackApiToken)
              Channel: '#deployments'
              Message: 'Staging deployment completed successfully!'

- stage: DeployProduction
  displayName: 'Deploy to Production'
  dependsOn: Build
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  jobs:
  - deployment: DeployProduction
    displayName: 'Deploy to Production Environment'
    pool:
      vmImage: $(vmImageName)
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnection)
              appName: $(productionWebAppName)
              containers: $(containerRegistry)/$(imageRepository):$(tag)

          - script: |
              ./scripts/smoke-tests.sh production
            displayName: 'Run smoke tests'

          - task: SlackNotification@1
            inputs:
              SlackApiToken: $(slackApiToken)
              Channel: '#deployments'
              Message: 'Production deployment completed successfully!'

- stage: SecurityScan
  displayName: 'Security Scanning'
  dependsOn: Build
  jobs:
  - job: SecurityScan
    displayName: 'Container Security Scan'
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: AquaSecurityTrivy@1
      inputs:
        image: '$(containerRegistry)/$(imageRepository):$(tag)'
        exitCode: '1'
        severity: 'HIGH,CRITICAL'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/trivy-results.xml'
        testRunTitle: 'Security Scan Results'
